
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.52 (git sha1 fee39a328, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)
echo on

yosys> read_verilog -noblackbox -sv inputs/picorv32.v

1. Executing Verilog-2005 frontend: inputs/picorv32.v
Parsing SystemVerilog input from `inputs/picorv32.v' to AST representation.
Generating RTLIL representation for module `\picorv32'.
Generating RTLIL representation for module `\picorv32_regs'.
Generating RTLIL representation for module `\picorv32_pcpi_mul'.
Generating RTLIL representation for module `\picorv32_pcpi_fast_mul'.
Generating RTLIL representation for module `\picorv32_pcpi_div'.
Generating RTLIL representation for module `\picorv32_axi'.
Generating RTLIL representation for module `\picorv32_axi_adapter'.
Generating RTLIL representation for module `\picorv32_wb'.
Successfully finished Verilog frontend.

yosys> chparam -list picorv32
picorv32:
  ENABLE_COUNTERS
  ENABLE_COUNTERS64
  ENABLE_REGS_16_31
  ENABLE_REGS_DUALPORT
  LATCHED_MEM_RDATA
  TWO_STAGE_SHIFT
  BARREL_SHIFTER
  TWO_CYCLE_COMPARE
  TWO_CYCLE_ALU
  COMPRESSED_ISA
  CATCH_MISALIGN
  CATCH_ILLINSN
  ENABLE_PCPI
  ENABLE_MUL
  ENABLE_FAST_MUL
  ENABLE_DIV
  ENABLE_IRQ
  ENABLE_IRQ_QREGS
  ENABLE_IRQ_TIMER
  ENABLE_TRACE
  REGS_INIT_ZERO
  MASKED_IRQ
  LATCHED_IRQ
  PROGADDR_RESET
  PROGADDR_IRQ
  STACKADDR

yosys> read_liberty -setattr liberty_cell -lib /nfs/sc_compute/builds/03ceb3a4f0e94730a95a08d439e9c2e9/picorv32/job0/syn/0/inputs/sc_logic_sky130hd_sky130_fd_sc_hd__ss_n40C_1v40.lib

2. Executing Liberty frontend: /nfs/sc_compute/builds/03ceb3a4f0e94730a95a08d439e9c2e9/picorv32/job0/syn/0/inputs/sc_logic_sky130hd_sky130_fd_sc_hd__ss_n40C_1v40.lib
Imported 428 cell types from liberty file.

yosys> hierarchy -top picorv32

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \picorv32

3.2. Analyzing design hierarchy..
Top module:  \picorv32
Removing unused module `\picorv32_wb'.
Removing unused module `\picorv32_axi_adapter'.
Removing unused module `\picorv32_axi'.
Removing unused module `\picorv32_pcpi_div'.
Removing unused module `\picorv32_pcpi_fast_mul'.
Removing unused module `\picorv32_pcpi_mul'.
Removing unused module `\picorv32_regs'.
Removed 7 unused modules.

yosys> tribuf

4. Executing TRIBUF pass.

yosys> scratchpad -set flatten.separator /

yosys> synth -flatten -extra-map /venv/lib/python3.10/site-packages/siliconcompiler/tools/yosys/techmaps/lcu_kogge_stone.v -top picorv32 -run begin:fine

5. Executing SYNTH pass.

yosys> hierarchy -check -top picorv32

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \picorv32

5.1.2. Analyzing design hierarchy..
Top module:  \picorv32
Removed 0 unused modules.

yosys> proc

5.2. Executing PROC pass (convert processes to netlists).

yosys> proc_clean

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\picorv32.$proc$inputs/picorv32.v:0$688'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:0$688'.
Found and cleaned up 17 empty switches in `\picorv32.$proc$inputs/picorv32.v:1114$509'.
Found and cleaned up 1 empty switch in `\picorv32.$proc$inputs/picorv32.v:1102$493'.
Found and cleaned up 6 empty switches in `\picorv32.$proc$inputs/picorv32.v:415$129'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:415$129'.
Cleaned up 25 empty switches.

yosys> proc_rmdead

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 34 switch rules as full_case in process $proc$inputs/picorv32.v:1114$509 in module picorv32.
Marked 1 switch rules as full_case in process $proc$inputs/picorv32.v:1098$484 in module picorv32.
Marked 2 switch rules as full_case in process $proc$inputs/picorv32.v:1073$472 in module picorv32.
Marked 2 switch rules as full_case in process $proc$inputs/picorv32.v:1061$467 in module picorv32.
Marked 8 switch rules as full_case in process $proc$inputs/picorv32.v:969$432 in module picorv32.
Marked 3 switch rules as full_case in process $proc$inputs/picorv32.v:676$169 in module picorv32.
Marked 3 switch rules as full_case in process $proc$inputs/picorv32.v:648$167 in module picorv32.
Marked 2 switch rules as full_case in process $proc$inputs/picorv32.v:621$163 in module picorv32.
Marked 48 switch rules as full_case in process $proc$inputs/picorv32.v:555$162 in module picorv32.
Marked 4 switch rules as full_case in process $proc$inputs/picorv32.v:429$138 in module picorv32.
Marked 1 switch rules as full_case in process $proc$inputs/picorv32.v:301$100 in module picorv32.
Removed 2 dead cases from process $proc$inputs/picorv32.v:273$97 in module picorv32.
Marked 2 switch rules as full_case in process $proc$inputs/picorv32.v:273$97 in module picorv32.
Marked 1 switch rules as full_case in process $proc$inputs/picorv32.v:263$92 in module picorv32.
Marked 1 switch rules as full_case in process $proc$inputs/picorv32.v:211$18 in module picorv32.
Removed a total of 2 dead cases.

yosys> proc_prune

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 57 assignments to connections.

yosys> proc_init

5.2.4. Executing PROC_INIT pass (extract init attributes).

yosys> proc_arst

5.2.5. Executing PROC_ARST pass (detect async resets in processes).

yosys> proc_rom

5.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~187 debug messages>

yosys> proc_mux

5.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
     1/78: $17\next_irq_pending[2:2]
     2/78: $16\next_irq_pending[2:2]
     3/78: $15\next_irq_pending[2:2]
     4/78: $14\next_irq_pending[2:2]
     5/78: $13\next_irq_pending[2:2]
     6/78: $12\next_irq_pending[2:2]
     7/78: $11\next_irq_pending[2:2]
     8/78: $2\next_irq_pending[31:0] [31:2]
     9/78: $3\set_mem_do_rdata[0:0]
    10/78: $2\next_irq_pending[31:0] [1]
    11/78: $3\set_mem_do_wdata[0:0]
    12/78: $2\next_irq_pending[31:0] [0]
    13/78: $4\set_mem_do_rinst[0:0]
    14/78: $3\set_mem_do_rinst[0:0]
    15/78: $4\set_mem_do_wdata[0:0]
    16/78: $9\next_irq_pending[1:1]
    17/78: $8\next_irq_pending[1:1]
    18/78: $7\next_irq_pending[1:1]
    19/78: $4\set_mem_do_rdata[0:0]
    20/78: $5\next_irq_pending[1:1]
    21/78: $4\next_irq_pending[1:1]
    22/78: $10\next_irq_pending[1:1]
    23/78: $5\set_mem_do_rinst[0:0]
    24/78: $6\next_irq_pending[1:1]
    25/78: $3\next_irq_pending[31:0]
    26/78: $3\current_pc[31:0]
    27/78: $2\current_pc[31:0]
    28/78: $2\set_mem_do_wdata[0:0]
    29/78: $2\set_mem_do_rdata[0:0]
    30/78: $2\set_mem_do_rinst[0:0]
    31/78: $1\next_irq_pending[31:0]
    32/78: $1\current_pc[31:0]
    33/78: $1\set_mem_do_wdata[0:0]
    34/78: $1\set_mem_do_rdata[0:0]
    35/78: $1\set_mem_do_rinst[0:0]
    36/78: $0\trace_data[35:0]
    37/78: $0\count_cycle[63:0]
    38/78: $0\trace_valid[0:0]
    39/78: $0\do_waitirq[0:0]
    40/78: $0\decoder_pseudo_trigger[0:0]
    41/78: $0\decoder_trigger[0:0]
    42/78: $0\alu_wait_2[0:0]
    43/78: $0\alu_wait[0:0]
    44/78: $0\reg_out[31:0]
    45/78: $0\reg_sh[4:0]
    46/78: $0\trap[0:0]
    47/78: $0\pcpi_timeout[0:0]
    48/78: $0\latched_rd[4:0]
    49/78: $0\latched_is_lb[0:0]
    50/78: $0\latched_is_lh[0:0]
    51/78: $0\latched_is_lu[0:0]
    52/78: $0\latched_trace[0:0]
    53/78: $0\latched_compr[0:0]
    54/78: $0\latched_branch[0:0]
    55/78: $0\latched_stalu[0:0]
    56/78: $0\latched_store[0:0]
    57/78: $0\irq_state[1:0]
    58/78: $0\cpu_state[7:0]
    59/78: $0\dbg_rs2val_valid[0:0]
    60/78: $0\dbg_rs1val_valid[0:0]
    61/78: $0\dbg_rs2val[31:0]
    62/78: $0\dbg_rs1val[31:0]
    63/78: $0\mem_do_wdata[0:0]
    64/78: $0\mem_do_rdata[0:0]
    65/78: $0\mem_do_rinst[0:0]
    66/78: $0\mem_do_prefetch[0:0]
    67/78: $0\mem_wordsize[1:0]
    68/78: $0\timer[31:0]
    69/78: $0\irq_mask[31:0]
    70/78: $0\irq_active[0:0]
    71/78: $0\irq_delay[0:0]
    72/78: $0\reg_op2[31:0]
    73/78: $0\reg_op1[31:0]
    74/78: $0\reg_next_pc[31:0]
    75/78: $0\reg_pc[31:0]
    76/78: $0\count_instr[63:0]
    77/78: $0\eoi[31:0]
    78/78: $0\pcpi_valid[0:0]
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:1102$493'.
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:1098$484'.
     1/3: $1$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$492
     2/3: $1$memwr$\cpuregs$inputs/picorv32.v:1100$17_DATA[31:0]$491
     3/3: $1$memwr$\cpuregs$inputs/picorv32.v:1100$17_ADDR[4:0]$490
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:1073$472'.
     1/4: $2\cpuregs_write[0:0]
     2/4: $2\cpuregs_wrdata[31:0]
     3/4: $1\cpuregs_wrdata[31:0]
     4/4: $1\cpuregs_write[0:0]
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:1061$467'.
     1/2: $2\clear_prefetched_high_word[0:0]
     2/2: $1\clear_prefetched_high_word[0:0]
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:1060$466'.
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:1023$444'.
     1/2: $1\alu_out[31:0]
     2/2: $1\alu_out_0[0:0]
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:969$432'.
     1/8: $8\dbg_ascii_state[127:0]
     2/8: $7\dbg_ascii_state[127:0]
     3/8: $6\dbg_ascii_state[127:0]
     4/8: $5\dbg_ascii_state[127:0]
     5/8: $4\dbg_ascii_state[127:0]
     6/8: $3\dbg_ascii_state[127:0]
     7/8: $2\dbg_ascii_state[127:0]
     8/8: $1\dbg_ascii_state[127:0]
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:676$169'.
     1/77: $0\decoded_rs1[4:0] [4]
     2/77: $0\decoded_imm_j[31:0] [10]
     3/77: $0\decoded_imm_j[31:0] [7]
     4/77: $0\decoded_imm_j[31:0] [6]
     5/77: $0\decoded_imm_j[31:0] [3:1]
     6/77: $0\decoded_imm_j[31:0] [5]
     7/77: $0\decoded_imm_j[31:0] [9:8]
     8/77: $0\decoded_imm_j[31:0] [31:20]
     9/77: $0\decoded_imm_j[31:0] [4]
    10/77: $0\decoded_imm_j[31:0] [11]
    11/77: $0\decoded_imm_j[31:0] [0]
    12/77: $0\decoded_rs1[4:0] [3:0]
    13/77: $0\is_lui_auipc_jal_jalr_addi_add_sub[0:0]
    14/77: $0\is_alu_reg_reg[0:0]
    15/77: $0\is_alu_reg_imm[0:0]
    16/77: $0\is_beq_bne_blt_bge_bltu_bgeu[0:0]
    17/77: $0\is_sll_srl_sra[0:0]
    18/77: $0\is_sb_sh_sw[0:0]
    19/77: $0\is_jalr_addi_slti_sltiu_xori_ori_andi[0:0]
    20/77: $0\is_slli_srli_srai[0:0]
    21/77: $0\is_lb_lh_lw_lbu_lhu[0:0]
    22/77: $0\compressed_instr[0:0]
    23/77: $0\is_compare[0:0]
    24/77: $0\decoded_imm[31:0]
    25/77: $0\decoded_rs2[4:0]
    26/77: $0\decoded_imm_j[31:0] [19:12]
    27/77: $0\decoded_rd[4:0]
    28/77: $0\instr_timer[0:0]
    29/77: $0\instr_waitirq[0:0]
    30/77: $0\instr_maskirq[0:0]
    31/77: $0\instr_retirq[0:0]
    32/77: $0\instr_setq[0:0]
    33/77: $0\instr_getq[0:0]
    34/77: $0\instr_fence[0:0]
    35/77: $0\instr_ecall_ebreak[0:0]
    36/77: $0\instr_rdinstrh[0:0]
    37/77: $0\instr_rdinstr[0:0]
    38/77: $0\instr_rdcycleh[0:0]
    39/77: $0\instr_rdcycle[0:0]
    40/77: $0\instr_and[0:0]
    41/77: $0\instr_or[0:0]
    42/77: $0\instr_sra[0:0]
    43/77: $0\instr_srl[0:0]
    44/77: $0\instr_xor[0:0]
    45/77: $0\instr_sltu[0:0]
    46/77: $0\instr_slt[0:0]
    47/77: $0\instr_sll[0:0]
    48/77: $0\instr_sub[0:0]
    49/77: $0\instr_add[0:0]
    50/77: $0\instr_srai[0:0]
    51/77: $0\instr_srli[0:0]
    52/77: $0\instr_slli[0:0]
    53/77: $0\instr_andi[0:0]
    54/77: $0\instr_ori[0:0]
    55/77: $0\instr_xori[0:0]
    56/77: $0\instr_sltiu[0:0]
    57/77: $0\instr_slti[0:0]
    58/77: $0\instr_addi[0:0]
    59/77: $0\instr_sw[0:0]
    60/77: $0\instr_sh[0:0]
    61/77: $0\instr_sb[0:0]
    62/77: $0\instr_lhu[0:0]
    63/77: $0\instr_lbu[0:0]
    64/77: $0\instr_lw[0:0]
    65/77: $0\instr_lh[0:0]
    66/77: $0\instr_lb[0:0]
    67/77: $0\instr_bgeu[0:0]
    68/77: $0\instr_bltu[0:0]
    69/77: $0\instr_bge[0:0]
    70/77: $0\instr_blt[0:0]
    71/77: $0\instr_bne[0:0]
    72/77: $0\instr_beq[0:0]
    73/77: $0\instr_jalr[0:0]
    74/77: $0\instr_jal[0:0]
    75/77: $0\instr_auipc[0:0]
    76/77: $0\instr_lui[0:0]
    77/77: $0\pcpi_insn[31:0]
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:648$167'.
     1/13: $3\dbg_insn_opcode[31:0]
     2/13: $2\dbg_insn_rd[4:0]
     3/13: $2\dbg_insn_rs2[4:0]
     4/13: $2\dbg_insn_rs1[4:0]
     5/13: $2\dbg_insn_opcode[31:0]
     6/13: $2\dbg_insn_imm[31:0]
     7/13: $2\dbg_ascii_instr[63:0]
     8/13: $1\dbg_insn_rd[4:0]
     9/13: $1\dbg_insn_rs2[4:0]
    10/13: $1\dbg_insn_rs1[4:0]
    11/13: $1\dbg_insn_imm[31:0]
    12/13: $1\dbg_ascii_instr[63:0]
    13/13: $1\dbg_insn_opcode[31:0]
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:621$163'.
     1/8: $0\cached_insn_rd[4:0]
     2/8: $0\cached_insn_rs2[4:0]
     3/8: $0\cached_insn_rs1[4:0]
     4/8: $0\cached_insn_opcode[31:0]
     5/8: $0\cached_insn_imm[31:0]
     6/8: $0\cached_ascii_instr[63:0]
     7/8: $0\dbg_valid_insn[0:0]
     8/8: $0\dbg_insn_addr[31:0]
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:555$162'.
     1/48: $48\new_ascii_instr[63:0]
     2/48: $47\new_ascii_instr[63:0]
     3/48: $46\new_ascii_instr[63:0]
     4/48: $45\new_ascii_instr[63:0]
     5/48: $44\new_ascii_instr[63:0]
     6/48: $43\new_ascii_instr[63:0]
     7/48: $42\new_ascii_instr[63:0]
     8/48: $41\new_ascii_instr[63:0]
     9/48: $40\new_ascii_instr[63:0]
    10/48: $39\new_ascii_instr[63:0]
    11/48: $38\new_ascii_instr[63:0]
    12/48: $37\new_ascii_instr[63:0]
    13/48: $36\new_ascii_instr[63:0]
    14/48: $35\new_ascii_instr[63:0]
    15/48: $34\new_ascii_instr[63:0]
    16/48: $33\new_ascii_instr[63:0]
    17/48: $32\new_ascii_instr[63:0]
    18/48: $31\new_ascii_instr[63:0]
    19/48: $30\new_ascii_instr[63:0]
    20/48: $29\new_ascii_instr[63:0]
    21/48: $28\new_ascii_instr[63:0]
    22/48: $27\new_ascii_instr[63:0]
    23/48: $26\new_ascii_instr[63:0]
    24/48: $25\new_ascii_instr[63:0]
    25/48: $24\new_ascii_instr[63:0]
    26/48: $23\new_ascii_instr[63:0]
    27/48: $22\new_ascii_instr[63:0]
    28/48: $21\new_ascii_instr[63:0]
    29/48: $20\new_ascii_instr[63:0]
    30/48: $19\new_ascii_instr[63:0]
    31/48: $18\new_ascii_instr[63:0]
    32/48: $17\new_ascii_instr[63:0]
    33/48: $16\new_ascii_instr[63:0]
    34/48: $15\new_ascii_instr[63:0]
    35/48: $14\new_ascii_instr[63:0]
    36/48: $13\new_ascii_instr[63:0]
    37/48: $12\new_ascii_instr[63:0]
    38/48: $11\new_ascii_instr[63:0]
    39/48: $10\new_ascii_instr[63:0]
    40/48: $9\new_ascii_instr[63:0]
    41/48: $8\new_ascii_instr[63:0]
    42/48: $7\new_ascii_instr[63:0]
    43/48: $6\new_ascii_instr[63:0]
    44/48: $5\new_ascii_instr[63:0]
    45/48: $4\new_ascii_instr[63:0]
    46/48: $3\new_ascii_instr[63:0]
    47/48: $2\new_ascii_instr[63:0]
    48/48: $1\new_ascii_instr[63:0]
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:429$138'.
     1/9: $0\mem_16bit_buffer[15:0]
     2/9: $0\prefetched_high_word[0:0]
     3/9: $0\mem_la_secondword[0:0]
     4/9: $0\mem_state[1:0]
     5/9: $0\mem_wstrb[3:0]
     6/9: $0\mem_wdata[31:0]
     7/9: $0\mem_addr[31:0]
     8/9: $0\mem_instr[0:0]
     9/9: $0\mem_valid[0:0]
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:1014$677'.
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:301$100'.
     1/9: $0\mem_rdata_q[31:0] [31]
     2/9: $0\mem_rdata_q[31:0] [7]
     3/9: $0\mem_rdata_q[31:0] [24:20]
     4/9: $0\mem_rdata_q[31:0] [19:15]
     5/9: $0\mem_rdata_q[31:0] [6:0]
     6/9: $0\mem_rdata_q[31:0] [14:12]
     7/9: $0\mem_rdata_q[31:0] [11:8]
     8/9: $0\mem_rdata_q[31:0] [30:25]
     9/9: $0\next_insn_opcode[31:0]
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:273$97'.
     1/5: $3\mem_rdata_word[31:0]
     2/5: $2\mem_rdata_word[31:0]
     3/5: $1\mem_rdata_word[31:0]
     4/5: $1\mem_la_wstrb[3:0]
     5/5: $1\mem_la_wdata[31:0]
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:263$92'.
     1/2: $0\last_mem_valid[0:0]
     2/2: $0\mem_la_firstword_reg[0:0]
Creating decoders for process `\picorv32.$proc$inputs/picorv32.v:211$18'.
     1/2: $1\pcpi_int_rd[31:0]
     2/2: $1\pcpi_int_wr[0:0]

yosys> proc_dlatch

5.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\picorv32.\cpuregs_rs1' from process `\picorv32.$proc$inputs/picorv32.v:1102$493'.
No latch inferred for signal `\picorv32.\cpuregs_rs2' from process `\picorv32.$proc$inputs/picorv32.v:1102$493'.
No latch inferred for signal `\picorv32.\decoded_rs' from process `\picorv32.$proc$inputs/picorv32.v:1102$493'.
No latch inferred for signal `\picorv32.\cpuregs_write' from process `\picorv32.$proc$inputs/picorv32.v:1073$472'.
No latch inferred for signal `\picorv32.\cpuregs_wrdata' from process `\picorv32.$proc$inputs/picorv32.v:1073$472'.
No latch inferred for signal `\picorv32.\clear_prefetched_high_word' from process `\picorv32.$proc$inputs/picorv32.v:1061$467'.
No latch inferred for signal `\picorv32.\alu_out' from process `\picorv32.$proc$inputs/picorv32.v:1023$444'.
No latch inferred for signal `\picorv32.\alu_out_0' from process `\picorv32.$proc$inputs/picorv32.v:1023$444'.
No latch inferred for signal `\picorv32.\dbg_ascii_state' from process `\picorv32.$proc$inputs/picorv32.v:969$432'.
No latch inferred for signal `\picorv32.\dbg_insn_opcode' from process `\picorv32.$proc$inputs/picorv32.v:648$167'.
No latch inferred for signal `\picorv32.\dbg_ascii_instr' from process `\picorv32.$proc$inputs/picorv32.v:648$167'.
No latch inferred for signal `\picorv32.\dbg_insn_imm' from process `\picorv32.$proc$inputs/picorv32.v:648$167'.
No latch inferred for signal `\picorv32.\dbg_insn_rs1' from process `\picorv32.$proc$inputs/picorv32.v:648$167'.
No latch inferred for signal `\picorv32.\dbg_insn_rs2' from process `\picorv32.$proc$inputs/picorv32.v:648$167'.
No latch inferred for signal `\picorv32.\dbg_insn_rd' from process `\picorv32.$proc$inputs/picorv32.v:648$167'.
No latch inferred for signal `\picorv32.\new_ascii_instr' from process `\picorv32.$proc$inputs/picorv32.v:555$162'.
No latch inferred for signal `\picorv32.\alu_add_sub' from process `\picorv32.$proc$inputs/picorv32.v:1014$677'.
No latch inferred for signal `\picorv32.\alu_shl' from process `\picorv32.$proc$inputs/picorv32.v:1014$677'.
No latch inferred for signal `\picorv32.\alu_shr' from process `\picorv32.$proc$inputs/picorv32.v:1014$677'.
No latch inferred for signal `\picorv32.\alu_eq' from process `\picorv32.$proc$inputs/picorv32.v:1014$677'.
No latch inferred for signal `\picorv32.\alu_ltu' from process `\picorv32.$proc$inputs/picorv32.v:1014$677'.
No latch inferred for signal `\picorv32.\alu_lts' from process `\picorv32.$proc$inputs/picorv32.v:1014$677'.
No latch inferred for signal `\picorv32.\mem_la_wdata' from process `\picorv32.$proc$inputs/picorv32.v:273$97'.
No latch inferred for signal `\picorv32.\mem_la_wstrb' from process `\picorv32.$proc$inputs/picorv32.v:273$97'.
No latch inferred for signal `\picorv32.\mem_rdata_word' from process `\picorv32.$proc$inputs/picorv32.v:273$97'.
No latch inferred for signal `\picorv32.\pcpi_int_wr' from process `\picorv32.$proc$inputs/picorv32.v:211$18'.
No latch inferred for signal `\picorv32.\pcpi_int_rd' from process `\picorv32.$proc$inputs/picorv32.v:211$18'.
No latch inferred for signal `\picorv32.\pcpi_int_wait' from process `\picorv32.$proc$inputs/picorv32.v:211$18'.
No latch inferred for signal `\picorv32.\pcpi_int_ready' from process `\picorv32.$proc$inputs/picorv32.v:211$18'.

yosys> proc_dff

5.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\picorv32.\trap' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3582' with positive edge clock.
Creating register for signal `\picorv32.\pcpi_valid' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3583' with positive edge clock.
Creating register for signal `\picorv32.\eoi' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3584' with positive edge clock.
Creating register for signal `\picorv32.\trace_valid' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3585' with positive edge clock.
Creating register for signal `\picorv32.\trace_data' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3586' with positive edge clock.
Creating register for signal `\picorv32.\count_cycle' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3587' with positive edge clock.
Creating register for signal `\picorv32.\count_instr' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3588' with positive edge clock.
Creating register for signal `\picorv32.\reg_pc' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3589' with positive edge clock.
Creating register for signal `\picorv32.\reg_next_pc' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3590' with positive edge clock.
Creating register for signal `\picorv32.\reg_op1' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3591' with positive edge clock.
Creating register for signal `\picorv32.\reg_op2' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3592' with positive edge clock.
Creating register for signal `\picorv32.\reg_out' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3593' with positive edge clock.
Creating register for signal `\picorv32.\reg_sh' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3594' with positive edge clock.
Creating register for signal `\picorv32.\irq_delay' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3595' with positive edge clock.
Creating register for signal `\picorv32.\irq_active' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3596' with positive edge clock.
Creating register for signal `\picorv32.\irq_mask' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3597' with positive edge clock.
Creating register for signal `\picorv32.\irq_pending' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3598' with positive edge clock.
Creating register for signal `\picorv32.\timer' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3599' with positive edge clock.
Creating register for signal `\picorv32.\mem_wordsize' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3600' with positive edge clock.
Creating register for signal `\picorv32.\mem_do_prefetch' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3601' with positive edge clock.
Creating register for signal `\picorv32.\mem_do_rinst' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3602' with positive edge clock.
Creating register for signal `\picorv32.\mem_do_rdata' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3603' with positive edge clock.
Creating register for signal `\picorv32.\mem_do_wdata' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3604' with positive edge clock.
Creating register for signal `\picorv32.\decoder_trigger' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3605' with positive edge clock.
Creating register for signal `\picorv32.\decoder_trigger_q' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3606' with positive edge clock.
Creating register for signal `\picorv32.\decoder_pseudo_trigger' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3607' with positive edge clock.
Creating register for signal `\picorv32.\decoder_pseudo_trigger_q' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3608' with positive edge clock.
Creating register for signal `\picorv32.\dbg_rs1val' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3609' with positive edge clock.
Creating register for signal `\picorv32.\dbg_rs2val' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3610' with positive edge clock.
Creating register for signal `\picorv32.\dbg_rs1val_valid' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3611' with positive edge clock.
Creating register for signal `\picorv32.\dbg_rs2val_valid' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3612' with positive edge clock.
Creating register for signal `\picorv32.\cpu_state' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3613' with positive edge clock.
Creating register for signal `\picorv32.\irq_state' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3614' with positive edge clock.
Creating register for signal `\picorv32.\set_mem_do_rinst' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3615' with positive edge clock.
Creating register for signal `\picorv32.\set_mem_do_rdata' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3616' with positive edge clock.
Creating register for signal `\picorv32.\set_mem_do_wdata' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3617' with positive edge clock.
Creating register for signal `\picorv32.\latched_store' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3618' with positive edge clock.
Creating register for signal `\picorv32.\latched_stalu' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3619' with positive edge clock.
Creating register for signal `\picorv32.\latched_branch' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3620' with positive edge clock.
Creating register for signal `\picorv32.\latched_compr' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3621' with positive edge clock.
Creating register for signal `\picorv32.\latched_trace' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3622' with positive edge clock.
Creating register for signal `\picorv32.\latched_is_lu' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3623' with positive edge clock.
Creating register for signal `\picorv32.\latched_is_lh' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3624' with positive edge clock.
Creating register for signal `\picorv32.\latched_is_lb' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3625' with positive edge clock.
Creating register for signal `\picorv32.\latched_rd' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3626' with positive edge clock.
Creating register for signal `\picorv32.\current_pc' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3627' with positive edge clock.
Creating register for signal `\picorv32.\pcpi_timeout' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3628' with positive edge clock.
Creating register for signal `\picorv32.\next_irq_pending' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3629' with positive edge clock.
Creating register for signal `\picorv32.\do_waitirq' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3630' with positive edge clock.
Creating register for signal `\picorv32.\alu_out_q' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3631' with positive edge clock.
Creating register for signal `\picorv32.\alu_out_0_q' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3632' with positive edge clock.
Creating register for signal `\picorv32.\alu_wait' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3633' with positive edge clock.
Creating register for signal `\picorv32.\alu_wait_2' using process `\picorv32.$proc$inputs/picorv32.v:1114$509'.
  created $dff cell `$procdff$3634' with positive edge clock.
Creating register for signal `\picorv32.$memwr$\cpuregs$inputs/picorv32.v:1100$17_ADDR' using process `\picorv32.$proc$inputs/picorv32.v:1098$484'.
  created $dff cell `$procdff$3635' with positive edge clock.
Creating register for signal `\picorv32.$memwr$\cpuregs$inputs/picorv32.v:1100$17_DATA' using process `\picorv32.$proc$inputs/picorv32.v:1098$484'.
  created $dff cell `$procdff$3636' with positive edge clock.
Creating register for signal `\picorv32.$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN' using process `\picorv32.$proc$inputs/picorv32.v:1098$484'.
  created $dff cell `$procdff$3637' with positive edge clock.
Creating register for signal `\picorv32.\clear_prefetched_high_word_q' using process `\picorv32.$proc$inputs/picorv32.v:1060$466'.
  created $dff cell `$procdff$3638' with positive edge clock.
Creating register for signal `\picorv32.\pcpi_insn' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3639' with positive edge clock.
Creating register for signal `\picorv32.\instr_lui' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3640' with positive edge clock.
Creating register for signal `\picorv32.\instr_auipc' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3641' with positive edge clock.
Creating register for signal `\picorv32.\instr_jal' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3642' with positive edge clock.
Creating register for signal `\picorv32.\instr_jalr' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3643' with positive edge clock.
Creating register for signal `\picorv32.\instr_beq' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3644' with positive edge clock.
Creating register for signal `\picorv32.\instr_bne' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3645' with positive edge clock.
Creating register for signal `\picorv32.\instr_blt' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3646' with positive edge clock.
Creating register for signal `\picorv32.\instr_bge' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3647' with positive edge clock.
Creating register for signal `\picorv32.\instr_bltu' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3648' with positive edge clock.
Creating register for signal `\picorv32.\instr_bgeu' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3649' with positive edge clock.
Creating register for signal `\picorv32.\instr_lb' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3650' with positive edge clock.
Creating register for signal `\picorv32.\instr_lh' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3651' with positive edge clock.
Creating register for signal `\picorv32.\instr_lw' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3652' with positive edge clock.
Creating register for signal `\picorv32.\instr_lbu' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3653' with positive edge clock.
Creating register for signal `\picorv32.\instr_lhu' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3654' with positive edge clock.
Creating register for signal `\picorv32.\instr_sb' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3655' with positive edge clock.
Creating register for signal `\picorv32.\instr_sh' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3656' with positive edge clock.
Creating register for signal `\picorv32.\instr_sw' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3657' with positive edge clock.
Creating register for signal `\picorv32.\instr_addi' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3658' with positive edge clock.
Creating register for signal `\picorv32.\instr_slti' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3659' with positive edge clock.
Creating register for signal `\picorv32.\instr_sltiu' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3660' with positive edge clock.
Creating register for signal `\picorv32.\instr_xori' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3661' with positive edge clock.
Creating register for signal `\picorv32.\instr_ori' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3662' with positive edge clock.
Creating register for signal `\picorv32.\instr_andi' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3663' with positive edge clock.
Creating register for signal `\picorv32.\instr_slli' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3664' with positive edge clock.
Creating register for signal `\picorv32.\instr_srli' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3665' with positive edge clock.
Creating register for signal `\picorv32.\instr_srai' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3666' with positive edge clock.
Creating register for signal `\picorv32.\instr_add' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3667' with positive edge clock.
Creating register for signal `\picorv32.\instr_sub' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3668' with positive edge clock.
Creating register for signal `\picorv32.\instr_sll' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3669' with positive edge clock.
Creating register for signal `\picorv32.\instr_slt' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3670' with positive edge clock.
Creating register for signal `\picorv32.\instr_sltu' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3671' with positive edge clock.
Creating register for signal `\picorv32.\instr_xor' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3672' with positive edge clock.
Creating register for signal `\picorv32.\instr_srl' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3673' with positive edge clock.
Creating register for signal `\picorv32.\instr_sra' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3674' with positive edge clock.
Creating register for signal `\picorv32.\instr_or' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3675' with positive edge clock.
Creating register for signal `\picorv32.\instr_and' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3676' with positive edge clock.
Creating register for signal `\picorv32.\instr_rdcycle' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3677' with positive edge clock.
Creating register for signal `\picorv32.\instr_rdcycleh' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3678' with positive edge clock.
Creating register for signal `\picorv32.\instr_rdinstr' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3679' with positive edge clock.
Creating register for signal `\picorv32.\instr_rdinstrh' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3680' with positive edge clock.
Creating register for signal `\picorv32.\instr_ecall_ebreak' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3681' with positive edge clock.
Creating register for signal `\picorv32.\instr_fence' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3682' with positive edge clock.
Creating register for signal `\picorv32.\instr_getq' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3683' with positive edge clock.
Creating register for signal `\picorv32.\instr_setq' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3684' with positive edge clock.
Creating register for signal `\picorv32.\instr_retirq' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3685' with positive edge clock.
Creating register for signal `\picorv32.\instr_maskirq' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3686' with positive edge clock.
Creating register for signal `\picorv32.\instr_waitirq' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3687' with positive edge clock.
Creating register for signal `\picorv32.\instr_timer' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3688' with positive edge clock.
Creating register for signal `\picorv32.\decoded_rd' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3689' with positive edge clock.
Creating register for signal `\picorv32.\decoded_rs1' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3690' with positive edge clock.
Creating register for signal `\picorv32.\decoded_rs2' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3691' with positive edge clock.
Creating register for signal `\picorv32.\decoded_imm' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3692' with positive edge clock.
Creating register for signal `\picorv32.\decoded_imm_j' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3693' with positive edge clock.
Creating register for signal `\picorv32.\compressed_instr' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3694' with positive edge clock.
Creating register for signal `\picorv32.\is_lui_auipc_jal' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3695' with positive edge clock.
Creating register for signal `\picorv32.\is_lb_lh_lw_lbu_lhu' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3696' with positive edge clock.
Creating register for signal `\picorv32.\is_slli_srli_srai' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3697' with positive edge clock.
Creating register for signal `\picorv32.\is_jalr_addi_slti_sltiu_xori_ori_andi' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3698' with positive edge clock.
Creating register for signal `\picorv32.\is_sb_sh_sw' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3699' with positive edge clock.
Creating register for signal `\picorv32.\is_sll_srl_sra' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3700' with positive edge clock.
Creating register for signal `\picorv32.\is_lui_auipc_jal_jalr_addi_add_sub' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3701' with positive edge clock.
Creating register for signal `\picorv32.\is_slti_blt_slt' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3702' with positive edge clock.
Creating register for signal `\picorv32.\is_sltiu_bltu_sltu' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3703' with positive edge clock.
Creating register for signal `\picorv32.\is_beq_bne_blt_bge_bltu_bgeu' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3704' with positive edge clock.
Creating register for signal `\picorv32.\is_lbu_lhu_lw' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3705' with positive edge clock.
Creating register for signal `\picorv32.\is_alu_reg_imm' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3706' with positive edge clock.
Creating register for signal `\picorv32.\is_alu_reg_reg' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3707' with positive edge clock.
Creating register for signal `\picorv32.\is_compare' using process `\picorv32.$proc$inputs/picorv32.v:676$169'.
  created $dff cell `$procdff$3708' with positive edge clock.
Creating register for signal `\picorv32.\dbg_insn_addr' using process `\picorv32.$proc$inputs/picorv32.v:621$163'.
  created $dff cell `$procdff$3709' with positive edge clock.
Creating register for signal `\picorv32.\q_ascii_instr' using process `\picorv32.$proc$inputs/picorv32.v:621$163'.
  created $dff cell `$procdff$3710' with positive edge clock.
Creating register for signal `\picorv32.\q_insn_imm' using process `\picorv32.$proc$inputs/picorv32.v:621$163'.
  created $dff cell `$procdff$3711' with positive edge clock.
Creating register for signal `\picorv32.\q_insn_opcode' using process `\picorv32.$proc$inputs/picorv32.v:621$163'.
  created $dff cell `$procdff$3712' with positive edge clock.
Creating register for signal `\picorv32.\q_insn_rs1' using process `\picorv32.$proc$inputs/picorv32.v:621$163'.
  created $dff cell `$procdff$3713' with positive edge clock.
Creating register for signal `\picorv32.\q_insn_rs2' using process `\picorv32.$proc$inputs/picorv32.v:621$163'.
  created $dff cell `$procdff$3714' with positive edge clock.
Creating register for signal `\picorv32.\q_insn_rd' using process `\picorv32.$proc$inputs/picorv32.v:621$163'.
  created $dff cell `$procdff$3715' with positive edge clock.
Creating register for signal `\picorv32.\dbg_next' using process `\picorv32.$proc$inputs/picorv32.v:621$163'.
  created $dff cell `$procdff$3716' with positive edge clock.
Creating register for signal `\picorv32.\dbg_valid_insn' using process `\picorv32.$proc$inputs/picorv32.v:621$163'.
  created $dff cell `$procdff$3717' with positive edge clock.
Creating register for signal `\picorv32.\cached_ascii_instr' using process `\picorv32.$proc$inputs/picorv32.v:621$163'.
  created $dff cell `$procdff$3718' with positive edge clock.
Creating register for signal `\picorv32.\cached_insn_imm' using process `\picorv32.$proc$inputs/picorv32.v:621$163'.
  created $dff cell `$procdff$3719' with positive edge clock.
Creating register for signal `\picorv32.\cached_insn_opcode' using process `\picorv32.$proc$inputs/picorv32.v:621$163'.
  created $dff cell `$procdff$3720' with positive edge clock.
Creating register for signal `\picorv32.\cached_insn_rs1' using process `\picorv32.$proc$inputs/picorv32.v:621$163'.
  created $dff cell `$procdff$3721' with positive edge clock.
Creating register for signal `\picorv32.\cached_insn_rs2' using process `\picorv32.$proc$inputs/picorv32.v:621$163'.
  created $dff cell `$procdff$3722' with positive edge clock.
Creating register for signal `\picorv32.\cached_insn_rd' using process `\picorv32.$proc$inputs/picorv32.v:621$163'.
  created $dff cell `$procdff$3723' with positive edge clock.
Creating register for signal `\picorv32.\mem_valid' using process `\picorv32.$proc$inputs/picorv32.v:429$138'.
  created $dff cell `$procdff$3724' with positive edge clock.
Creating register for signal `\picorv32.\mem_instr' using process `\picorv32.$proc$inputs/picorv32.v:429$138'.
  created $dff cell `$procdff$3725' with positive edge clock.
Creating register for signal `\picorv32.\mem_addr' using process `\picorv32.$proc$inputs/picorv32.v:429$138'.
  created $dff cell `$procdff$3726' with positive edge clock.
Creating register for signal `\picorv32.\mem_wdata' using process `\picorv32.$proc$inputs/picorv32.v:429$138'.
  created $dff cell `$procdff$3727' with positive edge clock.
Creating register for signal `\picorv32.\mem_wstrb' using process `\picorv32.$proc$inputs/picorv32.v:429$138'.
  created $dff cell `$procdff$3728' with positive edge clock.
Creating register for signal `\picorv32.\mem_state' using process `\picorv32.$proc$inputs/picorv32.v:429$138'.
  created $dff cell `$procdff$3729' with positive edge clock.
Creating register for signal `\picorv32.\mem_la_secondword' using process `\picorv32.$proc$inputs/picorv32.v:429$138'.
  created $dff cell `$procdff$3730' with positive edge clock.
Creating register for signal `\picorv32.\prefetched_high_word' using process `\picorv32.$proc$inputs/picorv32.v:429$138'.
  created $dff cell `$procdff$3731' with positive edge clock.
Creating register for signal `\picorv32.\mem_16bit_buffer' using process `\picorv32.$proc$inputs/picorv32.v:429$138'.
  created $dff cell `$procdff$3732' with positive edge clock.
Creating register for signal `\picorv32.\next_insn_opcode' using process `\picorv32.$proc$inputs/picorv32.v:301$100'.
  created $dff cell `$procdff$3733' with positive edge clock.
Creating register for signal `\picorv32.\mem_rdata_q' using process `\picorv32.$proc$inputs/picorv32.v:301$100'.
  created $dff cell `$procdff$3734' with positive edge clock.
Creating register for signal `\picorv32.\mem_la_firstword_reg' using process `\picorv32.$proc$inputs/picorv32.v:263$92'.
  created $dff cell `$procdff$3735' with positive edge clock.
Creating register for signal `\picorv32.\last_mem_valid' using process `\picorv32.$proc$inputs/picorv32.v:263$92'.
  created $dff cell `$procdff$3736' with positive edge clock.

yosys> proc_memwr

5.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

yosys> proc_clean

5.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 53 empty switches in `\picorv32.$proc$inputs/picorv32.v:1114$509'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:1114$509'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:1102$493'.
Found and cleaned up 1 empty switch in `\picorv32.$proc$inputs/picorv32.v:1098$484'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:1098$484'.
Found and cleaned up 2 empty switches in `\picorv32.$proc$inputs/picorv32.v:1073$472'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:1073$472'.
Found and cleaned up 2 empty switches in `\picorv32.$proc$inputs/picorv32.v:1061$467'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:1061$467'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:1060$466'.
Found and cleaned up 2 empty switches in `\picorv32.$proc$inputs/picorv32.v:1023$444'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:1023$444'.
Found and cleaned up 8 empty switches in `\picorv32.$proc$inputs/picorv32.v:969$432'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:969$432'.
Found and cleaned up 22 empty switches in `\picorv32.$proc$inputs/picorv32.v:676$169'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:676$169'.
Found and cleaned up 3 empty switches in `\picorv32.$proc$inputs/picorv32.v:648$167'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:648$167'.
Found and cleaned up 5 empty switches in `\picorv32.$proc$inputs/picorv32.v:621$163'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:621$163'.
Found and cleaned up 48 empty switches in `\picorv32.$proc$inputs/picorv32.v:555$162'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:555$162'.
Found and cleaned up 16 empty switches in `\picorv32.$proc$inputs/picorv32.v:429$138'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:429$138'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:1014$677'.
Found and cleaned up 19 empty switches in `\picorv32.$proc$inputs/picorv32.v:301$100'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:301$100'.
Found and cleaned up 3 empty switches in `\picorv32.$proc$inputs/picorv32.v:273$97'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:273$97'.
Found and cleaned up 2 empty switches in `\picorv32.$proc$inputs/picorv32.v:263$92'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:263$92'.
Found and cleaned up 1 empty switch in `\picorv32.$proc$inputs/picorv32.v:211$18'.
Removing empty process `picorv32.$proc$inputs/picorv32.v:211$18'.
Cleaned up 187 empty switches.

yosys> opt_expr -keepdc

5.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~827 debug messages>

yosys> flatten

5.3. Executing FLATTEN pass (flatten design).

yosys> opt_expr

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~2 debug messages>

yosys> opt_clean

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 718 unused cells and 2199 unused wires.
<suppressed ~774 debug messages>

yosys> check

5.6. Executing CHECK pass (checking for obvious problems).
Checking module picorv32...
Found and reported 0 problems.

yosys> opt -nodffe -nosdff

5.7. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

yosys> opt_merge -nomux

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~585 debug messages>
Removed a total of 195 cells.

yosys> opt_muxtree

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1053.
    dead port 2/2 on $mux $procmux$1055.
    dead port 2/2 on $mux $procmux$1058.
    dead port 2/2 on $mux $procmux$1140.
    dead port 2/2 on $mux $procmux$1145.
    dead port 2/2 on $mux $procmux$1148.
    dead port 1/3 on $pmux $procmux$1201.
    dead port 2/2 on $mux $procmux$1233.
    dead port 2/2 on $mux $procmux$1246.
    dead port 2/2 on $mux $procmux$1259.
    dead port 1/7 on $pmux $procmux$1486.
    dead port 2/7 on $pmux $procmux$1486.
    dead port 3/7 on $pmux $procmux$1486.
    dead port 4/7 on $pmux $procmux$1486.
    dead port 5/7 on $pmux $procmux$1486.
    dead port 4/12 on $pmux $procmux$1526.
    dead port 5/12 on $pmux $procmux$1526.
    dead port 6/12 on $pmux $procmux$1526.
    dead port 7/12 on $pmux $procmux$1526.
    dead port 8/12 on $pmux $procmux$1526.
    dead port 1/7 on $pmux $procmux$1731.
    dead port 2/7 on $pmux $procmux$1731.
    dead port 3/7 on $pmux $procmux$1731.
    dead port 4/7 on $pmux $procmux$1731.
    dead port 5/7 on $pmux $procmux$1731.
    dead port 3/4 on $pmux $procmux$1795.
    dead port 1/2 on $mux $procmux$1802.
    dead port 2/2 on $mux $procmux$1802.
    dead port 4/12 on $pmux $procmux$1814.
    dead port 5/12 on $pmux $procmux$1814.
    dead port 6/12 on $pmux $procmux$1814.
    dead port 7/12 on $pmux $procmux$1814.
    dead port 8/12 on $pmux $procmux$1814.
    dead port 3/4 on $pmux $procmux$1996.
    dead port 4/12 on $pmux $procmux$2012.
    dead port 5/12 on $pmux $procmux$2012.
    dead port 6/12 on $pmux $procmux$2012.
    dead port 7/12 on $pmux $procmux$2012.
    dead port 8/12 on $pmux $procmux$2012.
    dead port 4/12 on $pmux $procmux$2195.
    dead port 5/12 on $pmux $procmux$2195.
    dead port 6/12 on $pmux $procmux$2195.
    dead port 7/12 on $pmux $procmux$2195.
    dead port 8/12 on $pmux $procmux$2195.
    dead port 1/9 on $pmux $procmux$2248.
    dead port 2/9 on $pmux $procmux$2248.
    dead port 3/9 on $pmux $procmux$2248.
    dead port 4/9 on $pmux $procmux$2248.
    dead port 5/9 on $pmux $procmux$2248.
    dead port 1/5 on $pmux $procmux$2374.
    dead port 2/5 on $pmux $procmux$2374.
    dead port 2/2 on $mux $procmux$2379.
    dead port 1/5 on $pmux $procmux$2383.
    dead port 2/5 on $pmux $procmux$2383.
    dead port 2/2 on $mux $procmux$2388.
    dead port 1/8 on $pmux $procmux$2403.
    dead port 2/8 on $pmux $procmux$2403.
    dead port 2/2 on $mux $procmux$3541.
    dead port 2/2 on $mux $procmux$3548.
    dead port 2/2 on $mux $procmux$861.
    dead port 2/2 on $mux $procmux$871.
    dead port 2/2 on $mux $procmux$873.
    dead port 2/2 on $mux $procmux$879.
    dead port 2/2 on $mux $procmux$886.
    dead port 2/2 on $mux $procmux$888.
    dead port 2/2 on $mux $procmux$894.
    dead port 2/2 on $mux $procmux$915.
    dead port 2/2 on $mux $procmux$918.
    dead port 2/2 on $mux $procmux$930.
    dead port 2/2 on $mux $procmux$937.
    dead port 2/2 on $mux $procmux$940.
    dead port 2/2 on $mux $procmux$964.
    dead port 2/2 on $mux $procmux$967.
    dead port 2/2 on $mux $procmux$976.
    dead port 2/2 on $mux $procmux$979.
    dead port 2/2 on $mux $procmux$987.
    dead port 2/2 on $mux $procmux$989.
    dead port 2/2 on $mux $procmux$992.
Removed 78 multiplexer ports.
<suppressed ~146 debug messages>

yosys> opt_reduce

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
    New ctrl vector for $pmux cell $procmux$1223: { $procmux$1225_CMP $auto$opt_reduce.cc:137:opt_pmux$3739 }
    New ctrl vector for $pmux cell $procmux$1236: { $auto$opt_reduce.cc:137:opt_pmux$3741 $procmux$1056_CMP }
    New ctrl vector for $pmux cell $procmux$1249: { $procmux$1146_CMP $auto$opt_reduce.cc:137:opt_pmux$3743 }
    New ctrl vector for $pmux cell $procmux$1466: { $procmux$1229_CMP $procmux$1146_CMP $procmux$1226_CMP $procmux$1056_CMP }
    New ctrl vector for $pmux cell $procmux$1526: { \is_slli_srli_srai $auto$opt_reduce.cc:137:opt_pmux$3745 }
    New ctrl vector for $pmux cell $procmux$1568: { $eq$inputs/picorv32.v:1076$473_Y $procmux$1146_CMP }
    New ctrl vector for $pmux cell $procmux$1665: { $eq$inputs/picorv32.v:1076$473_Y $procmux$1146_CMP }
    New ctrl vector for $pmux cell $procmux$1708: { $eq$inputs/picorv32.v:1076$473_Y $procmux$1229_CMP $procmux$1146_CMP $auto$opt_reduce.cc:137:opt_pmux$3747 }
    New ctrl vector for $pmux cell $procmux$1814: { \instr_trap \is_rdcycle_rdcycleh_rdinstr_rdinstrh $logic_and$inputs/picorv32.v:1388$586_Y \is_slli_srli_srai $auto$opt_reduce.cc:137:opt_pmux$3749 }
    New ctrl vector for $pmux cell $procmux$1986: { $eq$inputs/picorv32.v:1076$473_Y $procmux$1229_CMP $procmux$1228_CMP $procmux$1226_CMP }
    New ctrl vector for $pmux cell $procmux$2012: { $logic_and$inputs/picorv32.v:1388$586_Y $auto$opt_reduce.cc:137:opt_pmux$3753 $auto$opt_reduce.cc:137:opt_pmux$3751 }
    New ctrl vector for $pmux cell $procmux$2195: { $auto$opt_reduce.cc:137:opt_pmux$3757 $auto$opt_reduce.cc:137:opt_pmux$3755 }
    New ctrl vector for $pmux cell $procmux$2248: { $auto$opt_reduce.cc:137:opt_pmux$3759 \is_lui_auipc_jal }
    Consolidated identical input bits for $mux cell $procmux$2364:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487
      New ports: A=1'0, B=1'1, Y=$0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0]
      New connections: $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [31:1] = { $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] $0$memwr$\cpuregs$inputs/picorv32.v:1100$17_EN[31:0]$487 [0] }
    New ctrl vector for $pmux cell $procmux$2374: $auto$opt_reduce.cc:137:opt_pmux$3761
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$3752: { \is_slli_srli_srai \instr_trap \instr_rdinstrh \instr_rdinstr \instr_rdcycleh \instr_rdcycle }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$3756: { $logic_and$inputs/picorv32.v:1388$586_Y \is_slli_srli_srai \instr_trap \instr_rdinstrh \instr_rdinstr \instr_rdcycleh \instr_rdcycle }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$3758: { \instr_trap \instr_rdinstrh \instr_rdinstr \instr_rdcycleh \instr_rdcycle }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$3744: { $logic_and$inputs/picorv32.v:1388$586_Y \is_jalr_addi_slti_sltiu_xori_ori_andi \is_lui_auipc_jal \instr_trap \instr_rdinstrh \instr_rdinstr \instr_rdcycleh \instr_rdcycle }
  Optimizing cells in module \picorv32.
Performed a total of 25 changes.

yosys> opt_merge

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~39 debug messages>
Removed a total of 13 cells.

yosys> opt_dff -nodffe -nosdff

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $procdff$3585 ($dff) from module picorv32.
Setting constant 1-bit at position 0 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 1 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 2 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 3 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 4 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 5 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 6 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 7 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 8 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 9 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 10 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 11 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 12 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 13 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 14 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 15 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 16 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 17 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 18 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 19 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 20 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 21 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 22 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 23 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 24 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 25 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 26 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 27 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 28 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 29 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 30 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 31 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 32 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 33 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 34 on $procdff$3586 ($dff) from module picorv32.
Setting constant 1-bit at position 35 on $procdff$3586 ($dff) from module picorv32.

yosys> opt_clean

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 24 unused cells and 271 unused wires.
<suppressed ~32 debug messages>

yosys> opt_expr

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~2 debug messages>

5.7.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

5.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~140 debug messages>

yosys> opt_reduce

5.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
    New ctrl vector for $pmux cell $procmux$1336: $auto$opt_reduce.cc:137:opt_pmux$3763
    New ctrl vector for $pmux cell $procmux$1353: { $procmux$1146_CMP $auto$opt_reduce.cc:137:opt_pmux$3765 }
    New ctrl vector for $pmux cell $procmux$1773: { $eq$inputs/picorv32.v:1076$473_Y $procmux$1229_CMP $procmux$1228_CMP $procmux$1146_CMP $procmux$1226_CMP $auto$opt_reduce.cc:137:opt_pmux$3767 }
    New ctrl vector for $pmux cell $procmux$3300: { $logic_and$inputs/picorv32.v:256$67_Y $auto$opt_reduce.cc:137:opt_pmux$3769 }
  Optimizing cells in module \picorv32.
Performed a total of 4 changes.

yosys> opt_merge

5.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

yosys> opt_dff -nodffe -nosdff

5.7.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

5.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

5.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

5.7.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

5.7.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~140 debug messages>

yosys> opt_reduce

5.7.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

yosys> opt_merge

5.7.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff -nodffe -nosdff

5.7.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

5.7.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

yosys> opt_expr

5.7.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

5.7.23. Finished OPT passes. (There is nothing left to do.)

yosys> fsm

5.8. Executing FSM pass (extract and optimize FSM).

yosys> fsm_detect

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register picorv32.cpu_state.
Not marking picorv32.eoi as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
Not marking picorv32.mem_state as FSM state register:
    Users of register don't seem to benefit from recoding.
Found FSM state register picorv32.mem_wordsize.
Not marking picorv32.pcpi_insn as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

yosys> fsm_extract

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\cpu_state' from module `\picorv32'.
  found $dff cell for state register: $procdff$3613
  root of input selection tree: $0\cpu_state[7:0]
  found reset state: 8'10000000 (guessed from mux tree)
  found ctrl input: $logic_and$inputs/picorv32.v:1622$665_Y
  found ctrl input: $logic_and$inputs/picorv32.v:1606$647_Y
  found ctrl input: \resetn
  found state code: 8'01000000
  found ctrl input: $auto$opt_reduce.cc:137:opt_pmux$3763
  found ctrl input: $procmux$1226_CMP
  found ctrl input: $procmux$1146_CMP
  found ctrl input: $procmux$1228_CMP
  found ctrl input: $procmux$1229_CMP
  found ctrl input: $eq$inputs/picorv32.v:1076$473_Y
  found ctrl input: $logic_or$inputs/picorv32.v:1544$632_Y
  found ctrl input: $logic_and$inputs/picorv32.v:1559$636_Y
  found ctrl input: $eq$inputs/picorv32.v:1519$614_Y
  found ctrl input: \is_beq_bne_blt_bge_bltu_bgeu
  found ctrl input: \mem_done
  found ctrl input: \is_sll_srl_sra
  found ctrl input: \is_sb_sh_sw
  found state code: 8'00001000
  found state code: 8'00000100
  found state code: 8'00000010
  found ctrl input: $auto$opt_reduce.cc:137:opt_pmux$3749
  found ctrl input: \is_slli_srli_srai
  found ctrl input: $logic_and$inputs/picorv32.v:1388$586_Y
  found ctrl input: \is_rdcycle_rdcycleh_rdinstr_rdinstrh
  found ctrl input: \instr_trap
  found state code: 8'00000001
  found state code: 8'10000000
  found ctrl input: \decoder_trigger
  found ctrl input: \instr_jal
  found state code: 8'00100000
  found ctrl input: $logic_and$inputs/picorv32.v:1614$657_Y
  found ctrl input: $logic_and$inputs/picorv32.v:1607$650_Y
  found ctrl output: $eq$inputs/picorv32.v:1076$473_Y
  found ctrl output: $procmux$1056_CMP
  found ctrl output: $procmux$1146_CMP
  found ctrl output: $procmux$1231_CMP
  found ctrl output: $procmux$1229_CMP
  found ctrl output: $procmux$1228_CMP
  found ctrl output: $procmux$1226_CMP
  found ctrl output: $procmux$1225_CMP
  ctrl inputs: { $auto$opt_reduce.cc:137:opt_pmux$3749 $logic_and$inputs/picorv32.v:1622$665_Y $logic_and$inputs/picorv32.v:1614$657_Y $logic_and$inputs/picorv32.v:1607$650_Y $logic_and$inputs/picorv32.v:1606$647_Y $logic_and$inputs/picorv32.v:1559$636_Y $logic_or$inputs/picorv32.v:1544$632_Y $eq$inputs/picorv32.v:1519$614_Y $logic_and$inputs/picorv32.v:1388$586_Y $auto$opt_reduce.cc:137:opt_pmux$3763 \is_rdcycle_rdcycleh_rdinstr_rdinstrh \is_beq_bne_blt_bge_bltu_bgeu \is_sll_srl_sra \is_sb_sh_sw \is_slli_srli_srai \decoder_trigger \instr_trap \instr_jal \mem_done \resetn }
  ctrl outputs: { $procmux$1225_CMP $procmux$1226_CMP $procmux$1228_CMP $procmux$1229_CMP $procmux$1231_CMP $procmux$1146_CMP $procmux$1056_CMP $0\cpu_state[7:0] $eq$inputs/picorv32.v:1076$473_Y }
  transition: 8'10000000 20'-0--0--------------0 -> 8'01000000 16'0000100010000000
  transition: 8'10000000 20'-0--0--------------1 -> 8'10000000 16'0000100100000000
  transition: 8'10000000 20'-0001--------------0 -> 8'01000000 16'0000100010000000
  transition: 8'10000000 20'-0001--------------1 -> 8'10000000 16'0000100100000000
  transition: 8'10000000 20'-0011--------------- -> 8'10000000 16'0000100100000000
  transition: 8'10000000 20'-01-1--------------- -> 8'10000000 16'0000100100000000
  transition: 8'10000000 20'-1------------------ -> 8'10000000 16'0000100100000000
  transition: 8'01000000 20'-0--0--------------0 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 20'-0--0----------0---1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 20'-0--0----------1-0-1 -> 8'00100000 16'0000000001000001
  transition: 8'01000000 20'-0--0----------1-1-1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 20'-0001--------------0 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 20'-0001----------0---1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 20'-0001----------1-0-1 -> 8'00100000 16'0000000001000001
  transition: 8'01000000 20'-0001----------1-1-1 -> 8'01000000 16'0000000010000001
  transition: 8'01000000 20'-0011--------------- -> 8'10000000 16'0000000100000001
  transition: 8'01000000 20'-01-1--------------- -> 8'10000000 16'0000000100000001
  transition: 8'01000000 20'-1------------------ -> 8'10000000 16'0000000100000001
  transition: 8'00100000 20'-0--0--------------0 -> 8'01000000 16'0001000010000000
  transition: 8'00100000 20'00--0---0-0-000-0--1 -> 8'00001000 16'0001000000010000
  transition: 8'00100000 20'00--0---0-0--10-0--1 -> 8'00000010 16'0001000000000100
  transition: 8'00100000 20'00--0---0-0-1-0-0--1 -> 8'00000100 16'0001000000001000
  transition: 8'00100000 20'-0--0-----------1--1 -> 8'10000000 16'0001000100000000
  transition: 8'00100000 20'-0--0-----1--------1 -> 8'01000000 16'0001000010000000
  transition: 8'00100000 20'-0--0---1----------1 -> 8'00000001 16'0001000000000010
  transition: 8'00100000 20'-0--0---------1----1 -> 8'00000100 16'0001000000001000
  transition: 8'00100000 20'10--0--------------1 -> 8'00001000 16'0001000000010000
  transition: 8'00100000 20'-0001--------------0 -> 8'01000000 16'0001000010000000
  transition: 8'00100000 20'00001---0-0-000-0--1 -> 8'00001000 16'0001000000010000
  transition: 8'00100000 20'00001---0-0--10-0--1 -> 8'00000010 16'0001000000000100
  transition: 8'00100000 20'00001---0-0-1-0-0--1 -> 8'00000100 16'0001000000001000
  transition: 8'00100000 20'-0001-----------1--1 -> 8'10000000 16'0001000100000000
  transition: 8'00100000 20'-0001-----1--------1 -> 8'01000000 16'0001000010000000
  transition: 8'00100000 20'-0001---1----------1 -> 8'00000001 16'0001000000000010
  transition: 8'00100000 20'-0001---------1----1 -> 8'00000100 16'0001000000001000
  transition: 8'00100000 20'10001--------------1 -> 8'00001000 16'0001000000010000
  transition: 8'00100000 20'-0011--------------- -> 8'10000000 16'0001000100000000
  transition: 8'00100000 20'-01-1--------------- -> 8'10000000 16'0001000100000000
  transition: 8'00100000 20'-1------------------ -> 8'10000000 16'0001000100000000
  transition: 8'00001000 20'-0--0--------------0 -> 8'01000000 16'0000010010000000
  transition: 8'00001000 20'-0--0------0-------1 -> 8'01000000 16'0000010010000000
  transition: 8'00001000 20'-0--0------1------01 -> 8'00001000 16'0000010000010000
  transition: 8'00001000 20'-0--0------1------11 -> 8'01000000 16'0000010010000000
  transition: 8'00001000 20'-0001--------------0 -> 8'01000000 16'0000010010000000
  transition: 8'00001000 20'-0001------0-------1 -> 8'01000000 16'0000010010000000
  transition: 8'00001000 20'-0001------1------01 -> 8'00001000 16'0000010000010000
  transition: 8'00001000 20'-0001------1------11 -> 8'01000000 16'0000010010000000
  transition: 8'00001000 20'-0011--------------- -> 8'10000000 16'0000010100000000
  transition: 8'00001000 20'-01-1--------------- -> 8'10000000 16'0000010100000000
  transition: 8'00001000 20'-1------------------ -> 8'10000000 16'0000010100000000
  transition: 8'00000100 20'-0--0--------------0 -> 8'01000000 16'0100000010000000
  transition: 8'00000100 20'-0--0--0-----------1 -> 8'00000100 16'0100000000001000
  transition: 8'00000100 20'-0--0--1-----------1 -> 8'01000000 16'0100000010000000
  transition: 8'00000100 20'-0001--------------0 -> 8'01000000 16'0100000010000000
  transition: 8'00000100 20'-0001--0-----------1 -> 8'00000100 16'0100000000001000
  transition: 8'00000100 20'-0001--1-----------1 -> 8'01000000 16'0100000010000000
  transition: 8'00000100 20'-0011--------------- -> 8'10000000 16'0100000100000000
  transition: 8'00000100 20'-01-1--------------- -> 8'10000000 16'0100000100000000
  transition: 8'00000100 20'-1------------------ -> 8'10000000 16'0100000100000000
  transition: 8'00000010 20'-0--0--------------0 -> 8'01000000 16'1000000010000000
  transition: 8'00000010 20'-0--0-0------------1 -> 8'00000010 16'1000000000000100
  transition: 8'00000010 20'-0--001------------1 -> 8'00000010 16'1000000000000100
  transition: 8'00000010 20'-0--011------------1 -> 8'01000000 16'1000000010000000
  transition: 8'00000010 20'-0001--------------0 -> 8'01000000 16'1000000010000000
  transition: 8'00000010 20'-0001-0------------1 -> 8'00000010 16'1000000000000100
  transition: 8'00000010 20'-000101------------1 -> 8'00000010 16'1000000000000100
  transition: 8'00000010 20'-000111------------1 -> 8'01000000 16'1000000010000000
  transition: 8'00000010 20'-0011--------------- -> 8'10000000 16'1000000100000000
  transition: 8'00000010 20'-01-1--------------- -> 8'10000000 16'1000000100000000
  transition: 8'00000010 20'-1------------------ -> 8'10000000 16'1000000100000000
  transition: 8'00000001 20'-0--0--------------0 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 20'-0--0-0------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 20'-0--001------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 20'-0--011------------1 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 20'-0001--------------0 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 20'-0001-0------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 20'-000101------------1 -> 8'00000001 16'0000001000000010
  transition: 8'00000001 20'-000111------------1 -> 8'01000000 16'0000001010000000
  transition: 8'00000001 20'-0011--------------- -> 8'10000000 16'0000001100000000
  transition: 8'00000001 20'-01-1--------------- -> 8'10000000 16'0000001100000000
  transition: 8'00000001 20'-1------------------ -> 8'10000000 16'0000001100000000
Extracting FSM `\mem_wordsize' from module `\picorv32'.
  found $dff cell for state register: $procdff$3600
  root of input selection tree: $0\mem_wordsize[1:0]
  found ctrl input: \resetn
  found ctrl input: $procmux$1056_CMP
  found ctrl input: $procmux$1225_CMP
  found ctrl input: $eq$inputs/picorv32.v:1076$473_Y
  found ctrl input: $logic_or$inputs/picorv32.v:1544$632_Y
  found ctrl input: \mem_do_rdata
  found ctrl input: \instr_lw
  found ctrl input: $logic_or$inputs/picorv32.v:1573$641_Y
  found ctrl input: $logic_or$inputs/picorv32.v:1572$640_Y
  found state code: 2'00
  found state code: 2'01
  found state code: 2'10
  found ctrl input: \mem_do_wdata
  found ctrl input: \instr_sw
  found ctrl input: \instr_sh
  found ctrl input: \instr_sb
  found ctrl output: $eq$inputs/picorv32.v:1607$648_Y
  found ctrl output: $eq$inputs/picorv32.v:1614$655_Y
  found ctrl output: $procmux$3542_CMP
  ctrl inputs: { $procmux$1225_CMP $procmux$1056_CMP $logic_or$inputs/picorv32.v:1573$641_Y $logic_or$inputs/picorv32.v:1572$640_Y $logic_or$inputs/picorv32.v:1544$632_Y $eq$inputs/picorv32.v:1076$473_Y \instr_sw \instr_sh \instr_sb \instr_lw \mem_do_wdata \mem_do_rdata \resetn }
  ctrl outputs: { $procmux$3542_CMP $eq$inputs/picorv32.v:1614$655_Y $eq$inputs/picorv32.v:1607$648_Y $0\mem_wordsize[1:0] }
  transition:       2'00 13'------------0 ->       2'00 5'00100
  transition:       2'00 13'00---0------1 ->       2'00 5'00100
  transition:       2'00 13'-----1------1 ->       2'00 5'00100
  transition:       2'00 13'1---0-------1 ->       2'00 5'00100
  transition:       2'00 13'1---1-000-0-1 ->       2'00 5'00100
  transition:       2'00 13'1---1---1-0-1 ->       2'10 5'00110
  transition:       2'00 13'1---1--1--0-1 ->       2'01 5'00101
  transition:       2'00 13'1---1-1---0-1 ->       2'00 5'00100
  transition:       2'00 13'1---1-----1-1 ->       2'00 5'00100
  transition:       2'00 13'-1--0-------1 ->       2'00 5'00100
  transition:       2'00 13'-1001----0-01 ->       2'00 5'00100
  transition:       2'00 13'-1-11------01 ->       2'10 5'00110
  transition:       2'00 13'-11-1------01 ->       2'01 5'00101
  transition:       2'00 13'-1--1----1-01 ->       2'00 5'00100
  transition:       2'00 13'-1--1------11 ->       2'00 5'00100
  transition:       2'10 13'------------0 ->       2'10 5'10010
  transition:       2'10 13'00---0------1 ->       2'10 5'10010
  transition:       2'10 13'-----1------1 ->       2'00 5'10000
  transition:       2'10 13'1---0-------1 ->       2'10 5'10010
  transition:       2'10 13'1---1-000-0-1 ->       2'10 5'10010
  transition:       2'10 13'1---1---1-0-1 ->       2'10 5'10010
  transition:       2'10 13'1---1--1--0-1 ->       2'01 5'10001
  transition:       2'10 13'1---1-1---0-1 ->       2'00 5'10000
  transition:       2'10 13'1---1-----1-1 ->       2'10 5'10010
  transition:       2'10 13'-1--0-------1 ->       2'10 5'10010
  transition:       2'10 13'-1001----0-01 ->       2'10 5'10010
  transition:       2'10 13'-1-11------01 ->       2'10 5'10010
  transition:       2'10 13'-11-1------01 ->       2'01 5'10001
  transition:       2'10 13'-1--1----1-01 ->       2'00 5'10000
  transition:       2'10 13'-1--1------11 ->       2'10 5'10010
  transition:       2'01 13'------------0 ->       2'01 5'01001
  transition:       2'01 13'00---0------1 ->       2'01 5'01001
  transition:       2'01 13'-----1------1 ->       2'00 5'01000
  transition:       2'01 13'1---0-------1 ->       2'01 5'01001
  transition:       2'01 13'1---1-000-0-1 ->       2'01 5'01001
  transition:       2'01 13'1---1---1-0-1 ->       2'10 5'01010
  transition:       2'01 13'1---1--1--0-1 ->       2'01 5'01001
  transition:       2'01 13'1---1-1---0-1 ->       2'00 5'01000
  transition:       2'01 13'1---1-----1-1 ->       2'01 5'01001
  transition:       2'01 13'-1--0-------1 ->       2'01 5'01001
  transition:       2'01 13'-1001----0-01 ->       2'01 5'01001
  transition:       2'01 13'-1-11------01 ->       2'10 5'01010
  transition:       2'01 13'-11-1------01 ->       2'01 5'01001
  transition:       2'01 13'-1--1----1-01 ->       2'00 5'01000
  transition:       2'01 13'-1--1------11 ->       2'01 5'01001

yosys> fsm_opt

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\mem_wordsize$3780' from module `\picorv32'.
Optimizing FSM `$fsm$\cpu_state$3770' from module `\picorv32'.
  Removing unused input signal $auto$opt_reduce.cc:137:opt_pmux$3763.

yosys> opt_clean

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 36 unused cells and 36 unused wires.
<suppressed ~37 debug messages>

yosys> fsm_opt

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\cpu_state$3770' from module `\picorv32'.
  Removing unused output signal $0\cpu_state[7:0] [0].
  Removing unused output signal $0\cpu_state[7:0] [1].
  Removing unused output signal $0\cpu_state[7:0] [2].
  Removing unused output signal $0\cpu_state[7:0] [3].
  Removing unused output signal $0\cpu_state[7:0] [4].
  Removing unused output signal $0\cpu_state[7:0] [5].
  Removing unused output signal $0\cpu_state[7:0] [6].
  Removing unused output signal $0\cpu_state[7:0] [7].
Optimizing FSM `$fsm$\mem_wordsize$3780' from module `\picorv32'.
  Removing unused output signal $0\mem_wordsize[1:0] [0].
  Removing unused output signal $0\mem_wordsize[1:0] [1].

yosys> fsm_recode

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\cpu_state$3770' from module `\picorv32' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  10000000 -> ------1
  01000000 -> -----1-
  00100000 -> ----1--
  00001000 -> ---1---
  00000100 -> --1----
  00000010 -> -1-----
  00000001 -> 1------
Recoding FSM `$fsm$\mem_wordsize$3780' from module `\picorv32' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00 -> --1
  10 -> -1-
  01 -> 1--

yosys> fsm_info

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\cpu_state$3770' from module `picorv32':
-------------------------------------

  Information on FSM $fsm$\cpu_state$3770 (\cpu_state):

  Number of input signals:   19
  Number of output signals:   8
  Number of state bits:       7

  Input signals:
    0: \resetn
    1: \mem_done
    2: \instr_jal
    3: \instr_trap
    4: \decoder_trigger
    5: \is_slli_srli_srai
    6: \is_sb_sh_sw
    7: \is_sll_srl_sra
    8: \is_beq_bne_blt_bge_bltu_bgeu
    9: \is_rdcycle_rdcycleh_rdinstr_rdinstrh
   10: $logic_and$inputs/picorv32.v:1388$586_Y
   11: $eq$inputs/picorv32.v:1519$614_Y
   12: $logic_or$inputs/picorv32.v:1544$632_Y
   13: $logic_and$inputs/picorv32.v:1559$636_Y
   14: $logic_and$inputs/picorv32.v:1606$647_Y
   15: $logic_and$inputs/picorv32.v:1607$650_Y
   16: $logic_and$inputs/picorv32.v:1614$657_Y
   17: $logic_and$inputs/picorv32.v:1622$665_Y
   18: $auto$opt_reduce.cc:137:opt_pmux$3749

  Output signals:
    0: $eq$inputs/picorv32.v:1076$473_Y
    1: $procmux$1056_CMP
    2: $procmux$1146_CMP
    3: $procmux$1231_CMP
    4: $procmux$1229_CMP
    5: $procmux$1228_CMP
    6: $procmux$1226_CMP
    7: $procmux$1225_CMP

  State encoding:
    0:  7'------1  <RESET STATE>
    1:  7'-----1-
    2:  7'----1--
    3:  7'---1---
    4:  7'--1----
    5:  7'-1-----
    6:  7'1------

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 19'-0--0-------------1   ->     0 8'00001000
      1:     0 19'-0001-------------1   ->     0 8'00001000
      2:     0 19'-0011--------------   ->     0 8'00001000
      3:     0 19'-01-1--------------   ->     0 8'00001000
      4:     0 19'-1-----------------   ->     0 8'00001000
      5:     0 19'-0--0-------------0   ->     1 8'00001000
      6:     0 19'-0001-------------0   ->     1 8'00001000
      7:     1 19'-0011--------------   ->     0 8'00000001
      8:     1 19'-01-1--------------   ->     0 8'00000001
      9:     1 19'-1-----------------   ->     0 8'00000001
     10:     1 19'-0--0-------------0   ->     1 8'00000001
     11:     1 19'-0001-------------0   ->     1 8'00000001
     12:     1 19'-0--0---------1-1-1   ->     1 8'00000001
     13:     1 19'-0001---------1-1-1   ->     1 8'00000001
     14:     1 19'-0--0---------0---1   ->     1 8'00000001
     15:     1 19'-0001---------0---1   ->     1 8'00000001
     16:     1 19'-0--0---------1-0-1   ->     2 8'00000001
     17:     1 19'-0001---------1-0-1   ->     2 8'00000001
     18:     2 19'-0--0----------1--1   ->     0 8'00010000
     19:     2 19'-0001----------1--1   ->     0 8'00010000
     20:     2 19'-0011--------------   ->     0 8'00010000
     21:     2 19'-01-1--------------   ->     0 8'00010000
     22:     2 19'-1-----------------   ->     0 8'00010000
     23:     2 19'-0--0-------------0   ->     1 8'00010000
     24:     2 19'-0001-------------0   ->     1 8'00010000
     25:     2 19'-0--0----1--------1   ->     1 8'00010000
     26:     2 19'-0001----1--------1   ->     1 8'00010000
     27:     2 19'00--0---00-000-0--1   ->     3 8'00010000
     28:     2 19'00001---00-000-0--1   ->     3 8'00010000
     29:     2 19'10--0-------------1   ->     3 8'00010000
     30:     2 19'10001-------------1   ->     3 8'00010000
     31:     2 19'00--0---00-1-0-0--1   ->     4 8'00010000
     32:     2 19'00001---00-1-0-0--1   ->     4 8'00010000
     33:     2 19'-0--0--------1----1   ->     4 8'00010000
     34:     2 19'-0001--------1----1   ->     4 8'00010000
     35:     2 19'00--0---00--10-0--1   ->     5 8'00010000
     36:     2 19'00001---00--10-0--1   ->     5 8'00010000
     37:     2 19'-0--0---1---------1   ->     6 8'00010000
     38:     2 19'-0001---1---------1   ->     6 8'00010000
     39:     3 19'-0011--------------   ->     0 8'00000100
     40:     3 19'-01-1--------------   ->     0 8'00000100
     41:     3 19'-1-----------------   ->     0 8'00000100
     42:     3 19'-0--0-------------0   ->     1 8'00000100
     43:     3 19'-0001-------------0   ->     1 8'00000100
     44:     3 19'-0--0-----1------11   ->     1 8'00000100
     45:     3 19'-0001-----1------11   ->     1 8'00000100
     46:     3 19'-0--0-----0-------1   ->     1 8'00000100
     47:     3 19'-0001-----0-------1   ->     1 8'00000100
     48:     3 19'-0--0-----1------01   ->     3 8'00000100
     49:     3 19'-0001-----1------01   ->     3 8'00000100
     50:     4 19'-0011--------------   ->     0 8'01000000
     51:     4 19'-01-1--------------   ->     0 8'01000000
     52:     4 19'-1-----------------   ->     0 8'01000000
     53:     4 19'-0--0-------------0   ->     1 8'01000000
     54:     4 19'-0001-------------0   ->     1 8'01000000
     55:     4 19'-0--0--1----------1   ->     1 8'01000000
     56:     4 19'-0001--1----------1   ->     1 8'01000000
     57:     4 19'-0--0--0----------1   ->     4 8'01000000
     58:     4 19'-0001--0----------1   ->     4 8'01000000
     59:     5 19'-0011--------------   ->     0 8'10000000
     60:     5 19'-01-1--------------   ->     0 8'10000000
     61:     5 19'-1-----------------   ->     0 8'10000000
     62:     5 19'-0--0-------------0   ->     1 8'10000000
     63:     5 19'-0001-------------0   ->     1 8'10000000
     64:     5 19'-0--011-----------1   ->     1 8'10000000
     65:     5 19'-000111-----------1   ->     1 8'10000000
     66:     5 19'-0--0-0-----------1   ->     5 8'10000000
     67:     5 19'-0001-0-----------1   ->     5 8'10000000
     68:     5 19'-0--001-----------1   ->     5 8'10000000
     69:     5 19'-000101-----------1   ->     5 8'10000000
     70:     6 19'-0011--------------   ->     0 8'00000010
     71:     6 19'-01-1--------------   ->     0 8'00000010
     72:     6 19'-1-----------------   ->     0 8'00000010
     73:     6 19'-0--0-------------0   ->     1 8'00000010
     74:     6 19'-0001-------------0   ->     1 8'00000010
     75:     6 19'-0--011-----------1   ->     1 8'00000010
     76:     6 19'-000111-----------1   ->     1 8'00000010
     77:     6 19'-0--0-0-----------1   ->     6 8'00000010
     78:     6 19'-0001-0-----------1   ->     6 8'00000010
     79:     6 19'-0--001-----------1   ->     6 8'00000010
     80:     6 19'-000101-----------1   ->     6 8'00000010

-------------------------------------

FSM `$fsm$\mem_wordsize$3780' from module `picorv32':
-------------------------------------

  Information on FSM $fsm$\mem_wordsize$3780 (\mem_wordsize):

  Number of input signals:   13
  Number of output signals:   3
  Number of state bits:       3

  Input signals:
    0: \resetn
    1: \mem_do_rdata
    2: \mem_do_wdata
    3: \instr_lw
    4: \instr_sb
    5: \instr_sh
    6: \instr_sw
    7: $eq$inputs/picorv32.v:1076$473_Y
    8: $logic_or$inputs/picorv32.v:1544$632_Y
    9: $logic_or$inputs/picorv32.v:1572$640_Y
   10: $logic_or$inputs/picorv32.v:1573$641_Y
   11: $procmux$1056_CMP
   12: $procmux$1225_CMP

  Output signals:
    0: $eq$inputs/picorv32.v:1607$648_Y
    1: $eq$inputs/picorv32.v:1614$655_Y
    2: $procmux$3542_CMP

  State encoding:
    0:      3'--1
    1:      3'-1-
    2:      3'1--

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 13'------------0   ->     0 3'001
      1:     0 13'-1001----0-01   ->     0 3'001
      2:     0 13'-1--1----1-01   ->     0 3'001
      3:     0 13'-1--1------11   ->     0 3'001
      4:     0 13'1---1-000-0-1   ->     0 3'001
      5:     0 13'1---1-1---0-1   ->     0 3'001
      6:     0 13'1---1-----1-1   ->     0 3'001
      7:     0 13'00---0------1   ->     0 3'001
      8:     0 13'-----1------1   ->     0 3'001
      9:     0 13'-1--0-------1   ->     0 3'001
     10:     0 13'1---0-------1   ->     0 3'001
     11:     0 13'-1-11------01   ->     1 3'001
     12:     0 13'1---1---1-0-1   ->     1 3'001
     13:     0 13'-11-1------01   ->     2 3'001
     14:     0 13'1---1--1--0-1   ->     2 3'001
     15:     1 13'-1--1----1-01   ->     0 3'100
     16:     1 13'1---1-1---0-1   ->     0 3'100
     17:     1 13'-----1------1   ->     0 3'100
     18:     1 13'------------0   ->     1 3'100
     19:     1 13'-1001----0-01   ->     1 3'100
     20:     1 13'-1-11------01   ->     1 3'100
     21:     1 13'-1--1------11   ->     1 3'100
     22:     1 13'1---1-000-0-1   ->     1 3'100
     23:     1 13'1---1---1-0-1   ->     1 3'100
     24:     1 13'1---1-----1-1   ->     1 3'100
     25:     1 13'00---0------1   ->     1 3'100
     26:     1 13'-1--0-------1   ->     1 3'100
     27:     1 13'1---0-------1   ->     1 3'100
     28:     1 13'-11-1------01   ->     2 3'100
     29:     1 13'1---1--1--0-1   ->     2 3'100
     30:     2 13'-1--1----1-01   ->     0 3'010
     31:     2 13'1---1-1---0-1   ->     0 3'010
     32:     2 13'-----1------1   ->     0 3'010
     33:     2 13'-1-11------01   ->     1 3'010
     34:     2 13'1---1---1-0-1   ->     1 3'010
     35:     2 13'------------0   ->     2 3'010
     36:     2 13'-1001----0-01   ->     2 3'010
     37:     2 13'-11-1------01   ->     2 3'010
     38:     2 13'-1--1------11   ->     2 3'010
     39:     2 13'1---1-000-0-1   ->     2 3'010
     40:     2 13'1---1--1--0-1   ->     2 3'010
     41:     2 13'1---1-----1-1   ->     2 3'010
     42:     2 13'00---0------1   ->     2 3'010
     43:     2 13'-1--0-------1   ->     2 3'010
     44:     2 13'1---0-------1   ->     2 3'010

-------------------------------------

yosys> fsm_map

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\cpu_state$3770' from module `\picorv32'.
Mapping FSM `$fsm$\mem_wordsize$3780' from module `\picorv32'.

yosys> opt

5.9. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~5 debug messages>

yosys> opt_merge -nomux

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~66 debug messages>
Removed a total of 22 cells.

yosys> opt_muxtree

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/4 on $pmux $procmux$1522.
    dead port 2/5 on $pmux $procmux$1986.
    dead port 1/3 on $pmux $procmux$2192.
Removed 3 multiplexer ports.
<suppressed ~136 debug messages>

yosys> opt_reduce

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$3742: { \cpu_state [6:4] \cpu_state [2:0] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$3740: \cpu_state [5:0]
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$3738: { \cpu_state [6] \cpu_state [4:0] }
  Optimizing cells in module \picorv32.
Performed a total of 3 changes.

yosys> opt_merge

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$3734 ($dff) from module picorv32 (D = \mem_rdata, Q = \mem_rdata_q).
Adding EN signal on $procdff$3729 ($dff) from module picorv32 (D = $0\mem_state[1:0], Q = \mem_state).
Adding EN signal on $procdff$3728 ($dff) from module picorv32 (D = $procmux$3270_Y, Q = \mem_wstrb).
Adding EN signal on $procdff$3727 ($dff) from module picorv32 (D = \mem_la_wdata, Q = \mem_wdata).
Adding EN signal on $procdff$3726 ($dff) from module picorv32 (D = \mem_la_addr, Q = \mem_addr).
Adding EN signal on $procdff$3725 ($dff) from module picorv32 (D = $procmux$3290_Y, Q = \mem_instr).
Adding SRST signal on $auto$ff.cc:266:slice$4130 ($dffe) from module picorv32 (D = $procmux$3288_Y, Q = \mem_instr, rval = 1'0).
Adding EN signal on $procdff$3724 ($dff) from module picorv32 (D = $0\mem_valid[0:0], Q = \mem_valid).
Adding SRST signal on $procdff$3708 ($dff) from module picorv32 (D = $reduce_or$inputs/picorv32.v:682$175_Y, Q = \is_compare, rval = 1'0).
Adding EN signal on $procdff$3707 ($dff) from module picorv32 (D = $eq$inputs/picorv32.v:694$195_Y, Q = \is_alu_reg_reg).
Adding EN signal on $procdff$3706 ($dff) from module picorv32 (D = $eq$inputs/picorv32.v:693$194_Y, Q = \is_alu_reg_imm).
Adding SRST signal on $procdff$3704 ($dff) from module picorv32 (D = $procmux$2644_Y, Q = \is_beq_bne_blt_bge_bltu_bgeu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4156 ($sdff) from module picorv32 (D = $eq$inputs/picorv32.v:690$191_Y, Q = \is_beq_bne_blt_bge_bltu_bgeu).
Adding SRST signal on $procdff$3701 ($dff) from module picorv32 (D = $reduce_or$inputs/picorv32.v:678$171_Y, Q = \is_lui_auipc_jal_jalr_addi_add_sub, rval = 1'0).
Adding EN signal on $procdff$3700 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:906$427_Y, Q = \is_sll_srl_sra).
Adding EN signal on $procdff$3699 ($dff) from module picorv32 (D = $eq$inputs/picorv32.v:692$193_Y, Q = \is_sb_sh_sw).
Adding EN signal on $procdff$3698 ($dff) from module picorv32 (D = $logic_or$inputs/picorv32.v:898$416_Y, Q = \is_jalr_addi_slti_sltiu_xori_ori_andi).
Adding EN signal on $procdff$3697 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:893$407_Y, Q = \is_slli_srli_srai).
Adding EN signal on $procdff$3696 ($dff) from module picorv32 (D = $eq$inputs/picorv32.v:691$192_Y, Q = \is_lb_lh_lw_lbu_lhu).
Adding EN signal on $procdff$3694 ($dff) from module picorv32 (D = 1'0, Q = \compressed_instr).
Adding EN signal on $procdff$3693 ($dff) from module picorv32 (D = { \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [31] \mem_rdata_latched [19:12] \mem_rdata_latched [20] \mem_rdata_latched [30:21] 1'0 }, Q = \decoded_imm_j).
Adding EN signal on $procdff$3692 ($dff) from module picorv32 (D = $procmux$2690_Y, Q = \decoded_imm).
Adding EN signal on $procdff$3691 ($dff) from module picorv32 (D = \mem_rdata_latched [24:20], Q = \decoded_rs2).
Adding EN signal on $procdff$3690 ($dff) from module picorv32 (D = \mem_rdata_latched [19:15], Q = \decoded_rs1).
Adding EN signal on $procdff$3689 ($dff) from module picorv32 (D = \mem_rdata_latched [11:7], Q = \decoded_rd).
Adding EN signal on $procdff$3688 ($dff) from module picorv32 (D = 1'0, Q = \instr_timer).
Adding EN signal on $procdff$3687 ($dff) from module picorv32 (D = 1'0, Q = \instr_waitirq).
Adding EN signal on $procdff$3686 ($dff) from module picorv32 (D = 1'0, Q = \instr_maskirq).
Adding EN signal on $procdff$3685 ($dff) from module picorv32 (D = 1'0, Q = \instr_retirq).
Adding EN signal on $procdff$3684 ($dff) from module picorv32 (D = 1'0, Q = \instr_setq).
Adding EN signal on $procdff$3683 ($dff) from module picorv32 (D = 1'0, Q = \instr_getq).
Adding SRST signal on $procdff$3682 ($dff) from module picorv32 (D = $procmux$2790_Y, Q = \instr_fence, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4176 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:888$377_Y, Q = \instr_fence).
Adding EN signal on $procdff$3680 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:885$364_Y, Q = \instr_rdinstrh).
Adding EN signal on $procdff$3679 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:884$360_Y, Q = \instr_rdinstr).
Adding EN signal on $procdff$3678 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:882$356_Y, Q = \instr_rdcycleh).
Adding EN signal on $procdff$3677 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:880$348_Y, Q = \instr_rdcycle).
Adding SRST signal on $procdff$3676 ($dff) from module picorv32 (D = $procmux$2804_Y, Q = \instr_and, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4182 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:879$340_Y, Q = \instr_and).
Adding SRST signal on $procdff$3675 ($dff) from module picorv32 (D = $procmux$2808_Y, Q = \instr_or, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4184 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:878$336_Y, Q = \instr_or).
Adding SRST signal on $procdff$3674 ($dff) from module picorv32 (D = $procmux$2812_Y, Q = \instr_sra, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4186 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:877$332_Y, Q = \instr_sra).
Adding SRST signal on $procdff$3673 ($dff) from module picorv32 (D = $procmux$2816_Y, Q = \instr_srl, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4188 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:876$328_Y, Q = \instr_srl).
Adding SRST signal on $procdff$3672 ($dff) from module picorv32 (D = $procmux$2820_Y, Q = \instr_xor, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4190 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:875$324_Y, Q = \instr_xor).
Adding SRST signal on $procdff$3671 ($dff) from module picorv32 (D = $procmux$2824_Y, Q = \instr_sltu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4192 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:874$320_Y, Q = \instr_sltu).
Adding SRST signal on $procdff$3670 ($dff) from module picorv32 (D = $procmux$2828_Y, Q = \instr_slt, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4194 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:873$316_Y, Q = \instr_slt).
Adding SRST signal on $procdff$3669 ($dff) from module picorv32 (D = $procmux$2832_Y, Q = \instr_sll, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4196 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:872$312_Y, Q = \instr_sll).
Adding SRST signal on $procdff$3668 ($dff) from module picorv32 (D = $procmux$2836_Y, Q = \instr_sub, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4198 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:871$308_Y, Q = \instr_sub).
Adding SRST signal on $procdff$3667 ($dff) from module picorv32 (D = $procmux$2840_Y, Q = \instr_add, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4200 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:870$304_Y, Q = \instr_add).
Adding EN signal on $procdff$3666 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:869$300_Y, Q = \instr_srai).
Adding EN signal on $procdff$3665 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:868$296_Y, Q = \instr_srli).
Adding EN signal on $procdff$3664 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:867$292_Y, Q = \instr_slli).
Adding SRST signal on $procdff$3663 ($dff) from module picorv32 (D = $procmux$2850_Y, Q = \instr_andi, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4205 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:866$288_Y, Q = \instr_andi).
Adding SRST signal on $procdff$3662 ($dff) from module picorv32 (D = $procmux$2854_Y, Q = \instr_ori, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4207 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:865$286_Y, Q = \instr_ori).
Adding SRST signal on $procdff$3661 ($dff) from module picorv32 (D = $procmux$2858_Y, Q = \instr_xori, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4209 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:864$284_Y, Q = \instr_xori).
Adding SRST signal on $procdff$3660 ($dff) from module picorv32 (D = $procmux$2862_Y, Q = \instr_sltiu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4211 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:863$282_Y, Q = \instr_sltiu).
Adding SRST signal on $procdff$3659 ($dff) from module picorv32 (D = $procmux$2866_Y, Q = \instr_slti, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4213 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:862$280_Y, Q = \instr_slti).
Adding SRST signal on $procdff$3658 ($dff) from module picorv32 (D = $procmux$2870_Y, Q = \instr_addi, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4215 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:861$278_Y, Q = \instr_addi).
Adding EN signal on $procdff$3657 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:860$276_Y, Q = \instr_sw).
Adding EN signal on $procdff$3656 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:859$274_Y, Q = \instr_sh).
Adding EN signal on $procdff$3655 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:858$272_Y, Q = \instr_sb).
Adding EN signal on $procdff$3654 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:857$270_Y, Q = \instr_lhu).
Adding EN signal on $procdff$3653 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:856$268_Y, Q = \instr_lbu).
Adding EN signal on $procdff$3652 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:855$266_Y, Q = \instr_lw).
Adding EN signal on $procdff$3651 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:854$264_Y, Q = \instr_lh).
Adding EN signal on $procdff$3650 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:853$262_Y, Q = \instr_lb).
Adding SRST signal on $procdff$3649 ($dff) from module picorv32 (D = $procmux$2890_Y, Q = \instr_bgeu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4225 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:852$260_Y, Q = \instr_bgeu).
Adding SRST signal on $procdff$3648 ($dff) from module picorv32 (D = $procmux$2894_Y, Q = \instr_bltu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4227 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:851$258_Y, Q = \instr_bltu).
Adding SRST signal on $procdff$3647 ($dff) from module picorv32 (D = $procmux$2898_Y, Q = \instr_bge, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4229 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:850$256_Y, Q = \instr_bge).
Adding SRST signal on $procdff$3646 ($dff) from module picorv32 (D = $procmux$2902_Y, Q = \instr_blt, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4231 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:849$254_Y, Q = \instr_blt).
Adding SRST signal on $procdff$3645 ($dff) from module picorv32 (D = $procmux$2906_Y, Q = \instr_bne, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4233 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:848$252_Y, Q = \instr_bne).
Adding SRST signal on $procdff$3644 ($dff) from module picorv32 (D = $procmux$2910_Y, Q = \instr_beq, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4235 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:847$250_Y, Q = \instr_beq).
Adding EN signal on $procdff$3643 ($dff) from module picorv32 (D = $logic_and$inputs/picorv32.v:687$182_Y, Q = \instr_jalr).
Adding EN signal on $procdff$3642 ($dff) from module picorv32 (D = $eq$inputs/picorv32.v:686$179_Y, Q = \instr_jal).
Adding EN signal on $procdff$3641 ($dff) from module picorv32 (D = $eq$inputs/picorv32.v:685$178_Y, Q = \instr_auipc).
Adding EN signal on $procdff$3640 ($dff) from module picorv32 (D = $eq$inputs/picorv32.v:684$177_Y, Q = \instr_lui).
Adding EN signal on $procdff$3639 ($dff) from module picorv32 (D = 32'x, Q = \pcpi_insn).
Adding EN signal on $procdff$3626 ($dff) from module picorv32 (D = $procmux$1568_Y, Q = \latched_rd).
Adding SRST signal on $procdff$3625 ($dff) from module picorv32 (D = $procmux$1594_Y, Q = \latched_is_lb, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4249 ($sdff) from module picorv32 (D = $procmux$1594_Y, Q = \latched_is_lb).
Adding SRST signal on $procdff$3624 ($dff) from module picorv32 (D = $procmux$1607_Y, Q = \latched_is_lh, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4259 ($sdff) from module picorv32 (D = $procmux$1607_Y, Q = \latched_is_lh).
Adding SRST signal on $procdff$3623 ($dff) from module picorv32 (D = $procmux$1620_Y, Q = \latched_is_lu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4269 ($sdff) from module picorv32 (D = $procmux$1620_Y, Q = \latched_is_lu).
Adding EN signal on $procdff$3621 ($dff) from module picorv32 (D = \compressed_instr, Q = \latched_compr).
Adding SRST signal on $procdff$3620 ($dff) from module picorv32 (D = $procmux$1665_Y, Q = \latched_branch, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4282 ($sdff) from module picorv32 (D = $procmux$1665_Y, Q = \latched_branch).
Adding SRST signal on $procdff$3619 ($dff) from module picorv32 (D = $procmux$1701_Y, Q = \latched_stalu, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4286 ($sdff) from module picorv32 (D = $procmux$1701_Y, Q = \latched_stalu).
Adding SRST signal on $procdff$3618 ($dff) from module picorv32 (D = $procmux$1708_Y, Q = \latched_store, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4294 ($sdff) from module picorv32 (D = $procmux$1708_Y, Q = \latched_store).
Adding SRST signal on $procdff$3607 ($dff) from module picorv32 (D = $procmux$1332_Y, Q = \decoder_pseudo_trigger, rval = 1'0).
Adding SRST signal on $procdff$3604 ($dff) from module picorv32 (D = $procmux$1972_Y, Q = \mem_do_wdata, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$4305 ($sdff) from module picorv32 (D = 1'0, Q = \mem_do_wdata).
Adding SRST signal on $procdff$3603 ($dff) from module picorv32 (D = $procmux$1976_Y, Q = \mem_do_rdata, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$4307 ($sdff) from module picorv32 (D = 1'0, Q = \mem_do_rdata).
Adding SRST signal on $procdff$3602 ($dff) from module picorv32 (D = $procmux$2047_Y, Q = \mem_do_rinst, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$4309 ($sdff) from module picorv32 (D = $procmux$2047_Y, Q = \mem_do_rinst).
Adding SRST signal on $procdff$3601 ($dff) from module picorv32 (D = $procmux$2072_Y, Q = \mem_do_prefetch, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$4323 ($sdff) from module picorv32 (D = $logic_and$inputs/picorv32.v:1267$567_Y, Q = \mem_do_prefetch).
Adding EN signal on $procdff$3592 ($dff) from module picorv32 (D = $procmux$2195_Y, Q = \reg_op2).
Adding EN signal on $procdff$3591 ($dff) from module picorv32 (D = $procmux$2218_Y [31], Q = \reg_op1 [31]).
Adding EN signal on $procdff$3591 ($dff) from module picorv32 (D = $procmux$2218_Y [30:0], Q = \reg_op1 [30:0]).
Adding SRST signal on $procdff$3590 ($dff) from module picorv32 (D = $procmux$2282_Y, Q = \reg_next_pc, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$4374 ($sdff) from module picorv32 (D = $procmux$2271_Y, Q = \reg_next_pc).
Adding SRST signal on $procdff$3589 ($dff) from module picorv32 (D = $procmux$2294_Y, Q = \reg_pc, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$4376 ($sdff) from module picorv32 (D = $3\current_pc[31:0], Q = \reg_pc).
Adding SRST signal on $procdff$3588 ($dff) from module picorv32 (D = $procmux$2314_Y, Q = \count_instr, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$4378 ($sdff) from module picorv32 (D = $add$inputs/picorv32.v:1258$563_Y, Q = \count_instr).
Adding SRST signal on $procdff$3587 ($dff) from module picorv32 (D = $add$inputs/picorv32.v:1140$510_Y, Q = \count_cycle, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $procdff$3584 ($dff) from module picorv32 (D = 0, Q = \eoi).
Adding EN signal on $procdff$3583 ($dff) from module picorv32 (D = 1'0, Q = \pcpi_valid).
Adding SRST signal on $procdff$3582 ($dff) from module picorv32 (D = $procmux$1550_Y, Q = \trap, rval = 1'0).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4384 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 8 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 9 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 10 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 11 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 12 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 13 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 14 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 15 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 16 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 17 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 18 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 19 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 20 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 21 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 22 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 23 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 24 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 25 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 26 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 27 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 28 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 29 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 30 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 0-bit at position 31 on $auto$ff.cc:266:slice$4383 ($dffe) from module picorv32.
Setting constant 1-bit at position 0 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 1 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 2 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 3 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 4 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 5 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 6 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 7 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 8 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 9 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 10 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 11 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 12 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 13 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 14 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 15 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 16 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 17 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 18 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 19 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 20 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 21 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 22 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 23 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 24 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 25 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 26 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 27 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 28 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 29 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 30 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 1-bit at position 31 on $auto$ff.cc:266:slice$4241 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4175 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4174 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4173 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4172 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4171 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4170 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4165 ($dffe) from module picorv32.
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4164 ($dffe) from module picorv32.

yosys> opt_clean

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 153 unused cells and 175 unused wires.
<suppressed ~154 debug messages>

yosys> opt_expr

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~16 debug messages>

5.9.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

5.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~40 debug messages>

yosys> opt_reduce

5.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

yosys> opt_merge

5.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~72 debug messages>
Removed a total of 24 cells.

yosys> opt_dff

5.9.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4279 ($dffe) from module picorv32.

yosys> opt_clean

5.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 1 unused cells and 28 unused wires.
<suppressed ~2 debug messages>

yosys> opt_expr

5.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~1 debug messages>

5.9.16. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

5.9.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

yosys> opt_reduce

5.9.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

yosys> opt_merge

5.9.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff

5.9.20. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

5.9.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

5.9.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

5.9.23. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

5.9.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

yosys> opt_reduce

5.9.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

yosys> opt_merge

5.9.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff

5.9.27. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

5.9.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

yosys> opt_expr

5.9.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

5.9.30. Finished OPT passes. (There is nothing left to do.)

yosys> wreduce

5.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 4) from port A of cell picorv32.$shl$inputs/picorv32.v:291$99 ($shl).
Removed top 30 bits (of 32) from mux cell picorv32.$ternary$inputs/picorv32.v:481$158 ($mux).
Removed top 1 bits (of 7) from port B of cell picorv32.$eq$inputs/picorv32.v:684$177 ($eq).
Removed top 2 bits (of 7) from port B of cell picorv32.$eq$inputs/picorv32.v:685$178 ($eq).
Removed top 5 bits (of 7) from port B of cell picorv32.$eq$inputs/picorv32.v:691$192 ($eq).
Removed top 1 bits (of 7) from port B of cell picorv32.$eq$inputs/picorv32.v:692$193 ($eq).
Removed top 2 bits (of 7) from port B of cell picorv32.$eq$inputs/picorv32.v:693$194 ($eq).
Removed top 1 bits (of 7) from port B of cell picorv32.$eq$inputs/picorv32.v:694$195 ($eq).
Removed top 2 bits (of 3) from port B of cell picorv32.$eq$inputs/picorv32.v:848$251 ($eq).
Removed top 1 bits (of 3) from port B of cell picorv32.$eq$inputs/picorv32.v:855$265 ($eq).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3861 ($eq).
Removed top 2 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3865 ($eq).
Removed top 1 bits (of 3) from port B of cell picorv32.$eq$inputs/picorv32.v:863$281 ($eq).
Removed top 3 bits (of 7) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3871 ($eq).
Removed top 1 bits (of 7) from port B of cell picorv32.$eq$inputs/picorv32.v:869$299 ($eq).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3924 ($eq).
Removed top 2 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3878 ($eq).
Removed top 3 bits (of 7) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3882 ($eq).
Removed top 2 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3887 ($eq).
Removed top 3 bits (of 7) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3891 ($eq).
Removed top 9 bits (of 10) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3895 ($eq).
Removed top 4 bits (of 12) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3899 ($eq).
Removed top 5 bits (of 9) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3937 ($eq).
Removed top 1 bits (of 2) from port B of cell picorv32.$auto$opt_dff.cc:195:make_patterns_logic$4256 ($ne).
Removed top 3 bits (of 7) from port B of cell picorv32.$eq$inputs/picorv32.v:888$375 ($eq).
Removed top 5 bits (of 9) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3912 ($eq).
Removed top 4 bits (of 11) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3916 ($eq).
Removed top 3 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3928 ($eq).
Removed top 29 bits (of 32) from port B of cell picorv32.$add$inputs/picorv32.v:1080$475 ($add).
Removed top 31 bits (of 32) from port B of cell picorv32.$add$inputs/picorv32.v:1140$510 ($add).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3794 ($eq).
Removed top 29 bits (of 32) from port B of cell picorv32.$add$inputs/picorv32.v:1254$562 ($add).
Removed top 31 bits (of 32) from port B of cell picorv32.$add$inputs/picorv32.v:1258$563 ($add).
Removed top 2 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3920 ($eq).
Removed top 29 bits (of 32) from port B of cell picorv32.$ge$inputs/picorv32.v:1523$615 ($ge).
Removed top 29 bits (of 32) from port B of cell picorv32.$sub$inputs/picorv32.v:1530$623 ($sub).
Removed top 27 bits (of 32) from port Y of cell picorv32.$sub$inputs/picorv32.v:1530$623 ($sub).
Removed top 4 bits (of 11) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3941 ($eq).
Removed top 31 bits (of 32) from port B of cell picorv32.$sub$inputs/picorv32.v:1538$630 ($sub).
Removed top 27 bits (of 32) from port Y of cell picorv32.$sub$inputs/picorv32.v:1538$630 ($sub).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3932 ($eq).
Removed top 2 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3857 ($eq).
Removed top 2 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3790 ($eq).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3853 ($eq).
Removed top 3 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$4091 ($eq).
Removed top 4 bits (of 7) from port B of cell picorv32.$auto$opt_dff.cc:195:make_patterns_logic$4314 ($ne).
Removed top 4 bits (of 5) from port B of cell picorv32.$auto$opt_dff.cc:195:make_patterns_logic$4316 ($ne).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3966 ($eq).
Removed top 2 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3962 ($eq).
Removed top 2 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3849 ($eq).
Removed top 3 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3978 ($eq).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3974 ($eq).
Removed top 3 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3970 ($eq).
Removed top 3 bits (of 7) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3982 ($eq).
Removed top 2 bits (of 4) from port B of cell picorv32.$auto$opt_dff.cc:195:make_patterns_logic$4110 ($ne).
Removed top 2 bits (of 3) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3798 ($eq).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3845 ($eq).
Removed top 3 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3802 ($eq).
Removed top 3 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3841 ($eq).
Removed top 2 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3806 ($eq).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3837 ($eq).
Removed top 1 bits (of 3) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3808 ($eq).
Removed top 3 bits (of 4) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3833 ($eq).
Removed top 3 bits (of 7) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3829 ($eq).
Removed top 1 bits (of 2) from port B of cell picorv32.$auto$opt_dff.cc:195:make_patterns_logic$4350 ($ne).
Removed top 3 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3815 ($eq).
Removed top 2 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3817 ($eq).
Removed top 2 bits (of 5) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3825 ($eq).
Removed top 3 bits (of 6) from port B of cell picorv32.$auto$opt_dff.cc:195:make_patterns_logic$4344 ($ne).
Removed top 5 bits (of 6) from port B of cell picorv32.$auto$opt_dff.cc:195:make_patterns_logic$4340 ($ne).
Removed top 1 bits (of 2) from port B of cell picorv32.$procmux$3252_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell picorv32.$procmux$3539_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell picorv32.$auto$opt_dff.cc:195:make_patterns_logic$4320 ($ne).
Removed top 1 bits (of 2) from port B of cell picorv32.$auto$opt_dff.cc:195:make_patterns_logic$4146 ($ne).
Removed top 3 bits (of 7) from port B of cell picorv32.$auto$fsm_map.cc:77:implement_pattern_cache$3821 ($eq).
Removed top 11 bits (of 31) from FF cell picorv32.$auto$ff.cc:266:slice$4386 ($dffe).
Removed top 27 bits (of 32) from wire picorv32.$sub$inputs/picorv32.v:1530$623_Y.
Removed top 27 bits (of 32) from wire picorv32.$sub$inputs/picorv32.v:1538$630_Y.

yosys> peepopt

5.11. Executing PEEPOPT pass (run peephole optimizers).

yosys> opt_clean

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

yosys> alumacc

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module picorv32:
  creating $macc model for $add$inputs/picorv32.v:1015$679 ($add).
  creating $macc model for $add$inputs/picorv32.v:1080$475 ($add).
  creating $macc model for $add$inputs/picorv32.v:1140$510 ($add).
  creating $macc model for $add$inputs/picorv32.v:1254$562 ($add).
  creating $macc model for $add$inputs/picorv32.v:1258$563 ($add).
  creating $macc model for $add$inputs/picorv32.v:1263$564 ($add).
  creating $macc model for $add$inputs/picorv32.v:1495$609 ($add).
  creating $macc model for $add$inputs/picorv32.v:1556$634 ($add).
  creating $macc model for $sub$inputs/picorv32.v:1015$678 ($sub).
  creating $macc model for $sub$inputs/picorv32.v:1530$623 ($sub).
  creating $macc model for $sub$inputs/picorv32.v:1538$630 ($sub).
  creating $alu model for $macc $sub$inputs/picorv32.v:1538$630.
  creating $alu model for $macc $sub$inputs/picorv32.v:1530$623.
  creating $alu model for $macc $sub$inputs/picorv32.v:1015$678.
  creating $alu model for $macc $add$inputs/picorv32.v:1556$634.
  creating $alu model for $macc $add$inputs/picorv32.v:1495$609.
  creating $alu model for $macc $add$inputs/picorv32.v:1263$564.
  creating $alu model for $macc $add$inputs/picorv32.v:1258$563.
  creating $alu model for $macc $add$inputs/picorv32.v:1254$562.
  creating $alu model for $macc $add$inputs/picorv32.v:1140$510.
  creating $alu model for $macc $add$inputs/picorv32.v:1080$475.
  creating $alu model for $macc $add$inputs/picorv32.v:1015$679.
  creating $alu model for $ge$inputs/picorv32.v:1523$615 ($ge): merged with $sub$inputs/picorv32.v:1530$623.
  creating $alu model for $lt$inputs/picorv32.v:1017$682 ($lt): new $alu
  creating $alu model for $lt$inputs/picorv32.v:1018$683 ($lt): merged with $sub$inputs/picorv32.v:1015$678.
  creating $alu model for $eq$inputs/picorv32.v:1016$681 ($eq): merged with $sub$inputs/picorv32.v:1015$678.
  creating $alu cell for $add$inputs/picorv32.v:1080$475: $auto$alumacc.cc:495:replace_alu$4390
  creating $alu cell for $add$inputs/picorv32.v:1140$510: $auto$alumacc.cc:495:replace_alu$4393
  creating $alu cell for $add$inputs/picorv32.v:1254$562: $auto$alumacc.cc:495:replace_alu$4396
  creating $alu cell for $add$inputs/picorv32.v:1258$563: $auto$alumacc.cc:495:replace_alu$4399
  creating $alu cell for $add$inputs/picorv32.v:1263$564: $auto$alumacc.cc:495:replace_alu$4402
  creating $alu cell for $add$inputs/picorv32.v:1495$609: $auto$alumacc.cc:495:replace_alu$4405
  creating $alu cell for $add$inputs/picorv32.v:1556$634: $auto$alumacc.cc:495:replace_alu$4408
  creating $alu cell for $lt$inputs/picorv32.v:1017$682: $auto$alumacc.cc:495:replace_alu$4411
  creating $alu cell for $add$inputs/picorv32.v:1015$679: $auto$alumacc.cc:495:replace_alu$4418
  creating $alu cell for $sub$inputs/picorv32.v:1015$678, $lt$inputs/picorv32.v:1018$683, $eq$inputs/picorv32.v:1016$681: $auto$alumacc.cc:495:replace_alu$4421
  creating $alu cell for $sub$inputs/picorv32.v:1530$623, $ge$inputs/picorv32.v:1523$615: $auto$alumacc.cc:495:replace_alu$4428
  creating $alu cell for $sub$inputs/picorv32.v:1538$630: $auto$alumacc.cc:495:replace_alu$4441
  created 12 $alu and 0 $macc cells.

yosys> share

5.14. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module picorv32 that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\cpuregs$inputs/picorv32.v:1106$497 ($memrd):
    Found 2 activation_patterns using ctrl signal { $auto$opt_reduce.cc:137:opt_pmux$3757 $auto$opt_reduce.cc:137:opt_pmux$3749 $auto$opt_reduce.cc:137:opt_pmux$3745 \cpu_state [2] $reduce_bool$inputs/picorv32.v:1106$498_Y \is_slli_srli_srai \resetn }.
    Found 1 candidates: $memrd$\cpuregs$inputs/picorv32.v:1105$494
    Analyzing resource sharing with $memrd$\cpuregs$inputs/picorv32.v:1105$494 ($memrd):
      Found 1 activation_patterns using ctrl signal { $auto$opt_reduce.cc:137:opt_pmux$3759 \cpu_state [2] $reduce_bool$inputs/picorv32.v:1105$495_Y \is_lui_auipc_jal }.
      Activation pattern for cell $memrd$\cpuregs$inputs/picorv32.v:1106$497: { $auto$opt_reduce.cc:137:opt_pmux$3757 $auto$opt_reduce.cc:137:opt_pmux$3749 $reduce_bool$inputs/picorv32.v:1106$498_Y } = 3'001
      Activation pattern for cell $memrd$\cpuregs$inputs/picorv32.v:1106$497: { $auto$opt_reduce.cc:137:opt_pmux$3745 \cpu_state [2] $reduce_bool$inputs/picorv32.v:1106$498_Y \is_slli_srli_srai \resetn } = 5'01101
      Activation pattern for cell $memrd$\cpuregs$inputs/picorv32.v:1105$494: { $auto$opt_reduce.cc:137:opt_pmux$3759 \cpu_state [2] $reduce_bool$inputs/picorv32.v:1105$495_Y \is_lui_auipc_jal } = 4'0110
      Size of SAT problem: 9 cells, 145 variables, 335 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $auto$opt_reduce.cc:137:opt_pmux$3757 $auto$opt_reduce.cc:137:opt_pmux$3759 $auto$opt_reduce.cc:137:opt_pmux$3749 $auto$opt_reduce.cc:137:opt_pmux$3745 \cpu_state [2] $reduce_bool$inputs/picorv32.v:1106$498_Y $reduce_bool$inputs/picorv32.v:1105$495_Y \is_slli_srli_srai \is_lui_auipc_jal \resetn } = 10'0000111000
  Analyzing resource sharing options for $memrd$\cpuregs$inputs/picorv32.v:1105$494 ($memrd):
    Found 1 activation_patterns using ctrl signal { $auto$opt_reduce.cc:137:opt_pmux$3759 \cpu_state [2] $reduce_bool$inputs/picorv32.v:1105$495_Y \is_lui_auipc_jal }.
    No candidates found.

yosys> opt

5.15. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~1 debug messages>

yosys> opt_merge -nomux

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_muxtree

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

yosys> opt_reduce

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

yosys> opt_merge

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

5.15.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

5.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

yosys> opt_reduce

5.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

yosys> opt_merge

5.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff

5.15.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

5.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

yosys> opt_expr

5.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

5.15.16. Finished OPT passes. (There is nothing left to do.)

yosys> memory -nomap

5.16. Executing MEMORY pass.

yosys> opt_mem

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

yosys> opt_mem_priority

5.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

yosys> opt_mem_feedback

5.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing picorv32.cpuregs write port 0.

yosys> memory_bmux2rom

5.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

yosys> memory_dff

5.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\cpuregs'[0] in module `\picorv32': no output FF found.
Checking read port `\cpuregs'[1] in module `\picorv32': no output FF found.
Checking read port address `\cpuregs'[0] in module `\picorv32': merged address FF to cell.
Checking read port address `\cpuregs'[1] in module `\picorv32': merged address FF to cell.

yosys> opt_clean

5.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

yosys> memory_share

5.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory picorv32.cpuregs by address:

yosys> opt_mem_widen

5.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

yosys> opt_clean

5.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

yosys> memory_collect

5.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

yosys> opt_clean

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

yosys> synth -flatten -extra-map /venv/lib/python3.10/site-packages/siliconcompiler/tools/yosys/techmaps/lcu_kogge_stone.v -top picorv32 -run fine:check

6. Executing SYNTH pass.

yosys> opt -fast -full

6.1. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

6.1.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~100 debug messages>

yosys> opt_merge

6.1.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff

6.1.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$4138 ($dffe) from module picorv32 (D = $procmux$3300_Y, Q = \mem_valid, rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$4104 ($dffe) from module picorv32 (D = $procmux$3242_Y, Q = \mem_state, rval = 2'00).
Adding SRST signal on $auto$ff.cc:266:slice$4242 ($dffe) from module picorv32 (D = \decoded_rd, Q = \latched_rd, rval = 5'00000).

yosys> opt_clean

6.1.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 15 unused cells and 62 unused wires.
<suppressed ~19 debug messages>

6.1.5. Rerunning OPT passes. (Removed registers in this run.)

yosys> opt_expr -full

6.1.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~1 debug messages>

yosys> opt_merge

6.1.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff

6.1.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$3594 ($dff) from module picorv32 (D = $0\reg_sh[4:0] [1:0], Q = \reg_sh [1:0]).

yosys> opt_clean

6.1.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

6.1.10. Rerunning OPT passes. (Removed registers in this run.)

yosys> opt_expr -full

6.1.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

yosys> opt_merge

6.1.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff

6.1.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

6.1.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

6.1.15. Finished fast OPT passes.

yosys> memory_map

6.2. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \cpuregs in module \picorv32:
  created 32 $dff cells and 0 static cells of width 32.
Extracted addr FF from read port 0 of picorv32.cpuregs: $\cpuregs$rdreg[0]
Extracted addr FF from read port 1 of picorv32.cpuregs: $\cpuregs$rdreg[1]
  read interface: 2 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.

yosys> opt -full

6.3. Executing OPT pass (performing simple optimizations).

yosys> opt_expr -full

6.3.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~10 debug messages>

yosys> opt_merge -nomux

6.3.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_muxtree

6.3.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~59 debug messages>

yosys> opt_reduce -full

6.3.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
    Consolidated identical input bits for $pmux cell $procmux$1458:
      Old ports: A=\mem_rdata_word, B={ \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15:0] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7:0] }, Y=$procmux$1458_Y
      New ports: A=\mem_rdata_word [31:8], B={ \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15] \mem_rdata_word [15:7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] \mem_rdata_word [7] }, Y=$procmux$1458_Y [31:8]
      New connections: $procmux$1458_Y [7:0] = \mem_rdata_word [7:0]
    New ctrl vector for $pmux cell $procmux$1708: { \cpu_state [3] $auto$opt_reduce.cc:137:opt_pmux$4958 }
    New ctrl vector for $pmux cell $procmux$2218: { \cpu_state [4] $auto$opt_reduce.cc:137:opt_pmux$4960 }
    Consolidated identical input bits for $mux cell $procmux$2269:
      Old ports: A={ $add$inputs/picorv32.v:1254$562_Y [31:2] $3\current_pc[31:0] [1:0] }, B={ $add$inputs/picorv32.v:1263$564_Y [31:1] $3\current_pc[31:0] [0] }, Y=$procmux$2269_Y
      New ports: A={ $add$inputs/picorv32.v:1254$562_Y [31:2] $3\current_pc[31:0] [1] }, B=$add$inputs/picorv32.v:1263$564_Y [31:1], Y=$procmux$2269_Y [31:1]
      New connections: $procmux$2269_Y [0] = $3\current_pc[31:0] [0]
    New ctrl vector for $pmux cell $procmux$3242: { $procmux$3252_CMP $auto$opt_reduce.cc:137:opt_pmux$4962 }
    Consolidated identical input bits for $pmux cell $procmux$3536:
      Old ports: A={ 24'000000000000000000000000 \mem_rdata [7:0] }, B={ 24'000000000000000000000000 \mem_rdata [15:8] 24'000000000000000000000000 \mem_rdata [23:16] 24'000000000000000000000000 \mem_rdata [31:24] }, Y=$3\mem_rdata_word[31:0]
      New ports: A=\mem_rdata [7:0], B={ \mem_rdata [15:8] \mem_rdata [23:16] \mem_rdata [31:24] }, Y=$3\mem_rdata_word[31:0] [7:0]
      New connections: $3\mem_rdata_word[31:0] [31:8] = 24'000000000000000000000000
    Consolidated identical input bits for $mux cell $procmux$3545:
      Old ports: A={ 16'0000000000000000 \mem_rdata [15:0] }, B={ 16'0000000000000000 \mem_rdata [31:16] }, Y=$2\mem_rdata_word[31:0]
      New ports: A=\mem_rdata [15:0], B=\mem_rdata [31:16], Y=$2\mem_rdata_word[31:0] [15:0]
      New connections: $2\mem_rdata_word[31:0] [31:16] = 16'0000000000000000
    Consolidated identical input bits for $pmux cell $procmux$3561:
      Old ports: A=\reg_op2, B={ \reg_op2 [15:0] \reg_op2 [15:0] \reg_op2 [7:0] \reg_op2 [7:0] \reg_op2 [7:0] \reg_op2 [7:0] }, Y=\mem_la_wdata
      New ports: A=\reg_op2 [31:8], B={ \reg_op2 [15:0] \reg_op2 [15:0] \reg_op2 [7:0] \reg_op2 [7:0] }, Y=\mem_la_wdata [31:8]
      New connections: \mem_la_wdata [7:0] = \reg_op2 [7:0]
    Consolidated identical input bits for $mux cell $ternary$inputs/picorv32.v:258$83:
      Old ports: A={ \reg_op1 [31:2] 2'00 }, B={ \next_pc [31:2] 2'00 }, Y=\mem_la_addr
      New ports: A=\reg_op1 [31:2], B=\next_pc [31:2], Y=\mem_la_addr [31:2]
      New connections: \mem_la_addr [1:0] = 2'00
    Consolidated identical input bits for $mux cell $ternary$inputs/picorv32.v:283$98:
      Old ports: A=4'0011, B=4'1100, Y=$ternary$inputs/picorv32.v:283$98_Y
      New ports: A=2'01, B=2'10, Y={ $ternary$inputs/picorv32.v:283$98_Y [2] $ternary$inputs/picorv32.v:283$98_Y [0] }
      New connections: { $ternary$inputs/picorv32.v:283$98_Y [3] $ternary$inputs/picorv32.v:283$98_Y [1] } = { $ternary$inputs/picorv32.v:283$98_Y [2] $ternary$inputs/picorv32.v:283$98_Y [0] }
    Consolidated identical input bits for $mux cell $ternary$inputs/picorv32.v:481$158:
      Old ports: A=2'11, B=2'00, Y=$procmux$3248_Y
      New ports: A=1'1, B=1'0, Y=$procmux$3248_Y [0]
      New connections: $procmux$3248_Y [1] = $procmux$3248_Y [0]
    New input vector for $reduce_or cell $auto$opt_reduce.cc:131:opt_pmux$4957: { \cpu_state [6] \cpu_state [4] \cpu_state [2] }
  Optimizing cells in module \picorv32.
    Consolidated identical input bits for $mux cell $procmux$2271:
      Old ports: A=$3\current_pc[31:0], B=$procmux$2269_Y, Y=$procmux$2271_Y
      New ports: A=$3\current_pc[31:0] [31:1], B=$procmux$2269_Y [31:1], Y=$procmux$2271_Y [31:1]
      New connections: $procmux$2271_Y [0] = $3\current_pc[31:0] [0]
  Optimizing cells in module \picorv32.
Performed a total of 13 changes.

yosys> opt_merge

6.3.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

yosys> opt_share

6.3.6. Executing OPT_SHARE pass.

yosys> opt_dff

6.3.7. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

6.3.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 0 unused cells and 102 unused wires.
<suppressed ~1 debug messages>

yosys> opt_expr -full

6.3.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~1 debug messages>

6.3.10. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

6.3.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~60 debug messages>

yosys> opt_reduce -full

6.3.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

yosys> opt_merge

6.3.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_share

6.3.14. Executing OPT_SHARE pass.

yosys> opt_dff

6.3.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\cpuregs[9]$4481 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[9]).
Adding EN signal on $memory\cpuregs[8]$4479 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[8]).
Adding EN signal on $memory\cpuregs[7]$4477 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[7]).
Adding EN signal on $memory\cpuregs[6]$4475 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[6]).
Adding EN signal on $memory\cpuregs[5]$4473 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[5]).
Adding EN signal on $memory\cpuregs[4]$4471 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[4]).
Adding EN signal on $memory\cpuregs[3]$4469 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[3]).
Adding EN signal on $memory\cpuregs[31]$4525 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[31]).
Adding EN signal on $memory\cpuregs[30]$4523 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[30]).
Adding EN signal on $memory\cpuregs[2]$4467 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[2]).
Adding EN signal on $memory\cpuregs[29]$4521 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[29]).
Adding EN signal on $memory\cpuregs[28]$4519 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[28]).
Adding EN signal on $memory\cpuregs[27]$4517 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[27]).
Adding EN signal on $memory\cpuregs[26]$4515 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[26]).
Adding EN signal on $memory\cpuregs[25]$4513 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[25]).
Adding EN signal on $memory\cpuregs[24]$4511 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[24]).
Adding EN signal on $memory\cpuregs[23]$4509 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[23]).
Adding EN signal on $memory\cpuregs[22]$4507 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[22]).
Adding EN signal on $memory\cpuregs[21]$4505 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[21]).
Adding EN signal on $memory\cpuregs[20]$4503 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[20]).
Adding EN signal on $memory\cpuregs[1]$4465 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[1]).
Adding EN signal on $memory\cpuregs[19]$4501 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[19]).
Adding EN signal on $memory\cpuregs[18]$4499 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[18]).
Adding EN signal on $memory\cpuregs[17]$4497 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[17]).
Adding EN signal on $memory\cpuregs[16]$4495 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[16]).
Adding EN signal on $memory\cpuregs[15]$4493 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[15]).
Adding EN signal on $memory\cpuregs[14]$4491 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[14]).
Adding EN signal on $memory\cpuregs[13]$4489 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[13]).
Adding EN signal on $memory\cpuregs[12]$4487 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[12]).
Adding EN signal on $memory\cpuregs[11]$4485 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[11]).
Adding EN signal on $memory\cpuregs[10]$4483 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[10]).
Adding EN signal on $memory\cpuregs[0]$4463 ($dff) from module picorv32 (D = \cpuregs_wrdata, Q = \cpuregs[0]).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$4125 ($dffe) from module picorv32.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$4125 ($dffe) from module picorv32.

yosys> opt_clean

6.3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 32 unused cells and 32 unused wires.
<suppressed ~33 debug messages>

yosys> opt_expr -full

6.3.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

6.3.18. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

6.3.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

yosys> opt_reduce -full

6.3.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

yosys> opt_merge

6.3.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_share

6.3.22. Executing OPT_SHARE pass.

yosys> opt_dff

6.3.23. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

6.3.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

yosys> opt_expr -full

6.3.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

6.3.26. Finished OPT passes. (There is nothing left to do.)

yosys> techmap -map +/techmap.v -map /venv/lib/python3.10/site-packages/siliconcompiler/tools/yosys/techmaps/lcu_kogge_stone.v

6.4. Executing TECHMAP pass (map to technology primitives).

6.4.1. Executing Verilog-2005 frontend: /sc_tools/bin/../share/yosys/techmap.v
Parsing Verilog input from `/sc_tools/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.4.2. Executing Verilog-2005 frontend: /venv/lib/python3.10/site-packages/siliconcompiler/tools/yosys/techmaps/lcu_kogge_stone.v
Parsing Verilog input from `/venv/lib/python3.10/site-packages/siliconcompiler/tools/yosys/techmaps/lcu_kogge_stone.v' to AST representation.
Generating RTLIL representation for module `\_80_lcu_kogge_stone'.
Successfully finished Verilog frontend.

6.4.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$constmap:66d421c313e4e958be776b99540ac2de3b59fdbc$paramod$77562a466236eb4a6d905351a0995599b75075cb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using template $paramod$cc80a4e89b0341cb117f5d28b0e7244620640141\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$44a13d10af618e7fbe7b9aad2f6151ffcee1e2fa\_90_alu for cells of type $alu.
Using template $paramod$ebf89ea36a793f0f77858f212141d47c833068ad\_90_alu for cells of type $alu.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$dc04b7d98e503a7bab16fce2df70e6e2c5ca34d6\_90_alu for cells of type $alu.
Using template $paramod$2653f68ddb8eab7b1907b4a20767b72a824a7a36\_90_alu for cells of type $alu.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_90_alu for cells of type $alu.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using template $paramod$cc1e387d9d5ac1d3f6e6bed180038d9c0ac48d0c\_90_pmux for cells of type $pmux.
Using template $paramod$54d740639e1393b22262823179ff783ea9f17a35\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdffce.
Using template $paramod$2407ada40cc3dda6c6015be2b49b748cddb5a800\_90_pmux for cells of type $pmux.
Using template $paramod$b098bc6f249c0ac91c4d6e19d54b23c285914115\_90_pmux for cells of type $pmux.
Using template $paramod$59b03ae2620a41577de8da5f5c97b2919e82362b\_90_pmux for cells of type $pmux.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_80_lcu_kogge_stone\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using template $paramod\_80_lcu_kogge_stone\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_80_lcu_kogge_stone\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_80_lcu_kogge_stone\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using template $paramod\_80_lcu_kogge_stone\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_80_lcu_kogge_stone\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
No more expansions possible.
<suppressed ~7517 debug messages>

yosys> opt -fast

6.5. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

6.5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~3232 debug messages>

yosys> opt_merge

6.5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~4212 debug messages>
Removed a total of 1404 cells.

yosys> opt_dff

6.5.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$11946 ($_SDFFE_PN0P_) from module picorv32 (D = 1'0, Q = \reg_next_pc [0]).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$24017 ($_SDFFE_PN0P_) from module picorv32.

yosys> opt_clean

6.5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 328 unused cells and 4047 unused wires.
<suppressed ~329 debug messages>

6.5.5. Rerunning OPT passes. (Removed registers in this run.)

yosys> opt_expr

6.5.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~15 debug messages>

yosys> opt_merge

6.5.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff

6.5.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$12330 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [31], Q = \decoded_imm [31], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12329 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [30], Q = \decoded_imm [30], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12328 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [29], Q = \decoded_imm [29], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12327 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [28], Q = \decoded_imm [28], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12326 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [27], Q = \decoded_imm [27], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12325 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [26], Q = \decoded_imm [26], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12324 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [25], Q = \decoded_imm [25], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12323 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [24], Q = \decoded_imm [24], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12322 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [23], Q = \decoded_imm [23], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12321 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [22], Q = \decoded_imm [22], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12320 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [21], Q = \decoded_imm [21], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12319 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [20], Q = \decoded_imm [20], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12318 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [19], Q = \decoded_imm [19], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12317 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [18], Q = \decoded_imm [18], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12316 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [17], Q = \decoded_imm [17], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12315 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [16], Q = \decoded_imm [16], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12314 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [15], Q = \decoded_imm [15], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12313 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [14], Q = \decoded_imm [14], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12312 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [13], Q = \decoded_imm [13], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12311 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [12], Q = \decoded_imm [12], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12310 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [11], Q = \decoded_imm [11], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12309 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [10], Q = \decoded_imm [10], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12308 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [9], Q = \decoded_imm [9], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12307 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [8], Q = \decoded_imm [8], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12306 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [7], Q = \decoded_imm [7], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12305 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [6], Q = \decoded_imm [6], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12304 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [5], Q = \decoded_imm [5], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12303 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [4], Q = \decoded_imm [4], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12302 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [3], Q = \decoded_imm [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12301 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [2], Q = \decoded_imm [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$12300 ($_DFFE_PP_) from module picorv32 (D = $procmux$2690.Y_B [1], Q = \decoded_imm [1], rval = 1'0).

yosys> opt_clean

6.5.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 35 unused cells and 14 unused wires.
<suppressed ~36 debug messages>

6.5.10. Rerunning OPT passes. (Removed registers in this run.)

yosys> opt_expr

6.5.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

yosys> opt_merge

6.5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff

6.5.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

6.5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

6.5.15. Finished fast OPT passes.

yosys> abc -fast

6.6. Executing ABC pass (technology mapping using ABC).

6.6.1. Extracting gate netlist of module `\picorv32' to `<abc-temp-dir>/input.blif'..
Replacing 3 occurrences of constant undef bits with constant zero bits
Extracted 8159 gates and 9725 wires to a netlist network with 1563 inputs and 622 outputs.

6.6.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.6.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      285
ABC RESULTS:            ANDNOT cells:     1593
ABC RESULTS:               MUX cells:     2710
ABC RESULTS:              NAND cells:      338
ABC RESULTS:               NOR cells:      454
ABC RESULTS:               NOT cells:      108
ABC RESULTS:                OR cells:     1839
ABC RESULTS:             ORNOT cells:      233
ABC RESULTS:              XNOR cells:      146
ABC RESULTS:               XOR cells:      325
ABC RESULTS:        internal signals:     7540
ABC RESULTS:           input signals:     1563
ABC RESULTS:          output signals:      622
Removing temp directory.

yosys> opt -fast

6.7. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

6.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~1216 debug messages>

yosys> opt_merge

6.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

yosys> opt_dff

6.7.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean

6.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 13 unused cells and 5374 unused wires.
<suppressed ~27 debug messages>

6.7.5. Finished fast OPT passes.

yosys> delete */t:$print

yosys> chformal -remove

yosys> hierarchy -top picorv32

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \picorv32

7.2. Analyzing design hierarchy..
Top module:  \picorv32
Removed 0 unused modules.

yosys> opt -purge

8. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

yosys> opt_merge -nomux

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_muxtree

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

yosys> opt_merge

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff

8.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean -purge

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 0 unused cells and 37 unused wires.
<suppressed ~37 debug messages>

yosys> opt_expr

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

8.9. Rerunning OPT passes. (Maybe there is more to do..)

yosys> opt_muxtree

8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

yosys> opt_merge

8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff

8.13. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean -purge

8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

yosys> opt_expr

8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

8.16. Finished OPT passes. (There is nothing left to do.)

yosys> techmap -map /nfs/sc_compute/cache/lambdapdk-v0.1.50/lambdapdk/sky130/libs/sky130hd/techmap/yosys/cells_tristatebuf.v

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /nfs/sc_compute/cache/lambdapdk-v0.1.50/lambdapdk/sky130/libs/sky130hd/techmap/yosys/cells_tristatebuf.v
Parsing Verilog input from `/nfs/sc_compute/cache/lambdapdk-v0.1.50/lambdapdk/sky130/libs/sky130hd/techmap/yosys/cells_tristatebuf.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

yosys> techmap

10. Executing TECHMAP pass (map to technology primitives).

10.1. Executing Verilog-2005 frontend: /sc_tools/bin/../share/yosys/techmap.v
Parsing Verilog input from `/sc_tools/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~75 debug messages>

yosys> opt -fast -purge

11. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

yosys> opt_merge

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff

11.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean -purge

11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

11.5. Finished fast OPT passes.

yosys> extract_fa

12. Executing EXTRACT_FA pass (find and extract full/half adders).
Extracting full/half adders from picorv32:
  3-Input XOR/XNOR \decoded_imm_j [2] $auto$alumacc.cc:495:replace_alu$4396.B [0] $abc$24055$new_n4170:
      10010110 -> $abc$24055$new_n4171
    Majority with inverted A B C:
      00010111 -> $abc$24055$new_n4181
      Created $fa cell $auto$extract_fa.cc:397:run$32165.
  3-Input XOR/XNOR \decoded_imm_j [3] $auto$alumacc.cc:495:replace_alu$4396.B [1] $abc$24055$new_n4181:
      01101001 -> $abc$24055$new_n4182
  3-Input XOR/XNOR \decoded_imm_j [4] $auto$alumacc.cc:495:replace_alu$4396.B [2] $abc$24055$new_n4196:
      01101001 -> $abc$24055$new_n4197
  3-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [2] $abc$24055$new_n4196 $abc$24055$new_n3127:
      10010110 -> $abc$24055$new_n4197
  3-Input XOR/XNOR \decoded_imm_j [5] $auto$alumacc.cc:495:replace_alu$4396.B [3] $abc$24055$new_n4212:
      10010110 -> $abc$24055$new_n4213
  3-Input XOR/XNOR \decoded_imm_j [6] $auto$alumacc.cc:495:replace_alu$4396.B [4] $abc$24055$new_n4231:
      10010110 -> $abc$24055$new_n4232
  3-Input XOR/XNOR \decoded_imm_j [7] $auto$alumacc.cc:495:replace_alu$4396.B [5] $abc$24055$new_n4251:
      10010110 -> $abc$24055$new_n4252
  3-Input XOR/XNOR \decoded_imm_j [8] $auto$alumacc.cc:495:replace_alu$4396.B [6] $abc$24055$new_n4271:
      10010110 -> $abc$24055$new_n4272
  3-Input XOR/XNOR \decoded_imm_j [9] $auto$alumacc.cc:495:replace_alu$4396.B [7] $abc$24055$new_n4291:
      10010110 -> $abc$24055$new_n4292
  3-Input XOR/XNOR \decoded_imm_j [10] $auto$alumacc.cc:495:replace_alu$4396.B [8] $abc$24055$new_n4314:
      01101001 -> $abc$24055$new_n4315
  3-Input XOR/XNOR \decoded_imm_j [11] $auto$alumacc.cc:495:replace_alu$4396.B [9] $abc$24055$new_n4339:
      01101001 -> $abc$24055$new_n4340
  3-Input XOR/XNOR \decoded_imm_j [12] $auto$alumacc.cc:495:replace_alu$4396.B [10] $abc$24055$new_n4363:
      01101001 -> $abc$24055$new_n4364
  3-Input XOR/XNOR \decoded_imm_j [13] $auto$alumacc.cc:495:replace_alu$4396.B [11] $abc$24055$new_n4387:
      01101001 -> $abc$24055$new_n4388
  3-Input XOR/XNOR \decoded_imm_j [14] $auto$alumacc.cc:495:replace_alu$4396.B [12] $abc$24055$new_n4411:
      01101001 -> $abc$24055$new_n4412
  3-Input XOR/XNOR \decoded_imm_j [15] $auto$alumacc.cc:495:replace_alu$4396.B [13] $abc$24055$new_n4435:
      01101001 -> $abc$24055$new_n4436
  3-Input XOR/XNOR \decoded_imm_j [16] $auto$alumacc.cc:495:replace_alu$4396.B [14] $abc$24055$new_n4459:
      01101001 -> $abc$24055$new_n4460
  3-Input XOR/XNOR \decoded_imm_j [17] $auto$alumacc.cc:495:replace_alu$4396.B [15] $abc$24055$new_n4483:
      01101001 -> $abc$24055$new_n4484
  3-Input XOR/XNOR \decoded_imm_j [18] $auto$alumacc.cc:495:replace_alu$4396.B [16] $abc$24055$new_n4510:
      01101001 -> $abc$24055$new_n4511
  3-Input XOR/XNOR \decoded_imm_j [19] $auto$alumacc.cc:495:replace_alu$4396.B [17] $abc$24055$new_n4539:
      01101001 -> $abc$24055$new_n4540
  3-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [17] $abc$24055$new_n4539 $abc$24055$new_n4523:
      10010110 -> $abc$24055$new_n4540
  3-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [18] $abc$24055$new_n4568:
      01101001 -> $abc$24055$new_n4569
  3-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [18] $abc$24055$new_n4568 $abc$24055$new_n4552:
      10010110 -> $abc$24055$new_n4569
  3-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [19] $abc$24055$new_n4596:
      01101001 -> $abc$24055$new_n4597
  3-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [19] $abc$24055$new_n4596 $abc$24055$new_n4552:
      10010110 -> $abc$24055$new_n4597
  3-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [20] $abc$24055$new_n4624:
      01101001 -> $abc$24055$new_n4625
  3-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [20] $abc$24055$new_n4624 $abc$24055$new_n4552:
      10010110 -> $abc$24055$new_n4625
  3-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [21] $abc$24055$new_n4652:
      01101001 -> $abc$24055$new_n4653
  3-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [21] $abc$24055$new_n4652 $abc$24055$new_n4552:
      10010110 -> $abc$24055$new_n4653
  3-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [22] $abc$24055$new_n4680:
      01101001 -> $abc$24055$new_n4681
  3-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [22] $abc$24055$new_n4680 $abc$24055$new_n4552:
      10010110 -> $abc$24055$new_n4681
  3-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [23] $abc$24055$new_n4708:
      01101001 -> $abc$24055$new_n4709
  3-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [23] $abc$24055$new_n4708 $abc$24055$new_n4552:
      10010110 -> $abc$24055$new_n4709
  3-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [24] $abc$24055$new_n4736:
      01101001 -> $abc$24055$new_n4737
  3-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [24] $abc$24055$new_n4736 $abc$24055$new_n4552:
      10010110 -> $abc$24055$new_n4737
  3-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [25] $abc$24055$new_n4764:
      01101001 -> $abc$24055$new_n4765
  3-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [25] $abc$24055$new_n4764 $abc$24055$new_n4552:
      10010110 -> $abc$24055$new_n4765
  3-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [26] $abc$24055$new_n4792:
      01101001 -> $abc$24055$new_n4793
  3-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [26] $abc$24055$new_n4792 $abc$24055$new_n4552:
      10010110 -> $abc$24055$new_n4793
  3-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [27] $abc$24055$new_n4820:
      01101001 -> $abc$24055$new_n4821
  3-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [27] $abc$24055$new_n4820 $abc$24055$new_n4552:
      10010110 -> $abc$24055$new_n4821
  3-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [28] $abc$24055$new_n4848:
      01101001 -> $abc$24055$new_n4849
  3-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [28] $abc$24055$new_n4848 $abc$24055$new_n4552:
      10010110 -> $abc$24055$new_n4849
  3-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [29] $abc$24055$new_n4876:
      01101001 -> $abc$24055$new_n4877
  3-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [29] $abc$24055$new_n4876 $abc$24055$new_n4552:
      10010110 -> $abc$24055$new_n4877
  3-Input XOR/XNOR \reg_pc [2] \decoded_imm [2] $abc$24055$new_n5167:
      01101001 -> $abc$24055$new_n5168
    Majority with inverted Y:
      00010111 -> $abc$24055$new_n5196
      Created $fa cell $auto$extract_fa.cc:397:run$32178.
  3-Input XOR/XNOR \reg_pc [3] \decoded_imm [3] $abc$24055$new_n5196:
      10010110 -> $abc$24055$new_n5197
  3-Input XOR/XNOR \reg_pc [4] \decoded_imm [4] $abc$24055$new_n5228:
      10010110 -> $abc$24055$new_n5229
  3-Input XOR/XNOR \reg_pc [5] \decoded_imm [5] $abc$24055$new_n5260:
      10010110 -> $abc$24055$new_n5261
  3-Input XOR/XNOR \reg_pc [6] \decoded_imm [6] $abc$24055$new_n5295:
      01101001 -> $abc$24055$new_n5296
  3-Input XOR/XNOR \reg_pc [7] \decoded_imm [7] $abc$24055$new_n5330:
      01101001 -> $abc$24055$new_n5331
  3-Input XOR/XNOR \reg_pc [8] \decoded_imm [8] $abc$24055$new_n5362:
      01101001 -> $abc$24055$new_n5363
  3-Input XOR/XNOR \reg_pc [9] \decoded_imm [9] $abc$24055$new_n5392:
      01101001 -> $abc$24055$new_n5393
  3-Input XOR/XNOR \reg_pc [10] \decoded_imm [10] $abc$24055$new_n5425:
      10010110 -> $abc$24055$new_n5426
  3-Input XOR/XNOR \reg_pc [11] \decoded_imm [11] $abc$24055$new_n5459:
      10010110 -> $abc$24055$new_n5460
  3-Input XOR/XNOR \reg_pc [12] \decoded_imm [12] $abc$24055$new_n5492:
      10010110 -> $abc$24055$new_n5493
  3-Input XOR/XNOR \reg_pc [13] \decoded_imm [13] $abc$24055$new_n5525:
      10010110 -> $abc$24055$new_n5526
  3-Input XOR/XNOR \reg_pc [14] \decoded_imm [14] $abc$24055$new_n5558:
      10010110 -> $abc$24055$new_n5559
  3-Input XOR/XNOR \reg_pc [15] \decoded_imm [15] $abc$24055$new_n5592:
      10010110 -> $abc$24055$new_n5593
  3-Input XOR/XNOR \reg_pc [16] \decoded_imm [16] $abc$24055$new_n5620:
      01101001 -> $abc$24055$new_n5621
  3-Input XOR/XNOR \reg_pc [17] \decoded_imm [17] $abc$24055$new_n5648:
      01101001 -> $abc$24055$new_n5649
  3-Input XOR/XNOR \reg_pc [18] \decoded_imm [18] $abc$24055$new_n5679:
      01101001 -> $abc$24055$new_n5680
  3-Input XOR/XNOR \reg_pc [19] \decoded_imm [19] $abc$24055$new_n5710:
      01101001 -> $abc$24055$new_n5711
  3-Input XOR/XNOR \reg_pc [20] \decoded_imm [20] $abc$24055$new_n5741:
      01101001 -> $abc$24055$new_n5742
  3-Input XOR/XNOR \reg_pc [21] \decoded_imm [21] $abc$24055$new_n5772:
      01101001 -> $abc$24055$new_n5773
  3-Input XOR/XNOR \reg_pc [22] \decoded_imm [22] $abc$24055$new_n5803:
      01101001 -> $abc$24055$new_n5804
  3-Input XOR/XNOR \reg_pc [23] \decoded_imm [23] $abc$24055$new_n5834:
      01101001 -> $abc$24055$new_n5835
  3-Input XOR/XNOR \reg_pc [24] \decoded_imm [24] $abc$24055$new_n5865:
      01101001 -> $abc$24055$new_n5866
  3-Input XOR/XNOR \reg_pc [25] \decoded_imm [25] $abc$24055$new_n5896:
      01101001 -> $abc$24055$new_n5897
  3-Input XOR/XNOR \reg_pc [26] \decoded_imm [26] $abc$24055$new_n5927:
      01101001 -> $abc$24055$new_n5928
  3-Input XOR/XNOR \reg_pc [27] \decoded_imm [27] $abc$24055$new_n5958:
      01101001 -> $abc$24055$new_n5959
  3-Input XOR/XNOR \reg_pc [28] \decoded_imm [28] $abc$24055$new_n5989:
      01101001 -> $abc$24055$new_n5990
  3-Input XOR/XNOR \reg_pc [29] \decoded_imm [29] $abc$24055$new_n6020:
      01101001 -> $abc$24055$new_n6021
  3-Input XOR/XNOR \reg_pc [30] \decoded_imm [30] $abc$24055$new_n6051:
      01101001 -> $abc$24055$new_n6052
  3-Input XOR/XNOR \reg_pc [31] \decoded_imm [31] $abc$24055$new_n6082:
      10010110 -> $abc$24055$new_n6083
  3-Input XOR/XNOR \pcpi_rs1 [31] \pcpi_rs2 [31] $abc$24055$new_n6310:
      10010110 -> $abc$24055$new_n6400
  3-Input XOR/XNOR \pcpi_rs1 [1] \decoded_imm [1] $abc$24055$new_n6509:
      01101001 -> $abc$24055$new_n6510
    Majority with inverted Y:
      00010111 -> $abc$24055$new_n6564
      Created $fa cell $auto$extract_fa.cc:397:run$32187.
  3-Input XOR/XNOR \pcpi_rs1 [2] \decoded_imm [2] $abc$24055$new_n6564:
      10010110 -> $abc$24055$new_n6565
  3-Input XOR/XNOR \pcpi_rs1 [3] \decoded_imm [3] $abc$24055$new_n6621:
      10010110 -> $abc$24055$new_n6622
  3-Input XOR/XNOR \pcpi_rs1 [4] \decoded_imm [4] $abc$24055$new_n6674:
      10010110 -> $abc$24055$new_n6675
  3-Input XOR/XNOR \pcpi_rs1 [5] \decoded_imm [5] $abc$24055$new_n6730:
      01101001 -> $abc$24055$new_n6731
  3-Input XOR/XNOR \pcpi_rs1 [6] \decoded_imm [6] $abc$24055$new_n6786:
      01101001 -> $abc$24055$new_n6787
  3-Input XOR/XNOR \pcpi_rs1 [7] \decoded_imm [7] $abc$24055$new_n6842:
      01101001 -> $abc$24055$new_n6843
  3-Input XOR/XNOR \pcpi_rs1 [8] \decoded_imm [8] $abc$24055$new_n6898:
      01101001 -> $abc$24055$new_n6899
  3-Input XOR/XNOR \pcpi_rs1 [9] \decoded_imm [9] $abc$24055$new_n6957:
      10010110 -> $abc$24055$new_n6958
  3-Input XOR/XNOR \pcpi_rs1 [10] \decoded_imm [10] $abc$24055$new_n7017:
      10010110 -> $abc$24055$new_n7018
  3-Input XOR/XNOR \pcpi_rs1 [11] \decoded_imm [11] $abc$24055$new_n7076:
      10010110 -> $abc$24055$new_n7077
  3-Input XOR/XNOR \pcpi_rs1 [12] \decoded_imm [12] $abc$24055$new_n7135:
      10010110 -> $abc$24055$new_n7136
  3-Input XOR/XNOR \pcpi_rs1 [13] \decoded_imm [13] $abc$24055$new_n7194:
      10010110 -> $abc$24055$new_n7195
  3-Input XOR/XNOR \pcpi_rs1 [14] \decoded_imm [14] $abc$24055$new_n7253:
      10010110 -> $abc$24055$new_n7254
  3-Input XOR/XNOR \pcpi_rs1 [15] \decoded_imm [15] $abc$24055$new_n7312:
      10010110 -> $abc$24055$new_n7313
  3-Input XOR/XNOR \pcpi_rs1 [16] \decoded_imm [16] $abc$24055$new_n7371:
      01101001 -> $abc$24055$new_n7372
  3-Input XOR/XNOR \pcpi_rs1 [17] \decoded_imm [17] $abc$24055$new_n7433:
      01101001 -> $abc$24055$new_n7434
  3-Input XOR/XNOR \pcpi_rs1 [18] \decoded_imm [18] $abc$24055$new_n7495:
      01101001 -> $abc$24055$new_n7496
  3-Input XOR/XNOR \pcpi_rs1 [19] \decoded_imm [19] $abc$24055$new_n7557:
      01101001 -> $abc$24055$new_n7558
  3-Input XOR/XNOR \pcpi_rs1 [20] \decoded_imm [20] $abc$24055$new_n7619:
      01101001 -> $abc$24055$new_n7620
  3-Input XOR/XNOR \pcpi_rs1 [21] \decoded_imm [21] $abc$24055$new_n7681:
      01101001 -> $abc$24055$new_n7682
  3-Input XOR/XNOR \pcpi_rs1 [22] \decoded_imm [22] $abc$24055$new_n7743:
      01101001 -> $abc$24055$new_n7744
  3-Input XOR/XNOR \pcpi_rs1 [23] \decoded_imm [23] $abc$24055$new_n7805:
      01101001 -> $abc$24055$new_n7806
  3-Input XOR/XNOR \pcpi_rs1 [24] \decoded_imm [24] $abc$24055$new_n7867:
      01101001 -> $abc$24055$new_n7868
  3-Input XOR/XNOR \pcpi_rs1 [25] \decoded_imm [25] $abc$24055$new_n7929:
      01101001 -> $abc$24055$new_n7930
  3-Input XOR/XNOR \pcpi_rs1 [26] \decoded_imm [26] $abc$24055$new_n7991:
      01101001 -> $abc$24055$new_n7992
  3-Input XOR/XNOR \pcpi_rs1 [27] \decoded_imm [27] $abc$24055$new_n8052:
      01101001 -> $abc$24055$new_n8053
  3-Input XOR/XNOR \pcpi_rs1 [28] \decoded_imm [28] $abc$24055$new_n8113:
      01101001 -> $abc$24055$new_n8114
  3-Input XOR/XNOR \pcpi_rs1 [29] \decoded_imm [29] $abc$24055$new_n8171:
      01101001 -> $abc$24055$new_n8172
  3-Input XOR/XNOR \pcpi_rs1 [30] \decoded_imm [30] $abc$24055$new_n8229:
      01101001 -> $abc$24055$new_n8230
  3-Input XOR/XNOR \pcpi_rs1 [31] \decoded_imm [31] $abc$24055$new_n8287:
      10010110 -> $abc$24055$new_n8288
  3-Input XOR/XNOR \mem_la_wdata [1] \pcpi_rs1 [1] $abc$24055$new_n6089:
      10010110 -> $abc$24055$new_n8315
    Majority with inverted A B C:
      00010111 -> $abc$24055$new_n8328
      Created $fa cell $auto$extract_fa.cc:397:run$32196.
  3-Input XOR/XNOR \mem_la_wdata [1] \pcpi_rs1 [1] $abc$24055$new_n6300:
      10010110 -> $abc$24055$new_n8316
    Majority with inverted B:
      10110010 -> $abc$24055$new_n6302
      Created $fa cell $auto$extract_fa.cc:397:run$32209.
  3-Input XOR/XNOR \mem_la_wdata [2] \pcpi_rs1 [2] $abc$24055$new_n8328:
      01101001 -> $abc$24055$new_n8329
  3-Input XOR/XNOR \mem_la_wdata [2] \pcpi_rs1 [2] $abc$24055$new_n6302:
      10010110 -> $abc$24055$new_n8330
  3-Input XOR/XNOR \mem_la_wdata [3] \pcpi_rs1 [3] $abc$24055$new_n8343:
      10010110 -> $abc$24055$new_n8344
  3-Input XOR/XNOR \mem_la_wdata [3] \pcpi_rs1 [3] $abc$24055$new_n6393:
      10010110 -> $abc$24055$new_n8345
  3-Input XOR/XNOR \mem_la_wdata [4] \pcpi_rs1 [4] $abc$24055$new_n8358:
      10010110 -> $abc$24055$new_n8359
  3-Input XOR/XNOR \mem_la_wdata [4] \pcpi_rs1 [4] $abc$24055$new_n6304:
      10010110 -> $abc$24055$new_n8360
  3-Input XOR/XNOR \mem_la_wdata [5] \pcpi_rs1 [5] $abc$24055$new_n8376:
      10010110 -> $abc$24055$new_n8377
  3-Input XOR/XNOR \mem_la_wdata [5] \pcpi_rs1 [5] $abc$24055$new_n8382:
      01101001 -> $abc$24055$new_n8383
  3-Input XOR/XNOR \mem_la_wdata [6] \pcpi_rs1 [6] $abc$24055$new_n8399:
      10010110 -> $abc$24055$new_n8400
  3-Input XOR/XNOR \mem_la_wdata [6] \pcpi_rs1 [6] $abc$24055$new_n8406:
      01101001 -> $abc$24055$new_n8407
  3-Input XOR/XNOR \mem_la_wdata [7] \pcpi_rs1 [7] $abc$24055$new_n8423:
      10010110 -> $abc$24055$new_n8424
  3-Input XOR/XNOR \mem_la_wdata [7] \pcpi_rs1 [7] $abc$24055$new_n6395:
      10010110 -> $abc$24055$new_n8425
  3-Input XOR/XNOR \pcpi_rs1 [8] \pcpi_rs2 [8] $abc$24055$new_n8441:
      10010110 -> $abc$24055$new_n8442
  3-Input XOR/XNOR \pcpi_rs1 [8] \pcpi_rs2 [8] $abc$24055$new_n6306:
      10010110 -> $abc$24055$new_n8443
  3-Input XOR/XNOR \pcpi_rs1 [9] \pcpi_rs2 [9] $abc$24055$new_n8462:
      01101001 -> $abc$24055$new_n8463
  3-Input XOR/XNOR \pcpi_rs1 [9] \pcpi_rs2 [9] $abc$24055$new_n8471:
      10010110 -> $abc$24055$new_n8472
  3-Input XOR/XNOR \pcpi_rs1 [10] \pcpi_rs2 [10] $abc$24055$new_n8492:
      01101001 -> $abc$24055$new_n8493
  3-Input XOR/XNOR \pcpi_rs1 [10] \pcpi_rs2 [10] $abc$24055$new_n8501:
      10010110 -> $abc$24055$new_n8502
  3-Input XOR/XNOR \pcpi_rs1 [11] \pcpi_rs2 [11] $abc$24055$new_n8521:
      01101001 -> $abc$24055$new_n8522
  3-Input XOR/XNOR \pcpi_rs1 [11] \pcpi_rs2 [11] $abc$24055$new_n8527:
      10010110 -> $abc$24055$new_n8528
  3-Input XOR/XNOR \pcpi_rs1 [12] \pcpi_rs2 [12] $abc$24055$new_n8547:
      01101001 -> $abc$24055$new_n8548
  3-Input XOR/XNOR \pcpi_rs1 [12] \pcpi_rs2 [12] $abc$24055$new_n8553:
      10010110 -> $abc$24055$new_n8554
  3-Input XOR/XNOR \pcpi_rs1 [13] \pcpi_rs2 [13] $abc$24055$new_n8573:
      01101001 -> $abc$24055$new_n8574
  3-Input XOR/XNOR \pcpi_rs1 [13] \pcpi_rs2 [13] $abc$24055$new_n8582:
      10010110 -> $abc$24055$new_n8583
  3-Input XOR/XNOR \pcpi_rs1 [14] \pcpi_rs2 [14] $abc$24055$new_n8602:
      01101001 -> $abc$24055$new_n8603
  3-Input XOR/XNOR \pcpi_rs1 [14] \pcpi_rs2 [14] $abc$24055$new_n8611:
      10010110 -> $abc$24055$new_n8612
  3-Input XOR/XNOR \pcpi_rs1 [15] \pcpi_rs2 [15] $abc$24055$new_n8631:
      01101001 -> $abc$24055$new_n8632
  3-Input XOR/XNOR \pcpi_rs1 [15] \pcpi_rs2 [15] $abc$24055$new_n6397:
      10010110 -> $abc$24055$new_n8633
  3-Input XOR/XNOR \pcpi_rs1 [16] \pcpi_rs2 [16] $abc$24055$new_n8652:
      01101001 -> $abc$24055$new_n8653
  3-Input XOR/XNOR \pcpi_rs1 [16] \pcpi_rs2 [16] $abc$24055$new_n6308:
      10010110 -> $abc$24055$new_n8654
  3-Input XOR/XNOR \pcpi_rs1 [17] \pcpi_rs2 [17] $abc$24055$new_n8676:
      01101001 -> $abc$24055$new_n8677
  3-Input XOR/XNOR \pcpi_rs1 [17] \pcpi_rs2 [17] $abc$24055$new_n8688:
      10010110 -> $abc$24055$new_n8689
  3-Input XOR/XNOR \pcpi_rs1 [18] \pcpi_rs2 [18] $abc$24055$new_n8711:
      01101001 -> $abc$24055$new_n8712
  3-Input XOR/XNOR \pcpi_rs1 [18] \pcpi_rs2 [18] $abc$24055$new_n8723:
      10010110 -> $abc$24055$new_n8724
  3-Input XOR/XNOR \pcpi_rs1 [19] \pcpi_rs2 [19] $abc$24055$new_n8746:
      01101001 -> $abc$24055$new_n8747
  3-Input XOR/XNOR \pcpi_rs1 [19] \pcpi_rs2 [19] $abc$24055$new_n8755:
      10010110 -> $abc$24055$new_n8756
  3-Input XOR/XNOR \pcpi_rs1 [20] \pcpi_rs2 [20] $abc$24055$new_n8778:
      01101001 -> $abc$24055$new_n8779
  3-Input XOR/XNOR \pcpi_rs1 [20] \pcpi_rs2 [20] $abc$24055$new_n8787:
      10010110 -> $abc$24055$new_n8788
  3-Input XOR/XNOR \pcpi_rs1 [21] \pcpi_rs2 [21] $abc$24055$new_n8810:
      01101001 -> $abc$24055$new_n8811
  3-Input XOR/XNOR \pcpi_rs1 [21] \pcpi_rs2 [21] $abc$24055$new_n8822:
      10010110 -> $abc$24055$new_n8823
  3-Input XOR/XNOR \pcpi_rs1 [22] \pcpi_rs2 [22] $abc$24055$new_n8845:
      01101001 -> $abc$24055$new_n8846
  3-Input XOR/XNOR \pcpi_rs1 [22] \pcpi_rs2 [22] $abc$24055$new_n8857:
      10010110 -> $abc$24055$new_n8858
  3-Input XOR/XNOR \pcpi_rs1 [23] \pcpi_rs2 [23] $abc$24055$new_n8880:
      01101001 -> $abc$24055$new_n8881
  3-Input XOR/XNOR \pcpi_rs1 [23] \pcpi_rs2 [23] $abc$24055$new_n8886:
      10010110 -> $abc$24055$new_n8887
  3-Input XOR/XNOR \pcpi_rs1 [24] \pcpi_rs2 [24] $abc$24055$new_n8909:
      01101001 -> $abc$24055$new_n8910
  3-Input XOR/XNOR \pcpi_rs1 [24] \pcpi_rs2 [24] $abc$24055$new_n8915:
      10010110 -> $abc$24055$new_n8916
  3-Input XOR/XNOR \pcpi_rs1 [25] \pcpi_rs2 [25] $abc$24055$new_n8938:
      01101001 -> $abc$24055$new_n8939
  3-Input XOR/XNOR \pcpi_rs1 [25] \pcpi_rs2 [25] $abc$24055$new_n8950:
      10010110 -> $abc$24055$new_n8951
  3-Input XOR/XNOR \pcpi_rs1 [26] \pcpi_rs2 [26] $abc$24055$new_n8973:
      01101001 -> $abc$24055$new_n8974
  3-Input XOR/XNOR \pcpi_rs1 [26] \pcpi_rs2 [26] $abc$24055$new_n8985:
      10010110 -> $abc$24055$new_n8986
  3-Input XOR/XNOR \pcpi_rs1 [27] \pcpi_rs2 [27] $abc$24055$new_n9008:
      01101001 -> $abc$24055$new_n9009
  3-Input XOR/XNOR \pcpi_rs1 [27] \pcpi_rs2 [27] $abc$24055$new_n9017:
      10010110 -> $abc$24055$new_n9018
  3-Input XOR/XNOR \pcpi_rs1 [28] \pcpi_rs2 [28] $abc$24055$new_n9040:
      01101001 -> $abc$24055$new_n9041
  3-Input XOR/XNOR \pcpi_rs1 [28] \pcpi_rs2 [28] $abc$24055$new_n9049:
      10010110 -> $abc$24055$new_n9050
  3-Input XOR/XNOR \pcpi_rs1 [29] \pcpi_rs2 [29] $abc$24055$new_n9072:
      01101001 -> $abc$24055$new_n9073
  3-Input XOR/XNOR \pcpi_rs1 [29] \pcpi_rs2 [29] $abc$24055$new_n9084:
      10010110 -> $abc$24055$new_n9085
  3-Input XOR/XNOR \pcpi_rs1 [30] \pcpi_rs2 [30] $abc$24055$new_n9107:
      01101001 -> $abc$24055$new_n9108
  3-Input XOR/XNOR \pcpi_rs1 [30] \pcpi_rs2 [30] $abc$24055$new_n9119:
      10010110 -> $abc$24055$new_n9120
  3-Input XOR/XNOR \pcpi_rs1 [31] \pcpi_rs2 [31] $abc$24055$new_n6399:
      10010110 -> $abc$24055$new_n9128
  3-Input XOR/XNOR \pcpi_rs1 [31] \pcpi_rs2 [31] $abc$24055$new_n9143:
      01101001 -> $abc$24055$new_n9144
  2-Input XOR/XNOR \mem_state [0] \mem_state [1]:
    1001 -> $abc$24055$auto$rtlil.cc:3016:NotGate$23560
    AND with inverted A B:
      0001 -> $abc$24055$new_n2193
      Created $fa cell $auto$extract_fa.cc:504:run$32218.
    AND with inverted A:
      0100 -> $abc$24055$new_n2187
      Created $fa cell $auto$extract_fa.cc:504:run$32229.
    AND with inverted B:
      0010 -> $abc$24055$new_n2188
      Created $fa cell $auto$extract_fa.cc:504:run$32235.
    AND without inversions:
      1000 -> $abc$24055$new_n2199
      Created $fa cell $auto$extract_fa.cc:504:run$32241.
  2-Input XOR/XNOR \decoded_imm_j [1] $auto$alumacc.cc:495:replace_alu$4402.A [0]:
    0110 -> $abc$24055$new_n4162
    AND without inversions:
      1000 -> $abc$24055$new_n4170
      Created $fa cell $auto$extract_fa.cc:504:run$32247.
  2-Input XOR/XNOR \decoded_imm_j [2] $auto$alumacc.cc:495:replace_alu$4396.B [0]:
    1001 -> $abc$24055$new_n4169
    AND with inverted Y:
      0111 -> $abc$24055$new_n4179
      Created $fa cell $auto$extract_fa.cc:504:run$32252.
  2-Input XOR/XNOR $abc$24055$new_n4170 $abc$24055$new_n4169:
    1001 -> $abc$24055$new_n4171
    AND with inverted B:
      0010 -> $abc$24055$new_n4180
      Created $fa cell $auto$extract_fa.cc:504:run$32261.
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [0] $auto$alumacc.cc:495:replace_alu$4396.B [1]:
    0110 -> $abc$24055$new_n4177
    AND without inversions:
      1000 -> $abc$24055$new_n4188
      Created $fa cell $auto$extract_fa.cc:504:run$32267.
  2-Input XOR/XNOR \decoded_imm_j [3] $auto$alumacc.cc:495:replace_alu$4396.B [1]:
    1001 -> $abc$24055$new_n4178
    AND with inverted Y:
      0111 -> $abc$24055$new_n4191
      Created $fa cell $auto$extract_fa.cc:504:run$32272.
  2-Input XOR/XNOR $abc$24055$new_n4181 $abc$24055$new_n4178:
    0110 -> $abc$24055$new_n4182
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [2] $abc$24055$new_n4188:
    0110 -> $abc$24055$new_n4189
  2-Input XOR/XNOR \decoded_imm_j [4] $auto$alumacc.cc:495:replace_alu$4396.B [2]:
    1001 -> $abc$24055$new_n4190
    AND with inverted Y:
      0111 -> $abc$24055$new_n4207
      Created $fa cell $auto$extract_fa.cc:504:run$32281.
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [2] $abc$24055$new_n3127:
    0110 -> $abc$24055$new_n4190
  2-Input XOR/XNOR $abc$24055$new_n4196 $abc$24055$new_n4190:
    0110 -> $abc$24055$new_n4197
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [3] $abc$24055$new_n4204:
    0110 -> $abc$24055$new_n4205
  2-Input XOR/XNOR \decoded_imm_j [5] $auto$alumacc.cc:495:replace_alu$4396.B [3]:
    1001 -> $abc$24055$new_n4206
    AND with inverted Y:
      0111 -> $abc$24055$new_n4223
      Created $fa cell $auto$extract_fa.cc:504:run$32290.
  2-Input XOR/XNOR $abc$24055$new_n4212 $abc$24055$new_n4206:
    1001 -> $abc$24055$new_n4213
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [4] $abc$24055$new_n4220:
    0110 -> $abc$24055$new_n4221
  2-Input XOR/XNOR \decoded_imm_j [6] $auto$alumacc.cc:495:replace_alu$4396.B [4]:
    1001 -> $abc$24055$new_n4222
    AND with inverted Y:
      0111 -> $abc$24055$new_n4243
      Created $fa cell $auto$extract_fa.cc:504:run$32299.
  2-Input XOR/XNOR $abc$24055$new_n4231 $abc$24055$new_n4222:
    1001 -> $abc$24055$new_n4232
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [5] $abc$24055$new_n4240:
    0110 -> $abc$24055$new_n4241
  2-Input XOR/XNOR \decoded_imm_j [7] $auto$alumacc.cc:495:replace_alu$4396.B [5]:
    1001 -> $abc$24055$new_n4242
    AND with inverted Y:
      0111 -> $abc$24055$new_n4263
      Created $fa cell $auto$extract_fa.cc:504:run$32308.
  2-Input XOR/XNOR $abc$24055$new_n4251 $abc$24055$new_n4242:
    1001 -> $abc$24055$new_n4252
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [6] $abc$24055$new_n4260:
    0110 -> $abc$24055$new_n4261
  2-Input XOR/XNOR \decoded_imm_j [8] $auto$alumacc.cc:495:replace_alu$4396.B [6]:
    1001 -> $abc$24055$new_n4262
    AND with inverted Y:
      0111 -> $abc$24055$new_n4283
      Created $fa cell $auto$extract_fa.cc:504:run$32317.
  2-Input XOR/XNOR $abc$24055$new_n4271 $abc$24055$new_n4262:
    1001 -> $abc$24055$new_n4272
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [7] $abc$24055$new_n4280:
    0110 -> $abc$24055$new_n4281
  2-Input XOR/XNOR \decoded_imm_j [9] $auto$alumacc.cc:495:replace_alu$4396.B [7]:
    1001 -> $abc$24055$new_n4282
    AND with inverted Y:
      0111 -> $abc$24055$new_n4303
      Created $fa cell $auto$extract_fa.cc:504:run$32326.
  2-Input XOR/XNOR $abc$24055$new_n4291 $abc$24055$new_n4282:
    1001 -> $abc$24055$new_n4292
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [8] $abc$24055$new_n4300:
    0110 -> $abc$24055$new_n4301
  2-Input XOR/XNOR \decoded_imm_j [10] $auto$alumacc.cc:495:replace_alu$4396.B [8]:
    1001 -> $abc$24055$new_n4302
    AND with inverted Y:
      0111 -> $abc$24055$new_n4327
      Created $fa cell $auto$extract_fa.cc:504:run$32335.
  2-Input XOR/XNOR $abc$24055$new_n4314 $abc$24055$new_n4302:
    0110 -> $abc$24055$new_n4315
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [9] $abc$24055$new_n4324:
    0110 -> $abc$24055$new_n4325
  2-Input XOR/XNOR \decoded_imm_j [11] $auto$alumacc.cc:495:replace_alu$4396.B [9]:
    1001 -> $abc$24055$new_n4326
    AND with inverted Y:
      0111 -> $abc$24055$new_n4352
      Created $fa cell $auto$extract_fa.cc:504:run$32344.
  2-Input XOR/XNOR $abc$24055$new_n4339 $abc$24055$new_n4326:
    0110 -> $abc$24055$new_n4340
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [10] $abc$24055$new_n4349:
    0110 -> $abc$24055$new_n4350
  2-Input XOR/XNOR \decoded_imm_j [12] $auto$alumacc.cc:495:replace_alu$4396.B [10]:
    1001 -> $abc$24055$new_n4351
    AND with inverted Y:
      0111 -> $abc$24055$new_n4376
      Created $fa cell $auto$extract_fa.cc:504:run$32353.
  2-Input XOR/XNOR $abc$24055$new_n4363 $abc$24055$new_n4351:
    0110 -> $abc$24055$new_n4364
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [11] $abc$24055$new_n4373:
    0110 -> $abc$24055$new_n4374
  2-Input XOR/XNOR \decoded_imm_j [13] $auto$alumacc.cc:495:replace_alu$4396.B [11]:
    1001 -> $abc$24055$new_n4375
    AND with inverted Y:
      0111 -> $abc$24055$new_n4400
      Created $fa cell $auto$extract_fa.cc:504:run$32362.
  2-Input XOR/XNOR $abc$24055$new_n4387 $abc$24055$new_n4375:
    0110 -> $abc$24055$new_n4388
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [12] $abc$24055$new_n4397:
    0110 -> $abc$24055$new_n4398
  2-Input XOR/XNOR \decoded_imm_j [14] $auto$alumacc.cc:495:replace_alu$4396.B [12]:
    1001 -> $abc$24055$new_n4399
    AND with inverted Y:
      0111 -> $abc$24055$new_n4424
      Created $fa cell $auto$extract_fa.cc:504:run$32371.
  2-Input XOR/XNOR $abc$24055$new_n4411 $abc$24055$new_n4399:
    0110 -> $abc$24055$new_n4412
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [13] $abc$24055$new_n4421:
    0110 -> $abc$24055$new_n4422
  2-Input XOR/XNOR \decoded_imm_j [15] $auto$alumacc.cc:495:replace_alu$4396.B [13]:
    1001 -> $abc$24055$new_n4423
    AND with inverted Y:
      0111 -> $abc$24055$new_n4448
      Created $fa cell $auto$extract_fa.cc:504:run$32380.
  2-Input XOR/XNOR $abc$24055$new_n4435 $abc$24055$new_n4423:
    0110 -> $abc$24055$new_n4436
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [14] $abc$24055$new_n4445:
    0110 -> $abc$24055$new_n4446
  2-Input XOR/XNOR \decoded_imm_j [16] $auto$alumacc.cc:495:replace_alu$4396.B [14]:
    1001 -> $abc$24055$new_n4447
    AND with inverted Y:
      0111 -> $abc$24055$new_n4472
      Created $fa cell $auto$extract_fa.cc:504:run$32389.
  2-Input XOR/XNOR $abc$24055$new_n4459 $abc$24055$new_n4447:
    0110 -> $abc$24055$new_n4460
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [15] $abc$24055$new_n4469:
    0110 -> $abc$24055$new_n4470
  2-Input XOR/XNOR \decoded_imm_j [17] $auto$alumacc.cc:495:replace_alu$4396.B [15]:
    1001 -> $abc$24055$new_n4471
    AND with inverted Y:
      0111 -> $abc$24055$new_n4496
      Created $fa cell $auto$extract_fa.cc:504:run$32398.
  2-Input XOR/XNOR $abc$24055$new_n4483 $abc$24055$new_n4471:
    0110 -> $abc$24055$new_n4484
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [16] $abc$24055$new_n4493:
    0110 -> $abc$24055$new_n4494
  2-Input XOR/XNOR \decoded_imm_j [18] $auto$alumacc.cc:495:replace_alu$4396.B [16]:
    1001 -> $abc$24055$new_n4495
    AND with inverted Y:
      0111 -> $abc$24055$new_n4525
      Created $fa cell $auto$extract_fa.cc:504:run$32407.
  2-Input XOR/XNOR $abc$24055$new_n4510 $abc$24055$new_n4495:
    0110 -> $abc$24055$new_n4511
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [17] $abc$24055$new_n4521:
    0110 -> $abc$24055$new_n4522
  2-Input XOR/XNOR \decoded_imm_j [19] $auto$alumacc.cc:495:replace_alu$4396.B [17]:
    1001 -> $abc$24055$new_n4524
    AND with inverted Y:
      0111 -> $abc$24055$new_n4554
      Created $fa cell $auto$extract_fa.cc:504:run$32416.
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [17] $abc$24055$new_n4523:
    0110 -> $abc$24055$new_n4524
  2-Input XOR/XNOR $abc$24055$new_n4539 $abc$24055$new_n4524:
    0110 -> $abc$24055$new_n4540
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [18] $abc$24055$new_n4550:
    0110 -> $abc$24055$new_n4551
  2-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [18]:
    1001 -> $abc$24055$new_n4553
    AND with inverted Y:
      0111 -> $abc$24055$new_n4582
      Created $fa cell $auto$extract_fa.cc:504:run$32425.
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [18] $abc$24055$new_n4552:
    0110 -> $abc$24055$new_n4553
  2-Input XOR/XNOR $abc$24055$new_n4568 $abc$24055$new_n4553:
    0110 -> $abc$24055$new_n4569
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [19] $abc$24055$new_n4579:
    0110 -> $abc$24055$new_n4580
  2-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [19]:
    1001 -> $abc$24055$new_n4581
    AND with inverted Y:
      0111 -> $abc$24055$new_n4610
      Created $fa cell $auto$extract_fa.cc:504:run$32434.
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [19] $abc$24055$new_n4552:
    0110 -> $abc$24055$new_n4581
  2-Input XOR/XNOR $abc$24055$new_n4596 $abc$24055$new_n4581:
    0110 -> $abc$24055$new_n4597
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [20] $abc$24055$new_n4607:
    0110 -> $abc$24055$new_n4608
  2-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [20]:
    1001 -> $abc$24055$new_n4609
    AND with inverted Y:
      0111 -> $abc$24055$new_n4638
      Created $fa cell $auto$extract_fa.cc:504:run$32443.
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [20] $abc$24055$new_n4552:
    0110 -> $abc$24055$new_n4609
  2-Input XOR/XNOR $abc$24055$new_n4624 $abc$24055$new_n4609:
    0110 -> $abc$24055$new_n4625
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [21] $abc$24055$new_n4635:
    0110 -> $abc$24055$new_n4636
  2-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [21]:
    1001 -> $abc$24055$new_n4637
    AND with inverted Y:
      0111 -> $abc$24055$new_n4666
      Created $fa cell $auto$extract_fa.cc:504:run$32452.
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [21] $abc$24055$new_n4552:
    0110 -> $abc$24055$new_n4637
  2-Input XOR/XNOR $abc$24055$new_n4652 $abc$24055$new_n4637:
    0110 -> $abc$24055$new_n4653
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [22] $abc$24055$new_n4663:
    0110 -> $abc$24055$new_n4664
  2-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [22]:
    1001 -> $abc$24055$new_n4665
    AND with inverted Y:
      0111 -> $abc$24055$new_n4694
      Created $fa cell $auto$extract_fa.cc:504:run$32461.
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [22] $abc$24055$new_n4552:
    0110 -> $abc$24055$new_n4665
  2-Input XOR/XNOR $abc$24055$new_n4680 $abc$24055$new_n4665:
    0110 -> $abc$24055$new_n4681
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [23] $abc$24055$new_n4691:
    0110 -> $abc$24055$new_n4692
  2-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [23]:
    1001 -> $abc$24055$new_n4693
    AND with inverted Y:
      0111 -> $abc$24055$new_n4722
      Created $fa cell $auto$extract_fa.cc:504:run$32470.
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [23] $abc$24055$new_n4552:
    0110 -> $abc$24055$new_n4693
  2-Input XOR/XNOR $abc$24055$new_n4708 $abc$24055$new_n4693:
    0110 -> $abc$24055$new_n4709
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [24] $abc$24055$new_n4719:
    0110 -> $abc$24055$new_n4720
  2-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [24]:
    1001 -> $abc$24055$new_n4721
    AND with inverted Y:
      0111 -> $abc$24055$new_n4750
      Created $fa cell $auto$extract_fa.cc:504:run$32479.
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [24] $abc$24055$new_n4552:
    0110 -> $abc$24055$new_n4721
  2-Input XOR/XNOR $abc$24055$new_n4736 $abc$24055$new_n4721:
    0110 -> $abc$24055$new_n4737
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [25] $abc$24055$new_n4747:
    0110 -> $abc$24055$new_n4748
  2-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [25]:
    1001 -> $abc$24055$new_n4749
    AND with inverted Y:
      0111 -> $abc$24055$new_n4778
      Created $fa cell $auto$extract_fa.cc:504:run$32488.
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [25] $abc$24055$new_n4552:
    0110 -> $abc$24055$new_n4749
  2-Input XOR/XNOR $abc$24055$new_n4764 $abc$24055$new_n4749:
    0110 -> $abc$24055$new_n4765
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [26] $abc$24055$new_n4775:
    0110 -> $abc$24055$new_n4776
  2-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [26]:
    1001 -> $abc$24055$new_n4777
    AND with inverted Y:
      0111 -> $abc$24055$new_n4806
      Created $fa cell $auto$extract_fa.cc:504:run$32497.
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [26] $abc$24055$new_n4552:
    0110 -> $abc$24055$new_n4777
  2-Input XOR/XNOR $abc$24055$new_n4792 $abc$24055$new_n4777:
    0110 -> $abc$24055$new_n4793
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [27] $abc$24055$new_n4803:
    0110 -> $abc$24055$new_n4804
  2-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [27]:
    1001 -> $abc$24055$new_n4805
    AND with inverted Y:
      0111 -> $abc$24055$new_n4834
      Created $fa cell $auto$extract_fa.cc:504:run$32506.
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [27] $abc$24055$new_n4552:
    0110 -> $abc$24055$new_n4805
  2-Input XOR/XNOR $abc$24055$new_n4820 $abc$24055$new_n4805:
    0110 -> $abc$24055$new_n4821
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [28] $abc$24055$new_n4831:
    0110 -> $abc$24055$new_n4832
  2-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [28]:
    1001 -> $abc$24055$new_n4833
    AND with inverted Y:
      0111 -> $abc$24055$new_n4862
      Created $fa cell $auto$extract_fa.cc:504:run$32515.
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [28] $abc$24055$new_n4552:
    0110 -> $abc$24055$new_n4833
  2-Input XOR/XNOR $abc$24055$new_n4848 $abc$24055$new_n4833:
    0110 -> $abc$24055$new_n4849
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [29] $abc$24055$new_n4859:
    0110 -> $abc$24055$new_n4860
  2-Input XOR/XNOR \decoded_imm_j [31] $auto$alumacc.cc:495:replace_alu$4396.B [29]:
    1001 -> $abc$24055$new_n4861
  2-Input XOR/XNOR $auto$alumacc.cc:495:replace_alu$4396.B [29] $abc$24055$new_n4552:
    0110 -> $abc$24055$new_n4861
  2-Input XOR/XNOR $abc$24055$new_n4876 $abc$24055$new_n4861:
    0110 -> $abc$24055$new_n4877
  2-Input XOR/XNOR \reg_pc [2] \reg_pc [3]:
    0110 -> $abc$24055$new_n4886
    AND without inversions:
      1000 -> $abc$24055$new_n4888
      Created $fa cell $auto$extract_fa.cc:504:run$32524.
  2-Input XOR/XNOR \reg_pc [4] $abc$24055$new_n4888:
    0110 -> $abc$24055$new_n4889
  2-Input XOR/XNOR \reg_pc [5] $abc$24055$new_n4892:
    0110 -> $abc$24055$new_n4893
  2-Input XOR/XNOR \reg_pc [6] $abc$24055$new_n4896:
    0110 -> $abc$24055$new_n4897
  2-Input XOR/XNOR \reg_pc [7] $abc$24055$new_n4901:
    0110 -> $abc$24055$new_n4902
  2-Input XOR/XNOR \reg_pc [8] $abc$24055$new_n4906:
    0110 -> $abc$24055$new_n4907
  2-Input XOR/XNOR \reg_pc [9] $abc$24055$new_n4911:
    0110 -> $abc$24055$new_n4912
  2-Input XOR/XNOR \reg_pc [10] $abc$24055$new_n4916:
    0110 -> $abc$24055$new_n4917
  2-Input XOR/XNOR \reg_pc [11] $abc$24055$new_n4922:
    0110 -> $abc$24055$new_n4923
  2-Input XOR/XNOR \reg_pc [12] $abc$24055$new_n4928:
    0110 -> $abc$24055$new_n4929
  2-Input XOR/XNOR \reg_pc [13] $abc$24055$new_n4934:
    0110 -> $abc$24055$new_n4935
  2-Input XOR/XNOR \reg_pc [14] $abc$24055$new_n4940:
    0110 -> $abc$24055$new_n4941
  2-Input XOR/XNOR \reg_pc [15] $abc$24055$new_n4946:
    0110 -> $abc$24055$new_n4947
  2-Input XOR/XNOR \reg_pc [16] $abc$24055$new_n4952:
    0110 -> $abc$24055$new_n4953
  2-Input XOR/XNOR \reg_pc [17] $abc$24055$new_n4958:
    0110 -> $abc$24055$new_n4959
  2-Input XOR/XNOR \reg_pc [18] $abc$24055$new_n4964:
    0110 -> $abc$24055$new_n4965
  2-Input XOR/XNOR \reg_pc [19] $abc$24055$new_n4971:
    0110 -> $abc$24055$new_n4972
  2-Input XOR/XNOR \reg_pc [20] $abc$24055$new_n4978:
    0110 -> $abc$24055$new_n4979
  2-Input XOR/XNOR \reg_pc [21] $abc$24055$new_n4985:
    0110 -> $abc$24055$new_n4986
  2-Input XOR/XNOR \reg_pc [22] $abc$24055$new_n4992:
    0110 -> $abc$24055$new_n4993
  2-Input XOR/XNOR \reg_pc [23] $abc$24055$new_n4999:
    0110 -> $abc$24055$new_n5000
  2-Input XOR/XNOR \reg_pc [24] $abc$24055$new_n5006:
    0110 -> $abc$24055$new_n5007
  2-Input XOR/XNOR \reg_pc [25] $abc$24055$new_n5013:
    0110 -> $abc$24055$new_n5014
  2-Input XOR/XNOR \reg_pc [26] $abc$24055$new_n5020:
    0110 -> $abc$24055$new_n5021
  2-Input XOR/XNOR \reg_pc [27] $abc$24055$new_n5027:
    0110 -> $abc$24055$new_n5028
  2-Input XOR/XNOR \reg_pc [28] $abc$24055$new_n5034:
    0110 -> $abc$24055$new_n5035
  2-Input XOR/XNOR \reg_pc [29] $abc$24055$new_n5041:
    0110 -> $abc$24055$new_n5042
  2-Input XOR/XNOR \reg_pc [30] $abc$24055$new_n5048:
    0110 -> $abc$24055$new_n5049
  2-Input XOR/XNOR \reg_pc [31] $abc$24055$new_n5055:
    0110 -> $abc$24055$new_n5056
  2-Input XOR/XNOR \reg_pc [1] \decoded_imm [1]:
    1001 -> $abc$24055$new_n5141
    AND without inversions:
      1000 -> $abc$24055$new_n5167
      Created $fa cell $auto$extract_fa.cc:504:run$32529.
  2-Input XOR/XNOR \reg_pc [2] \decoded_imm [2]:
    1001 -> $abc$24055$new_n5166
    AND with inverted Y:
      0111 -> $abc$24055$new_n5194
      Created $fa cell $auto$extract_fa.cc:504:run$32536.
  2-Input XOR/XNOR $abc$24055$new_n5167 $abc$24055$new_n5166:
    0110 -> $abc$24055$new_n5168
    AND with inverted B:
      0010 -> $abc$24055$new_n5195
      Created $fa cell $auto$extract_fa.cc:504:run$32545.
  2-Input XOR/XNOR \reg_pc [3] \decoded_imm [3]:
    1001 -> $abc$24055$new_n5193
    AND with inverted Y:
      0111 -> $abc$24055$new_n5223
      Created $fa cell $auto$extract_fa.cc:504:run$32553.
  2-Input XOR/XNOR $abc$24055$new_n5196 $abc$24055$new_n5193:
    1001 -> $abc$24055$new_n5197
  2-Input XOR/XNOR \reg_pc [4] \decoded_imm [4]:
    1001 -> $abc$24055$new_n5222
    AND with inverted Y:
      0111 -> $abc$24055$new_n5255
      Created $fa cell $auto$extract_fa.cc:504:run$32562.
  2-Input XOR/XNOR $abc$24055$new_n5228 $abc$24055$new_n5222:
    1001 -> $abc$24055$new_n5229
  2-Input XOR/XNOR \reg_pc [5] \decoded_imm [5]:
    1001 -> $abc$24055$new_n5254
    AND with inverted Y:
      0111 -> $abc$24055$new_n5287
      Created $fa cell $auto$extract_fa.cc:504:run$32571.
  2-Input XOR/XNOR $abc$24055$new_n5260 $abc$24055$new_n5254:
    1001 -> $abc$24055$new_n5261
  2-Input XOR/XNOR \reg_pc [6] \decoded_imm [6]:
    1001 -> $abc$24055$new_n5286
    AND with inverted Y:
      0111 -> $abc$24055$new_n5322
      Created $fa cell $auto$extract_fa.cc:504:run$32580.
  2-Input XOR/XNOR $abc$24055$new_n5295 $abc$24055$new_n5286:
    0110 -> $abc$24055$new_n5296
  2-Input XOR/XNOR \reg_pc [7] \decoded_imm [7]:
    1001 -> $abc$24055$new_n5321
    AND with inverted Y:
      0111 -> $abc$24055$new_n5354
      Created $fa cell $auto$extract_fa.cc:504:run$32589.
  2-Input XOR/XNOR $abc$24055$new_n5330 $abc$24055$new_n5321:
    0110 -> $abc$24055$new_n5331
  2-Input XOR/XNOR \reg_pc [8] \decoded_imm [8]:
    1001 -> $abc$24055$new_n5353
    AND with inverted Y:
      0111 -> $abc$24055$new_n5384
      Created $fa cell $auto$extract_fa.cc:504:run$32598.
  2-Input XOR/XNOR $abc$24055$new_n5362 $abc$24055$new_n5353:
    0110 -> $abc$24055$new_n5363
  2-Input XOR/XNOR \reg_pc [9] \decoded_imm [9]:
    1001 -> $abc$24055$new_n5383
    AND with inverted Y:
      0111 -> $abc$24055$new_n5414
      Created $fa cell $auto$extract_fa.cc:504:run$32607.
  2-Input XOR/XNOR $abc$24055$new_n5392 $abc$24055$new_n5383:
    0110 -> $abc$24055$new_n5393
  2-Input XOR/XNOR \reg_pc [10] \decoded_imm [10]:
    1001 -> $abc$24055$new_n5413
    AND with inverted Y:
      0111 -> $abc$24055$new_n5447
      Created $fa cell $auto$extract_fa.cc:504:run$32616.
  2-Input XOR/XNOR $abc$24055$new_n5425 $abc$24055$new_n5413:
    1001 -> $abc$24055$new_n5426
  2-Input XOR/XNOR \reg_pc [11] \decoded_imm [11]:
    1001 -> $abc$24055$new_n5446
    AND with inverted Y:
      0111 -> $abc$24055$new_n5481
      Created $fa cell $auto$extract_fa.cc:504:run$32625.
  2-Input XOR/XNOR $abc$24055$new_n5459 $abc$24055$new_n5446:
    1001 -> $abc$24055$new_n5460
  2-Input XOR/XNOR \reg_pc [12] \decoded_imm [12]:
    1001 -> $abc$24055$new_n5480
    AND with inverted Y:
      0111 -> $abc$24055$new_n5514
      Created $fa cell $auto$extract_fa.cc:504:run$32634.
  2-Input XOR/XNOR $abc$24055$new_n5492 $abc$24055$new_n5480:
    1001 -> $abc$24055$new_n5493
  2-Input XOR/XNOR \reg_pc [13] \decoded_imm [13]:
    1001 -> $abc$24055$new_n5513
    AND with inverted Y:
      0111 -> $abc$24055$new_n5547
      Created $fa cell $auto$extract_fa.cc:504:run$32643.
  2-Input XOR/XNOR $abc$24055$new_n5525 $abc$24055$new_n5513:
    1001 -> $abc$24055$new_n5526
  2-Input XOR/XNOR \reg_pc [14] \decoded_imm [14]:
    1001 -> $abc$24055$new_n5546
    AND with inverted Y:
      0111 -> $abc$24055$new_n5581
      Created $fa cell $auto$extract_fa.cc:504:run$32652.
  2-Input XOR/XNOR $abc$24055$new_n5558 $abc$24055$new_n5546:
    1001 -> $abc$24055$new_n5559
  2-Input XOR/XNOR \reg_pc [15] \decoded_imm [15]:
    1001 -> $abc$24055$new_n5580
    AND with inverted Y:
      0111 -> $abc$24055$new_n5609
      Created $fa cell $auto$extract_fa.cc:504:run$32661.
  2-Input XOR/XNOR $abc$24055$new_n5592 $abc$24055$new_n5580:
    1001 -> $abc$24055$new_n5593
  2-Input XOR/XNOR \reg_pc [16] \decoded_imm [16]:
    1001 -> $abc$24055$new_n5608
    AND with inverted Y:
      0111 -> $abc$24055$new_n5637
      Created $fa cell $auto$extract_fa.cc:504:run$32670.
  2-Input XOR/XNOR $abc$24055$new_n5620 $abc$24055$new_n5608:
    0110 -> $abc$24055$new_n5621
  2-Input XOR/XNOR \reg_pc [17] \decoded_imm [17]:
    1001 -> $abc$24055$new_n5636
    AND with inverted Y:
      0111 -> $abc$24055$new_n5665
      Created $fa cell $auto$extract_fa.cc:504:run$32679.
  2-Input XOR/XNOR $abc$24055$new_n5648 $abc$24055$new_n5636:
    0110 -> $abc$24055$new_n5649
  2-Input XOR/XNOR \reg_pc [18] \decoded_imm [18]:
    1001 -> $abc$24055$new_n5664
    AND with inverted Y:
      0111 -> $abc$24055$new_n5696
      Created $fa cell $auto$extract_fa.cc:504:run$32688.
  2-Input XOR/XNOR $abc$24055$new_n5679 $abc$24055$new_n5664:
    0110 -> $abc$24055$new_n5680
  2-Input XOR/XNOR \reg_pc [19] \decoded_imm [19]:
    1001 -> $abc$24055$new_n5695
    AND with inverted Y:
      0111 -> $abc$24055$new_n5727
      Created $fa cell $auto$extract_fa.cc:504:run$32697.
  2-Input XOR/XNOR $abc$24055$new_n5710 $abc$24055$new_n5695:
    0110 -> $abc$24055$new_n5711
  2-Input XOR/XNOR \reg_pc [20] \decoded_imm [20]:
    1001 -> $abc$24055$new_n5726
    AND with inverted Y:
      0111 -> $abc$24055$new_n5758
      Created $fa cell $auto$extract_fa.cc:504:run$32706.
  2-Input XOR/XNOR $abc$24055$new_n5741 $abc$24055$new_n5726:
    0110 -> $abc$24055$new_n5742
  2-Input XOR/XNOR \reg_pc [21] \decoded_imm [21]:
    1001 -> $abc$24055$new_n5757
    AND with inverted Y:
      0111 -> $abc$24055$new_n5789
      Created $fa cell $auto$extract_fa.cc:504:run$32715.
  2-Input XOR/XNOR $abc$24055$new_n5772 $abc$24055$new_n5757:
    0110 -> $abc$24055$new_n5773
  2-Input XOR/XNOR \reg_pc [22] \decoded_imm [22]:
    1001 -> $abc$24055$new_n5788
    AND with inverted Y:
      0111 -> $abc$24055$new_n5820
      Created $fa cell $auto$extract_fa.cc:504:run$32724.
  2-Input XOR/XNOR $abc$24055$new_n5803 $abc$24055$new_n5788:
    0110 -> $abc$24055$new_n5804
  2-Input XOR/XNOR \reg_pc [23] \decoded_imm [23]:
    1001 -> $abc$24055$new_n5819
    AND with inverted Y:
      0111 -> $abc$24055$new_n5851
      Created $fa cell $auto$extract_fa.cc:504:run$32733.
  2-Input XOR/XNOR $abc$24055$new_n5834 $abc$24055$new_n5819:
    0110 -> $abc$24055$new_n5835
  2-Input XOR/XNOR \reg_pc [24] \decoded_imm [24]:
    1001 -> $abc$24055$new_n5850
    AND with inverted Y:
      0111 -> $abc$24055$new_n5882
      Created $fa cell $auto$extract_fa.cc:504:run$32742.
  2-Input XOR/XNOR $abc$24055$new_n5865 $abc$24055$new_n5850:
    0110 -> $abc$24055$new_n5866
  2-Input XOR/XNOR \reg_pc [25] \decoded_imm [25]:
    1001 -> $abc$24055$new_n5881
    AND with inverted Y:
      0111 -> $abc$24055$new_n5913
      Created $fa cell $auto$extract_fa.cc:504:run$32751.
  2-Input XOR/XNOR $abc$24055$new_n5896 $abc$24055$new_n5881:
    0110 -> $abc$24055$new_n5897
  2-Input XOR/XNOR \reg_pc [26] \decoded_imm [26]:
    1001 -> $abc$24055$new_n5912
    AND with inverted Y:
      0111 -> $abc$24055$new_n5944
      Created $fa cell $auto$extract_fa.cc:504:run$32760.
  2-Input XOR/XNOR $abc$24055$new_n5927 $abc$24055$new_n5912:
    0110 -> $abc$24055$new_n5928
  2-Input XOR/XNOR \reg_pc [27] \decoded_imm [27]:
    1001 -> $abc$24055$new_n5943
    AND with inverted Y:
      0111 -> $abc$24055$new_n5975
      Created $fa cell $auto$extract_fa.cc:504:run$32769.
  2-Input XOR/XNOR $abc$24055$new_n5958 $abc$24055$new_n5943:
    0110 -> $abc$24055$new_n5959
  2-Input XOR/XNOR \reg_pc [28] \decoded_imm [28]:
    1001 -> $abc$24055$new_n5974
    AND with inverted Y:
      0111 -> $abc$24055$new_n6006
      Created $fa cell $auto$extract_fa.cc:504:run$32778.
  2-Input XOR/XNOR $abc$24055$new_n5989 $abc$24055$new_n5974:
    0110 -> $abc$24055$new_n5990
  2-Input XOR/XNOR \reg_pc [29] \decoded_imm [29]:
    1001 -> $abc$24055$new_n6005
    AND with inverted Y:
      0111 -> $abc$24055$new_n6037
      Created $fa cell $auto$extract_fa.cc:504:run$32787.
  2-Input XOR/XNOR $abc$24055$new_n6020 $abc$24055$new_n6005:
    0110 -> $abc$24055$new_n6021
  2-Input XOR/XNOR \reg_pc [30] \decoded_imm [30]:
    1001 -> $abc$24055$new_n6036
    AND with inverted Y:
      0111 -> $abc$24055$new_n6068
      Created $fa cell $auto$extract_fa.cc:504:run$32796.
  2-Input XOR/XNOR $abc$24055$new_n6051 $abc$24055$new_n6036:
    0110 -> $abc$24055$new_n6052
  2-Input XOR/XNOR \reg_pc [31] \decoded_imm [31]:
    0110 -> $abc$24055$new_n6067
  2-Input XOR/XNOR $abc$24055$new_n6082 $abc$24055$new_n6067:
    0110 -> $abc$24055$new_n6083
  2-Input XOR/XNOR \mem_la_wdata [1] \pcpi_rs1 [1]:
    1001 -> $abc$24055$new_n6091
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n8320
      Created $fa cell $auto$extract_fa.cc:504:run$32805.
    AND with inverted A Y:
      1011 -> $abc$24055$new_n6299
      Created $fa cell $auto$extract_fa.cc:504:run$32818.
    AND without inversions:
      1000 -> $abc$24055$new_n8318
      Created $fa cell $auto$extract_fa.cc:504:run$32826.
  2-Input XOR/XNOR $abc$24055$new_n6310 $abc$24055$new_n6151:
    1001 -> $abc$24055$new_n6400
  2-Input XOR/XNOR $abc$24055$new_n6312 $abc$24055$new_n6310:
    0110 -> $abc$24055$new_n6400
  2-Input XOR/XNOR \pcpi_rs1 [0] \decoded_imm [0]:
    0110 -> $abc$24055$new_n6458
    AND without inversions:
      1000 -> $abc$24055$new_n6509
      Created $fa cell $auto$extract_fa.cc:504:run$32832.
  2-Input XOR/XNOR \pcpi_rs1 [1] \decoded_imm [1]:
    1001 -> $abc$24055$new_n6508
    AND with inverted Y:
      0111 -> $abc$24055$new_n6562
      Created $fa cell $auto$extract_fa.cc:504:run$32837.
  2-Input XOR/XNOR $abc$24055$new_n6509 $abc$24055$new_n6508:
    0110 -> $abc$24055$new_n6510
    AND with inverted B:
      0010 -> $abc$24055$new_n6563
      Created $fa cell $auto$extract_fa.cc:504:run$32846.
  2-Input XOR/XNOR \pcpi_rs1 [2] \decoded_imm [2]:
    1001 -> $abc$24055$new_n6561
    AND with inverted Y:
      0111 -> $abc$24055$new_n6616
      Created $fa cell $auto$extract_fa.cc:504:run$32854.
  2-Input XOR/XNOR $abc$24055$new_n6561 $abc$24055$new_n6564:
    1001 -> $abc$24055$new_n6565
  2-Input XOR/XNOR \pcpi_rs1 [3] \decoded_imm [3]:
    1001 -> $abc$24055$new_n6615
    AND with inverted Y:
      0111 -> $abc$24055$new_n6669
      Created $fa cell $auto$extract_fa.cc:504:run$32863.
  2-Input XOR/XNOR $abc$24055$new_n6621 $abc$24055$new_n6615:
    1001 -> $abc$24055$new_n6622
  2-Input XOR/XNOR \pcpi_rs1 [4] \decoded_imm [4]:
    1001 -> $abc$24055$new_n6668
    AND with inverted Y:
      0111 -> $abc$24055$new_n6722
      Created $fa cell $auto$extract_fa.cc:504:run$32872.
  2-Input XOR/XNOR $abc$24055$new_n6674 $abc$24055$new_n6668:
    1001 -> $abc$24055$new_n6675
  2-Input XOR/XNOR \pcpi_rs1 [5] \decoded_imm [5]:
    1001 -> $abc$24055$new_n6721
    AND with inverted Y:
      0111 -> $abc$24055$new_n6778
      Created $fa cell $auto$extract_fa.cc:504:run$32881.
  2-Input XOR/XNOR $abc$24055$new_n6721 $abc$24055$new_n6730:
    0110 -> $abc$24055$new_n6731
  2-Input XOR/XNOR \pcpi_rs1 [6] \decoded_imm [6]:
    1001 -> $abc$24055$new_n6777
    AND with inverted Y:
      0111 -> $abc$24055$new_n6834
      Created $fa cell $auto$extract_fa.cc:504:run$32890.
  2-Input XOR/XNOR $abc$24055$new_n6786 $abc$24055$new_n6777:
    0110 -> $abc$24055$new_n6787
  2-Input XOR/XNOR \pcpi_rs1 [7] \decoded_imm [7]:
    1001 -> $abc$24055$new_n6833
    AND with inverted Y:
      0111 -> $abc$24055$new_n6890
      Created $fa cell $auto$extract_fa.cc:504:run$32899.
  2-Input XOR/XNOR $abc$24055$new_n6842 $abc$24055$new_n6833:
    0110 -> $abc$24055$new_n6843
  2-Input XOR/XNOR \pcpi_rs1 [8] \decoded_imm [8]:
    1001 -> $abc$24055$new_n6889
    AND with inverted Y:
      0111 -> $abc$24055$new_n6946
      Created $fa cell $auto$extract_fa.cc:504:run$32908.
  2-Input XOR/XNOR $abc$24055$new_n6889 $abc$24055$new_n6898:
    0110 -> $abc$24055$new_n6899
  2-Input XOR/XNOR \pcpi_rs1 [9] \decoded_imm [9]:
    1001 -> $abc$24055$new_n6945
    AND with inverted Y:
      0111 -> $abc$24055$new_n7005
      Created $fa cell $auto$extract_fa.cc:504:run$32917.
  2-Input XOR/XNOR $abc$24055$new_n6957 $abc$24055$new_n6945:
    1001 -> $abc$24055$new_n6958
  2-Input XOR/XNOR \pcpi_rs1 [10] \decoded_imm [10]:
    1001 -> $abc$24055$new_n7004
    AND with inverted Y:
      0111 -> $abc$24055$new_n7065
      Created $fa cell $auto$extract_fa.cc:504:run$32926.
  2-Input XOR/XNOR $abc$24055$new_n7017 $abc$24055$new_n7004:
    1001 -> $abc$24055$new_n7018
  2-Input XOR/XNOR \pcpi_rs1 [11] \decoded_imm [11]:
    1001 -> $abc$24055$new_n7064
    AND with inverted Y:
      0111 -> $abc$24055$new_n7124
      Created $fa cell $auto$extract_fa.cc:504:run$32935.
  2-Input XOR/XNOR $abc$24055$new_n7076 $abc$24055$new_n7064:
    1001 -> $abc$24055$new_n7077
  2-Input XOR/XNOR \pcpi_rs1 [12] \decoded_imm [12]:
    1001 -> $abc$24055$new_n7123
    AND with inverted Y:
      0111 -> $abc$24055$new_n7183
      Created $fa cell $auto$extract_fa.cc:504:run$32944.
  2-Input XOR/XNOR $abc$24055$new_n7135 $abc$24055$new_n7123:
    1001 -> $abc$24055$new_n7136
  2-Input XOR/XNOR \pcpi_rs1 [13] \decoded_imm [13]:
    1001 -> $abc$24055$new_n7182
    AND with inverted Y:
      0111 -> $abc$24055$new_n7242
      Created $fa cell $auto$extract_fa.cc:504:run$32953.
  2-Input XOR/XNOR $abc$24055$new_n7194 $abc$24055$new_n7182:
    1001 -> $abc$24055$new_n7195
  2-Input XOR/XNOR \pcpi_rs1 [14] \decoded_imm [14]:
    1001 -> $abc$24055$new_n7241
    AND with inverted Y:
      0111 -> $abc$24055$new_n7301
      Created $fa cell $auto$extract_fa.cc:504:run$32962.
  2-Input XOR/XNOR $abc$24055$new_n7253 $abc$24055$new_n7241:
    1001 -> $abc$24055$new_n7254
  2-Input XOR/XNOR \pcpi_rs1 [15] \decoded_imm [15]:
    1001 -> $abc$24055$new_n7300
    AND with inverted Y:
      0111 -> $abc$24055$new_n7360
      Created $fa cell $auto$extract_fa.cc:504:run$32971.
  2-Input XOR/XNOR $abc$24055$new_n7312 $abc$24055$new_n7300:
    1001 -> $abc$24055$new_n7313
  2-Input XOR/XNOR \pcpi_rs1 [16] \decoded_imm [16]:
    1001 -> $abc$24055$new_n7359
    AND with inverted Y:
      0111 -> $abc$24055$new_n7419
      Created $fa cell $auto$extract_fa.cc:504:run$32980.
  2-Input XOR/XNOR $abc$24055$new_n7359 $abc$24055$new_n7371:
    0110 -> $abc$24055$new_n7372
  2-Input XOR/XNOR \pcpi_rs1 [17] \decoded_imm [17]:
    1001 -> $abc$24055$new_n7418
    AND with inverted Y:
      0111 -> $abc$24055$new_n7481
      Created $fa cell $auto$extract_fa.cc:504:run$32989.
  2-Input XOR/XNOR $abc$24055$new_n7433 $abc$24055$new_n7418:
    0110 -> $abc$24055$new_n7434
  2-Input XOR/XNOR \pcpi_rs1 [18] \decoded_imm [18]:
    1001 -> $abc$24055$new_n7480
    AND with inverted Y:
      0111 -> $abc$24055$new_n7543
      Created $fa cell $auto$extract_fa.cc:504:run$32998.
  2-Input XOR/XNOR $abc$24055$new_n7495 $abc$24055$new_n7480:
    0110 -> $abc$24055$new_n7496
  2-Input XOR/XNOR \pcpi_rs1 [19] \decoded_imm [19]:
    1001 -> $abc$24055$new_n7542
    AND with inverted Y:
      0111 -> $abc$24055$new_n7605
      Created $fa cell $auto$extract_fa.cc:504:run$33007.
  2-Input XOR/XNOR $abc$24055$new_n7557 $abc$24055$new_n7542:
    0110 -> $abc$24055$new_n7558
  2-Input XOR/XNOR \pcpi_rs1 [20] \decoded_imm [20]:
    1001 -> $abc$24055$new_n7604
    AND with inverted Y:
      0111 -> $abc$24055$new_n7667
      Created $fa cell $auto$extract_fa.cc:504:run$33016.
  2-Input XOR/XNOR $abc$24055$new_n7619 $abc$24055$new_n7604:
    0110 -> $abc$24055$new_n7620
  2-Input XOR/XNOR \pcpi_rs1 [21] \decoded_imm [21]:
    1001 -> $abc$24055$new_n7666
    AND with inverted Y:
      0111 -> $abc$24055$new_n7729
      Created $fa cell $auto$extract_fa.cc:504:run$33025.
  2-Input XOR/XNOR $abc$24055$new_n7681 $abc$24055$new_n7666:
    0110 -> $abc$24055$new_n7682
  2-Input XOR/XNOR \pcpi_rs1 [22] \decoded_imm [22]:
    1001 -> $abc$24055$new_n7728
    AND with inverted Y:
      0111 -> $abc$24055$new_n7791
      Created $fa cell $auto$extract_fa.cc:504:run$33034.
  2-Input XOR/XNOR $abc$24055$new_n7743 $abc$24055$new_n7728:
    0110 -> $abc$24055$new_n7744
  2-Input XOR/XNOR \pcpi_rs1 [23] \decoded_imm [23]:
    1001 -> $abc$24055$new_n7790
    AND with inverted Y:
      0111 -> $abc$24055$new_n7853
      Created $fa cell $auto$extract_fa.cc:504:run$33043.
  2-Input XOR/XNOR $abc$24055$new_n7790 $abc$24055$new_n7805:
    0110 -> $abc$24055$new_n7806
  2-Input XOR/XNOR \pcpi_rs1 [24] \decoded_imm [24]:
    1001 -> $abc$24055$new_n7852
    AND with inverted Y:
      0111 -> $abc$24055$new_n7915
      Created $fa cell $auto$extract_fa.cc:504:run$33052.
  2-Input XOR/XNOR $abc$24055$new_n7867 $abc$24055$new_n7852:
    0110 -> $abc$24055$new_n7868
  2-Input XOR/XNOR \pcpi_rs1 [25] \decoded_imm [25]:
    1001 -> $abc$24055$new_n7914
    AND with inverted Y:
      0111 -> $abc$24055$new_n7977
      Created $fa cell $auto$extract_fa.cc:504:run$33061.
  2-Input XOR/XNOR $abc$24055$new_n7929 $abc$24055$new_n7914:
    0110 -> $abc$24055$new_n7930
  2-Input XOR/XNOR \pcpi_rs1 [26] \decoded_imm [26]:
    1001 -> $abc$24055$new_n7976
    AND with inverted Y:
      0111 -> $abc$24055$new_n8038
      Created $fa cell $auto$extract_fa.cc:504:run$33070.
  2-Input XOR/XNOR $abc$24055$new_n7991 $abc$24055$new_n7976:
    0110 -> $abc$24055$new_n7992
  2-Input XOR/XNOR \pcpi_rs1 [27] \decoded_imm [27]:
    1001 -> $abc$24055$new_n8037
    AND with inverted Y:
      0111 -> $abc$24055$new_n8099
      Created $fa cell $auto$extract_fa.cc:504:run$33079.
  2-Input XOR/XNOR $abc$24055$new_n8052 $abc$24055$new_n8037:
    0110 -> $abc$24055$new_n8053
  2-Input XOR/XNOR \pcpi_rs1 [28] \decoded_imm [28]:
    1001 -> $abc$24055$new_n8098
    AND with inverted Y:
      0111 -> $abc$24055$new_n8157
      Created $fa cell $auto$extract_fa.cc:504:run$33088.
  2-Input XOR/XNOR $abc$24055$new_n8113 $abc$24055$new_n8098:
    0110 -> $abc$24055$new_n8114
  2-Input XOR/XNOR \pcpi_rs1 [29] \decoded_imm [29]:
    1001 -> $abc$24055$new_n8156
    AND with inverted Y:
      0111 -> $abc$24055$new_n8215
      Created $fa cell $auto$extract_fa.cc:504:run$33097.
  2-Input XOR/XNOR $abc$24055$new_n8171 $abc$24055$new_n8156:
    0110 -> $abc$24055$new_n8172
  2-Input XOR/XNOR \pcpi_rs1 [30] \decoded_imm [30]:
    1001 -> $abc$24055$new_n8214
    AND with inverted Y:
      0111 -> $abc$24055$new_n8273
      Created $fa cell $auto$extract_fa.cc:504:run$33106.
  2-Input XOR/XNOR $abc$24055$new_n8229 $abc$24055$new_n8214:
    0110 -> $abc$24055$new_n8230
  2-Input XOR/XNOR \pcpi_rs1 [31] \decoded_imm [31]:
    0110 -> $abc$24055$new_n8272
  2-Input XOR/XNOR $abc$24055$new_n8287 $abc$24055$new_n8272:
    0110 -> $abc$24055$new_n8288
  2-Input XOR/XNOR \mem_la_wdata [0] \pcpi_rs1 [0]:
    0110 -> $abc$24055$new_n6090 $abc$24055$new_n8296
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6088
      Created $fa cell $auto$extract_fa.cc:504:run$33115.
    AND with inverted B:
      0010 -> $abc$24055$new_n6300
      Created $fa cell $auto$extract_fa.cc:504:run$33127.
    AND without inversions:
      1000 -> $abc$24055$new_n6089
      Created $fa cell $auto$extract_fa.cc:504:run$33135.
  2-Input XOR/XNOR $abc$24055$new_n6091 $abc$24055$new_n6089:
    1001 -> $abc$24055$new_n8315
    AND with inverted A:
      0100 -> $abc$24055$new_n8327
      Created $fa cell $auto$extract_fa.cc:504:run$33139.
  2-Input XOR/XNOR $abc$24055$new_n6300 $abc$24055$new_n6091:
    1001 -> $abc$24055$new_n8316
    AND with inverted A:
      0100 -> $abc$24055$new_n6301
      Created $fa cell $auto$extract_fa.cc:504:run$33145.
  2-Input XOR/XNOR \mem_la_wdata [2] \pcpi_rs1 [2]:
    0110 -> $abc$24055$new_n6098
    1001 -> $abc$24055$new_n8326
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6096
      Created $fa cell $auto$extract_fa.cc:504:run$33151.
    AND with inverted A Y:
      1011 -> $abc$24055$new_n6296
      Created $fa cell $auto$extract_fa.cc:504:run$33165.
    AND without inversions:
      1000 -> $abc$24055$new_n6097
      Created $fa cell $auto$extract_fa.cc:504:run$33175.
  2-Input XOR/XNOR $abc$24055$new_n8328 $abc$24055$new_n8326:
    0110 -> $abc$24055$new_n8329
  2-Input XOR/XNOR $abc$24055$new_n6302 $abc$24055$new_n6098:
    0110 -> $abc$24055$new_n8330
  2-Input XOR/XNOR \mem_la_wdata [3] \pcpi_rs1 [3]:
    1001 -> $abc$24055$new_n6095 $abc$24055$new_n8338
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6093
      Created $fa cell $auto$extract_fa.cc:504:run$33181.
    AND with inverted A Y:
      1011 -> $abc$24055$new_n6295
      Created $fa cell $auto$extract_fa.cc:504:run$33195.
    AND without inversions:
      1000 -> $abc$24055$new_n6094
      Created $fa cell $auto$extract_fa.cc:504:run$33203.
  2-Input XOR/XNOR $abc$24055$new_n8343 $abc$24055$new_n8338:
    1001 -> $abc$24055$new_n8344
  2-Input XOR/XNOR $abc$24055$new_n6393 $abc$24055$new_n6095:
    1001 -> $abc$24055$new_n8345
  2-Input XOR/XNOR \mem_la_wdata [4] \pcpi_rs1 [4]:
    0110 -> $abc$24055$new_n6113
    1001 -> $abc$24055$new_n8353
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6111
      Created $fa cell $auto$extract_fa.cc:504:run$33209.
    AND with inverted A Y:
      1011 -> $abc$24055$new_n6290
      Created $fa cell $auto$extract_fa.cc:504:run$33223.
    AND without inversions:
      1000 -> $abc$24055$new_n6112
      Created $fa cell $auto$extract_fa.cc:504:run$33233.
  2-Input XOR/XNOR $abc$24055$new_n8358 $abc$24055$new_n8353:
    1001 -> $abc$24055$new_n8359
  2-Input XOR/XNOR $abc$24055$new_n6304 $abc$24055$new_n6113:
    0110 -> $abc$24055$new_n8360
  2-Input XOR/XNOR \mem_la_wdata [5] \pcpi_rs1 [5]:
    0110 -> $abc$24055$new_n6110
    1001 -> $abc$24055$new_n8368
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6108
      Created $fa cell $auto$extract_fa.cc:504:run$33239.
    AND with inverted A Y:
      1011 -> $abc$24055$new_n6289
      Created $fa cell $auto$extract_fa.cc:504:run$33253.
    AND without inversions:
      1000 -> $abc$24055$new_n6109
      Created $fa cell $auto$extract_fa.cc:504:run$33263.
  2-Input XOR/XNOR $abc$24055$new_n8376 $abc$24055$new_n8368:
    1001 -> $abc$24055$new_n8377
  2-Input XOR/XNOR $abc$24055$new_n8382 $abc$24055$new_n6110:
    1001 -> $abc$24055$new_n8383
  2-Input XOR/XNOR \mem_la_wdata [6] \pcpi_rs1 [6]:
    0110 -> $abc$24055$new_n6106
    1001 -> $abc$24055$new_n8391
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6104
      Created $fa cell $auto$extract_fa.cc:504:run$33269.
    AND with inverted A Y:
      1011 -> $abc$24055$new_n6286
      Created $fa cell $auto$extract_fa.cc:504:run$33283.
    AND without inversions:
      1000 -> $abc$24055$new_n6105
      Created $fa cell $auto$extract_fa.cc:504:run$33293.
  2-Input XOR/XNOR $abc$24055$new_n8399 $abc$24055$new_n8391:
    1001 -> $abc$24055$new_n8400
  2-Input XOR/XNOR $abc$24055$new_n8406 $abc$24055$new_n6106:
    1001 -> $abc$24055$new_n8407
  2-Input XOR/XNOR \mem_la_wdata [7] \pcpi_rs1 [7]:
    1001 -> $abc$24055$new_n6103 $abc$24055$new_n8415
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6101
      Created $fa cell $auto$extract_fa.cc:504:run$33299.
    AND with inverted A Y:
      1011 -> $abc$24055$new_n6285
      Created $fa cell $auto$extract_fa.cc:504:run$33313.
    AND without inversions:
      1000 -> $abc$24055$new_n6102
      Created $fa cell $auto$extract_fa.cc:504:run$33321.
  2-Input XOR/XNOR $abc$24055$new_n8423 $abc$24055$new_n8415:
    1001 -> $abc$24055$new_n8424
  2-Input XOR/XNOR $abc$24055$new_n6395 $abc$24055$new_n6103:
    1001 -> $abc$24055$new_n8425
  2-Input XOR/XNOR \pcpi_rs1 [8] \pcpi_rs2 [8]:
    0110 -> $abc$24055$new_n6144
    1001 -> $abc$24055$new_n8433
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6142
      Created $fa cell $auto$extract_fa.cc:504:run$33327.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6278
      Created $fa cell $auto$extract_fa.cc:504:run$33341.
    AND without inversions:
      1000 -> $abc$24055$new_n6143
      Created $fa cell $auto$extract_fa.cc:504:run$33351.
  2-Input XOR/XNOR $abc$24055$new_n8441 $abc$24055$new_n8433:
    1001 -> $abc$24055$new_n8442
  2-Input XOR/XNOR $abc$24055$new_n6306 $abc$24055$new_n6144:
    0110 -> $abc$24055$new_n8443
  2-Input XOR/XNOR \pcpi_rs1 [9] \pcpi_rs2 [9]:
    0110 -> $abc$24055$new_n6141
    1001 -> $abc$24055$new_n8451
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6139
      Created $fa cell $auto$extract_fa.cc:504:run$33357.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6277
      Created $fa cell $auto$extract_fa.cc:504:run$33371.
    AND without inversions:
      1000 -> $abc$24055$new_n6140
      Created $fa cell $auto$extract_fa.cc:504:run$33381.
  2-Input XOR/XNOR $abc$24055$new_n8462 $abc$24055$new_n8451:
    0110 -> $abc$24055$new_n8463
  2-Input XOR/XNOR $abc$24055$new_n8471 $abc$24055$new_n6141:
    0110 -> $abc$24055$new_n8472
  2-Input XOR/XNOR \pcpi_rs1 [10] \pcpi_rs2 [10]:
    0110 -> $abc$24055$new_n6137
    1001 -> $abc$24055$new_n8480
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6135
      Created $fa cell $auto$extract_fa.cc:504:run$33387.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6274
      Created $fa cell $auto$extract_fa.cc:504:run$33401.
    AND without inversions:
      1000 -> $abc$24055$new_n6136
      Created $fa cell $auto$extract_fa.cc:504:run$33411.
  2-Input XOR/XNOR $abc$24055$new_n8480 $abc$24055$new_n8492:
    0110 -> $abc$24055$new_n8493
  2-Input XOR/XNOR $abc$24055$new_n8501 $abc$24055$new_n6137:
    0110 -> $abc$24055$new_n8502
  2-Input XOR/XNOR \pcpi_rs1 [11] \pcpi_rs2 [11]:
    0110 -> $abc$24055$new_n6134
    1001 -> $abc$24055$new_n8510
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6132
      Created $fa cell $auto$extract_fa.cc:504:run$33417.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6273
      Created $fa cell $auto$extract_fa.cc:504:run$33431.
    AND without inversions:
      1000 -> $abc$24055$new_n6133
      Created $fa cell $auto$extract_fa.cc:504:run$33441.
  2-Input XOR/XNOR $abc$24055$new_n8521 $abc$24055$new_n8510:
    0110 -> $abc$24055$new_n8522
  2-Input XOR/XNOR $abc$24055$new_n8527 $abc$24055$new_n6134:
    0110 -> $abc$24055$new_n8528
  2-Input XOR/XNOR \pcpi_rs1 [12] \pcpi_rs2 [12]:
    0110 -> $abc$24055$new_n6129
    1001 -> $abc$24055$new_n8536
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6127
      Created $fa cell $auto$extract_fa.cc:504:run$33447.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6268
      Created $fa cell $auto$extract_fa.cc:504:run$33461.
    AND without inversions:
      1000 -> $abc$24055$new_n6128
      Created $fa cell $auto$extract_fa.cc:504:run$33471.
  2-Input XOR/XNOR $abc$24055$new_n8547 $abc$24055$new_n8536:
    0110 -> $abc$24055$new_n8548
  2-Input XOR/XNOR $abc$24055$new_n8553 $abc$24055$new_n6129:
    0110 -> $abc$24055$new_n8554
  2-Input XOR/XNOR \pcpi_rs1 [13] \pcpi_rs2 [13]:
    0110 -> $abc$24055$new_n6126
    1001 -> $abc$24055$new_n8562
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6124
      Created $fa cell $auto$extract_fa.cc:504:run$33477.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6267
      Created $fa cell $auto$extract_fa.cc:504:run$33491.
    AND without inversions:
      1000 -> $abc$24055$new_n6125
      Created $fa cell $auto$extract_fa.cc:504:run$33501.
  2-Input XOR/XNOR $abc$24055$new_n8573 $abc$24055$new_n8562:
    0110 -> $abc$24055$new_n8574
  2-Input XOR/XNOR $abc$24055$new_n8582 $abc$24055$new_n6126:
    0110 -> $abc$24055$new_n8583
  2-Input XOR/XNOR \pcpi_rs1 [14] \pcpi_rs2 [14]:
    0110 -> $abc$24055$new_n6122
    1001 -> $abc$24055$new_n8591
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6120
      Created $fa cell $auto$extract_fa.cc:504:run$33507.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6264
      Created $fa cell $auto$extract_fa.cc:504:run$33521.
    AND without inversions:
      1000 -> $abc$24055$new_n6121
      Created $fa cell $auto$extract_fa.cc:504:run$33531.
  2-Input XOR/XNOR $abc$24055$new_n8602 $abc$24055$new_n8591:
    0110 -> $abc$24055$new_n8603
  2-Input XOR/XNOR $abc$24055$new_n8611 $abc$24055$new_n6122:
    0110 -> $abc$24055$new_n8612
  2-Input XOR/XNOR \pcpi_rs1 [15] \pcpi_rs2 [15]:
    0110 -> $abc$24055$new_n6119
    1001 -> $abc$24055$new_n8620
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6117
      Created $fa cell $auto$extract_fa.cc:504:run$33537.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6263
      Created $fa cell $auto$extract_fa.cc:504:run$33551.
    AND without inversions:
      1000 -> $abc$24055$new_n6118
      Created $fa cell $auto$extract_fa.cc:504:run$33561.
  2-Input XOR/XNOR $abc$24055$new_n8620 $abc$24055$new_n8631:
    0110 -> $abc$24055$new_n8632
  2-Input XOR/XNOR $abc$24055$new_n6397 $abc$24055$new_n6119:
    0110 -> $abc$24055$new_n8633
  2-Input XOR/XNOR \pcpi_rs1 [16] \pcpi_rs2 [16]:
    0110 -> $abc$24055$new_n6207
    1001 -> $abc$24055$new_n8641
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6205
      Created $fa cell $auto$extract_fa.cc:504:run$33567.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6254
      Created $fa cell $auto$extract_fa.cc:504:run$33581.
    AND without inversions:
      1000 -> $abc$24055$new_n6206
      Created $fa cell $auto$extract_fa.cc:504:run$33591.
  2-Input XOR/XNOR $abc$24055$new_n8652 $abc$24055$new_n8641:
    0110 -> $abc$24055$new_n8653
  2-Input XOR/XNOR $abc$24055$new_n6308 $abc$24055$new_n6207:
    0110 -> $abc$24055$new_n8654
  2-Input XOR/XNOR \pcpi_rs1 [17] \pcpi_rs2 [17]:
    0110 -> $abc$24055$new_n6204
    1001 -> $abc$24055$new_n8662
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6202
      Created $fa cell $auto$extract_fa.cc:504:run$33597.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6253
      Created $fa cell $auto$extract_fa.cc:504:run$33611.
    AND without inversions:
      1000 -> $abc$24055$new_n6203
      Created $fa cell $auto$extract_fa.cc:504:run$33621.
  2-Input XOR/XNOR $abc$24055$new_n8676 $abc$24055$new_n8662:
    0110 -> $abc$24055$new_n8677
  2-Input XOR/XNOR $abc$24055$new_n8688 $abc$24055$new_n6204:
    0110 -> $abc$24055$new_n8689
  2-Input XOR/XNOR \pcpi_rs1 [18] \pcpi_rs2 [18]:
    0110 -> $abc$24055$new_n6200
    1001 -> $abc$24055$new_n8697
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6198
      Created $fa cell $auto$extract_fa.cc:504:run$33627.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6250
      Created $fa cell $auto$extract_fa.cc:504:run$33641.
    AND without inversions:
      1000 -> $abc$24055$new_n6199
      Created $fa cell $auto$extract_fa.cc:504:run$33651.
  2-Input XOR/XNOR $abc$24055$new_n8711 $abc$24055$new_n8697:
    0110 -> $abc$24055$new_n8712
  2-Input XOR/XNOR $abc$24055$new_n8723 $abc$24055$new_n6200:
    0110 -> $abc$24055$new_n8724
  2-Input XOR/XNOR \pcpi_rs1 [19] \pcpi_rs2 [19]:
    0110 -> $abc$24055$new_n6197
    1001 -> $abc$24055$new_n8732
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6195
      Created $fa cell $auto$extract_fa.cc:504:run$33657.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6249
      Created $fa cell $auto$extract_fa.cc:504:run$33671.
    AND without inversions:
      1000 -> $abc$24055$new_n6196
      Created $fa cell $auto$extract_fa.cc:504:run$33681.
  2-Input XOR/XNOR $abc$24055$new_n8746 $abc$24055$new_n8732:
    0110 -> $abc$24055$new_n8747
  2-Input XOR/XNOR $abc$24055$new_n8755 $abc$24055$new_n6197:
    0110 -> $abc$24055$new_n8756
  2-Input XOR/XNOR \pcpi_rs1 [20] \pcpi_rs2 [20]:
    0110 -> $abc$24055$new_n6192
    1001 -> $abc$24055$new_n8764
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6190
      Created $fa cell $auto$extract_fa.cc:504:run$33687.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6244
      Created $fa cell $auto$extract_fa.cc:504:run$33701.
    AND without inversions:
      1000 -> $abc$24055$new_n6191
      Created $fa cell $auto$extract_fa.cc:504:run$33711.
  2-Input XOR/XNOR $abc$24055$new_n8778 $abc$24055$new_n8764:
    0110 -> $abc$24055$new_n8779
  2-Input XOR/XNOR $abc$24055$new_n8787 $abc$24055$new_n6192:
    0110 -> $abc$24055$new_n8788
  2-Input XOR/XNOR \pcpi_rs1 [21] \pcpi_rs2 [21]:
    0110 -> $abc$24055$new_n6189
    1001 -> $abc$24055$new_n8796
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6187
      Created $fa cell $auto$extract_fa.cc:504:run$33717.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6243
      Created $fa cell $auto$extract_fa.cc:504:run$33731.
    AND without inversions:
      1000 -> $abc$24055$new_n6188
      Created $fa cell $auto$extract_fa.cc:504:run$33741.
  2-Input XOR/XNOR $abc$24055$new_n8810 $abc$24055$new_n8796:
    0110 -> $abc$24055$new_n8811
  2-Input XOR/XNOR $abc$24055$new_n8822 $abc$24055$new_n6189:
    0110 -> $abc$24055$new_n8823
  2-Input XOR/XNOR \pcpi_rs1 [22] \pcpi_rs2 [22]:
    0110 -> $abc$24055$new_n6185
    1001 -> $abc$24055$new_n8831
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6183
      Created $fa cell $auto$extract_fa.cc:504:run$33747.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6240
      Created $fa cell $auto$extract_fa.cc:504:run$33761.
    AND without inversions:
      1000 -> $abc$24055$new_n6184
      Created $fa cell $auto$extract_fa.cc:504:run$33771.
  2-Input XOR/XNOR $abc$24055$new_n8845 $abc$24055$new_n8831:
    0110 -> $abc$24055$new_n8846
  2-Input XOR/XNOR $abc$24055$new_n8857 $abc$24055$new_n6185:
    0110 -> $abc$24055$new_n8858
  2-Input XOR/XNOR \pcpi_rs1 [23] \pcpi_rs2 [23]:
    0110 -> $abc$24055$new_n6182
    1001 -> $abc$24055$new_n8866
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6180
      Created $fa cell $auto$extract_fa.cc:504:run$33777.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6239
      Created $fa cell $auto$extract_fa.cc:504:run$33791.
    AND without inversions:
      1000 -> $abc$24055$new_n6181
      Created $fa cell $auto$extract_fa.cc:504:run$33801.
  2-Input XOR/XNOR $abc$24055$new_n8880 $abc$24055$new_n8866:
    0110 -> $abc$24055$new_n8881
  2-Input XOR/XNOR $abc$24055$new_n8886 $abc$24055$new_n6182:
    0110 -> $abc$24055$new_n8887
  2-Input XOR/XNOR \pcpi_rs1 [24] \pcpi_rs2 [24]:
    0110 -> $abc$24055$new_n6176
    1001 -> $abc$24055$new_n8895
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6174
      Created $fa cell $auto$extract_fa.cc:504:run$33807.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6232
      Created $fa cell $auto$extract_fa.cc:504:run$33821.
    AND without inversions:
      1000 -> $abc$24055$new_n6175
      Created $fa cell $auto$extract_fa.cc:504:run$33831.
  2-Input XOR/XNOR $abc$24055$new_n8909 $abc$24055$new_n8895:
    0110 -> $abc$24055$new_n8910
  2-Input XOR/XNOR $abc$24055$new_n8915 $abc$24055$new_n6176:
    0110 -> $abc$24055$new_n8916
  2-Input XOR/XNOR \pcpi_rs1 [25] \pcpi_rs2 [25]:
    0110 -> $abc$24055$new_n6173
    1001 -> $abc$24055$new_n8924
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6171
      Created $fa cell $auto$extract_fa.cc:504:run$33837.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6231
      Created $fa cell $auto$extract_fa.cc:504:run$33851.
    AND without inversions:
      1000 -> $abc$24055$new_n6172
      Created $fa cell $auto$extract_fa.cc:504:run$33861.
  2-Input XOR/XNOR $abc$24055$new_n8938 $abc$24055$new_n8924:
    0110 -> $abc$24055$new_n8939
  2-Input XOR/XNOR $abc$24055$new_n8950 $abc$24055$new_n6173:
    0110 -> $abc$24055$new_n8951
  2-Input XOR/XNOR \pcpi_rs1 [26] \pcpi_rs2 [26]:
    0110 -> $abc$24055$new_n6169
    1001 -> $abc$24055$new_n8959
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6167
      Created $fa cell $auto$extract_fa.cc:504:run$33867.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6228
      Created $fa cell $auto$extract_fa.cc:504:run$33881.
    AND without inversions:
      1000 -> $abc$24055$new_n6168
      Created $fa cell $auto$extract_fa.cc:504:run$33891.
  2-Input XOR/XNOR $abc$24055$new_n8973 $abc$24055$new_n8959:
    0110 -> $abc$24055$new_n8974
  2-Input XOR/XNOR $abc$24055$new_n8985 $abc$24055$new_n6169:
    0110 -> $abc$24055$new_n8986
  2-Input XOR/XNOR \pcpi_rs1 [27] \pcpi_rs2 [27]:
    0110 -> $abc$24055$new_n6166
    1001 -> $abc$24055$new_n8994
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6164
      Created $fa cell $auto$extract_fa.cc:504:run$33897.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6227
      Created $fa cell $auto$extract_fa.cc:504:run$33911.
    AND without inversions:
      1000 -> $abc$24055$new_n6165
      Created $fa cell $auto$extract_fa.cc:504:run$33921.
  2-Input XOR/XNOR $abc$24055$new_n9008 $abc$24055$new_n8994:
    0110 -> $abc$24055$new_n9009
  2-Input XOR/XNOR $abc$24055$new_n9017 $abc$24055$new_n6166:
    0110 -> $abc$24055$new_n9018
  2-Input XOR/XNOR \pcpi_rs1 [28] \pcpi_rs2 [28]:
    0110 -> $abc$24055$new_n6161
    1001 -> $abc$24055$new_n9026
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6159
      Created $fa cell $auto$extract_fa.cc:504:run$33927.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6222
      Created $fa cell $auto$extract_fa.cc:504:run$33941.
    AND without inversions:
      1000 -> $abc$24055$new_n6160
      Created $fa cell $auto$extract_fa.cc:504:run$33951.
  2-Input XOR/XNOR $abc$24055$new_n9040 $abc$24055$new_n9026:
    0110 -> $abc$24055$new_n9041
  2-Input XOR/XNOR $abc$24055$new_n9049 $abc$24055$new_n6161:
    0110 -> $abc$24055$new_n9050
  2-Input XOR/XNOR \pcpi_rs1 [29] \pcpi_rs2 [29]:
    0110 -> $abc$24055$new_n6158
    1001 -> $abc$24055$new_n9058
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6156
      Created $fa cell $auto$extract_fa.cc:504:run$33957.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6221
      Created $fa cell $auto$extract_fa.cc:504:run$33971.
    AND without inversions:
      1000 -> $abc$24055$new_n6157
      Created $fa cell $auto$extract_fa.cc:504:run$33981.
  2-Input XOR/XNOR $abc$24055$new_n9072 $abc$24055$new_n9058:
    0110 -> $abc$24055$new_n9073
  2-Input XOR/XNOR $abc$24055$new_n9084 $abc$24055$new_n6158:
    0110 -> $abc$24055$new_n9085
  2-Input XOR/XNOR \pcpi_rs1 [30] \pcpi_rs2 [30]:
    0110 -> $abc$24055$new_n6154
    1001 -> $abc$24055$new_n9093
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6152
      Created $fa cell $auto$extract_fa.cc:504:run$33987.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6218
      Created $fa cell $auto$extract_fa.cc:504:run$34001.
    AND without inversions:
      1000 -> $abc$24055$new_n6153
      Created $fa cell $auto$extract_fa.cc:504:run$34011.
  2-Input XOR/XNOR $abc$24055$new_n9107 $abc$24055$new_n9093:
    0110 -> $abc$24055$new_n9108
  2-Input XOR/XNOR $abc$24055$new_n9119 $abc$24055$new_n6154:
    0110 -> $abc$24055$new_n9120
  2-Input XOR/XNOR $abc$24055$new_n6399 $abc$24055$new_n6151:
    1001 -> $abc$24055$new_n9128
  2-Input XOR/XNOR $abc$24055$new_n6399 $abc$24055$new_n6312:
    0110 -> $abc$24055$new_n9128
  2-Input XOR/XNOR \pcpi_rs1 [31] \pcpi_rs2 [31]:
    1001 -> $abc$24055$new_n6151 $abc$24055$new_n9129
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n6149
      Created $fa cell $auto$extract_fa.cc:504:run$34017.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n6217
      Created $fa cell $auto$extract_fa.cc:504:run$34031.
    AND without inversions:
      1000 -> $abc$24055$new_n6150
      Created $fa cell $auto$extract_fa.cc:504:run$34039.
  2-Input XOR/XNOR $abc$24055$new_n9143 $abc$24055$new_n9129:
    0110 -> $abc$24055$new_n9144
  2-Input XOR/XNOR \reg_sh [0] \reg_sh [1]:
    0110 -> $abc$24055$new_n9326
    AND with inverted A B Y:
      1110 -> $abc$24055$new_n2369
      Created $fa cell $auto$extract_fa.cc:504:run$34045.
    AND with inverted A B:
      0001 -> $abc$24055$new_n9331
      Created $fa cell $auto$extract_fa.cc:504:run$34056.
  2-Input XOR/XNOR \reg_sh [2] $abc$24055$new_n9331:
    0110 -> $abc$24055$new_n9332
  2-Input XOR/XNOR \reg_sh [3] $abc$24055$new_n9339:
    0110 -> $abc$24055$new_n9340
  2-Input XOR/XNOR \reg_sh [2] \reg_sh [3]:
    1001 -> $abc$24055$new_n9341
    AND with inverted A B:
      0001 -> $abc$24055$new_n2370
      Created $fa cell $auto$extract_fa.cc:504:run$34064.
    AND with inverted B Y:
      1101 -> $abc$24055$new_n2375
      Created $fa cell $auto$extract_fa.cc:504:run$34075.
  2-Input XOR/XNOR \reg_sh [4] $abc$24055$new_n9347:
    0110 -> $abc$24055$new_n9348
  2-Input XOR/XNOR \reg_sh [4] $abc$24055$new_n2370:
    0110 -> $abc$24055$new_n9349
  2-Input XOR/XNOR \count_cycle [0] \count_cycle [1]:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [1]
    AND without inversions:
      1000 -> $abc$24055$new_n9420
      Created $fa cell $auto$extract_fa.cc:504:run$34083.
  2-Input XOR/XNOR \count_cycle [2] $abc$24055$new_n9420:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [2]
  2-Input XOR/XNOR \count_cycle [3] $abc$24055$new_n9423:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [3]
  2-Input XOR/XNOR \count_cycle [4] $abc$24055$new_n9426:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [4]
  2-Input XOR/XNOR \count_cycle [5] $abc$24055$new_n9430:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [5]
  2-Input XOR/XNOR \count_cycle [6] $abc$24055$new_n9434:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [6]
  2-Input XOR/XNOR \count_cycle [7] $abc$24055$new_n9438:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [7]
  2-Input XOR/XNOR \count_cycle [8] $abc$24055$new_n9442:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [8]
  2-Input XOR/XNOR \count_cycle [9] $abc$24055$new_n9447:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [9]
  2-Input XOR/XNOR \count_cycle [10] $abc$24055$new_n9452:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [10]
  2-Input XOR/XNOR \count_cycle [11] $abc$24055$new_n9457:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [11]
  2-Input XOR/XNOR \count_cycle [12] $abc$24055$new_n9462:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [12]
  2-Input XOR/XNOR \count_cycle [13] $abc$24055$new_n9467:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [13]
  2-Input XOR/XNOR \count_cycle [14] $abc$24055$new_n9472:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [14]
  2-Input XOR/XNOR \count_cycle [15] $abc$24055$new_n9477:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [15]
  2-Input XOR/XNOR \count_cycle [16] $abc$24055$new_n9482:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [16]
  2-Input XOR/XNOR \count_cycle [17] $abc$24055$new_n9488:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [17]
  2-Input XOR/XNOR \count_cycle [18] $abc$24055$new_n9494:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [18]
  2-Input XOR/XNOR \count_cycle [19] $abc$24055$new_n9500:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [19]
  2-Input XOR/XNOR \count_cycle [20] $abc$24055$new_n9506:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [20]
  2-Input XOR/XNOR \count_cycle [21] $abc$24055$new_n9512:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [21]
  2-Input XOR/XNOR \count_cycle [22] $abc$24055$new_n9518:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [22]
  2-Input XOR/XNOR \count_cycle [23] $abc$24055$new_n9524:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [23]
  2-Input XOR/XNOR \count_cycle [24] $abc$24055$new_n9530:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [24]
  2-Input XOR/XNOR \count_cycle [25] $abc$24055$new_n9536:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [25]
  2-Input XOR/XNOR \count_cycle [26] $abc$24055$new_n9542:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [26]
  2-Input XOR/XNOR \count_cycle [27] $abc$24055$new_n9548:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [27]
  2-Input XOR/XNOR \count_cycle [28] $abc$24055$new_n9554:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [28]
  2-Input XOR/XNOR \count_cycle [29] $abc$24055$new_n9560:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [29]
  2-Input XOR/XNOR \count_cycle [30] $abc$24055$new_n9566:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [30]
  2-Input XOR/XNOR \count_cycle [31] $abc$24055$new_n9572:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [31]
  2-Input XOR/XNOR \count_cycle [32] $abc$24055$new_n9578:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [32]
  2-Input XOR/XNOR \count_cycle [33] $abc$24055$new_n9585:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [33]
  2-Input XOR/XNOR \count_cycle [34] $abc$24055$new_n9592:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [34]
  2-Input XOR/XNOR \count_cycle [35] $abc$24055$new_n9599:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [35]
  2-Input XOR/XNOR \count_cycle [36] $abc$24055$new_n9606:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [36]
  2-Input XOR/XNOR \count_cycle [37] $abc$24055$new_n9613:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [37]
  2-Input XOR/XNOR \count_cycle [38] $abc$24055$new_n9620:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [38]
  2-Input XOR/XNOR \count_cycle [39] $abc$24055$new_n9627:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [39]
  2-Input XOR/XNOR \count_cycle [40] $abc$24055$new_n9634:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [40]
  2-Input XOR/XNOR \count_cycle [41] $abc$24055$new_n9641:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [41]
  2-Input XOR/XNOR \count_cycle [42] $abc$24055$new_n9648:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [42]
  2-Input XOR/XNOR \count_cycle [43] $abc$24055$new_n9655:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [43]
  2-Input XOR/XNOR \count_cycle [44] $abc$24055$new_n9662:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [44]
  2-Input XOR/XNOR \count_cycle [45] $abc$24055$new_n9669:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [45]
  2-Input XOR/XNOR \count_cycle [46] $abc$24055$new_n9676:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [46]
  2-Input XOR/XNOR \count_cycle [47] $abc$24055$new_n9683:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [47]
  2-Input XOR/XNOR \count_cycle [48] $abc$24055$new_n9690:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [48]
  2-Input XOR/XNOR \count_cycle [49] $abc$24055$new_n9697:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [49]
  2-Input XOR/XNOR \count_cycle [50] $abc$24055$new_n9704:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [50]
  2-Input XOR/XNOR \count_cycle [51] $abc$24055$new_n9711:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [51]
  2-Input XOR/XNOR \count_cycle [52] $abc$24055$new_n9718:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [52]
  2-Input XOR/XNOR \count_cycle [53] $abc$24055$new_n9725:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [53]
  2-Input XOR/XNOR \count_cycle [54] $abc$24055$new_n9732:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [54]
  2-Input XOR/XNOR \count_cycle [55] $abc$24055$new_n9739:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [55]
  2-Input XOR/XNOR \count_cycle [56] $abc$24055$new_n9746:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [56]
  2-Input XOR/XNOR \count_cycle [57] $abc$24055$new_n9753:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [57]
  2-Input XOR/XNOR \count_cycle [58] $abc$24055$new_n9760:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [58]
  2-Input XOR/XNOR \count_cycle [59] $abc$24055$new_n9767:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [59]
  2-Input XOR/XNOR \count_cycle [60] $abc$24055$new_n9774:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [60]
  2-Input XOR/XNOR \count_cycle [61] $abc$24055$new_n9781:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [61]
  2-Input XOR/XNOR \count_cycle [62] $abc$24055$new_n9788:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [62]
  2-Input XOR/XNOR \count_cycle [63] $abc$24055$new_n9795:
    0110 -> $auto$alumacc.cc:495:replace_alu$4393.Y [63]
  2-Input XOR/XNOR \count_instr [0] \count_instr [1]:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [1]
    AND without inversions:
      1000 -> $abc$24055$new_n9798
      Created $fa cell $auto$extract_fa.cc:504:run$34088.
  2-Input XOR/XNOR \count_instr [2] $abc$24055$new_n9798:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [2]
  2-Input XOR/XNOR \count_instr [3] $abc$24055$new_n9801:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [3]
  2-Input XOR/XNOR \count_instr [4] $abc$24055$new_n9804:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [4]
  2-Input XOR/XNOR \count_instr [5] $abc$24055$new_n9808:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [5]
  2-Input XOR/XNOR \count_instr [6] $abc$24055$new_n9812:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [6]
  2-Input XOR/XNOR \count_instr [7] $abc$24055$new_n9816:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [7]
  2-Input XOR/XNOR \count_instr [8] $abc$24055$new_n9820:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [8]
  2-Input XOR/XNOR \count_instr [9] $abc$24055$new_n9825:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [9]
  2-Input XOR/XNOR \count_instr [10] $abc$24055$new_n9830:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [10]
  2-Input XOR/XNOR \count_instr [11] $abc$24055$new_n9835:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [11]
  2-Input XOR/XNOR \count_instr [12] $abc$24055$new_n9840:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [12]
  2-Input XOR/XNOR \count_instr [13] $abc$24055$new_n9845:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [13]
  2-Input XOR/XNOR \count_instr [14] $abc$24055$new_n9850:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [14]
  2-Input XOR/XNOR \count_instr [15] $abc$24055$new_n9855:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [15]
  2-Input XOR/XNOR \count_instr [16] $abc$24055$new_n9860:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [16]
  2-Input XOR/XNOR \count_instr [17] $abc$24055$new_n9866:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [17]
  2-Input XOR/XNOR \count_instr [18] $abc$24055$new_n9872:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [18]
  2-Input XOR/XNOR \count_instr [19] $abc$24055$new_n9878:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [19]
  2-Input XOR/XNOR \count_instr [20] $abc$24055$new_n9884:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [20]
  2-Input XOR/XNOR \count_instr [21] $abc$24055$new_n9890:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [21]
  2-Input XOR/XNOR \count_instr [22] $abc$24055$new_n9896:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [22]
  2-Input XOR/XNOR \count_instr [23] $abc$24055$new_n9902:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [23]
  2-Input XOR/XNOR \count_instr [24] $abc$24055$new_n9908:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [24]
  2-Input XOR/XNOR \count_instr [25] $abc$24055$new_n9914:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [25]
  2-Input XOR/XNOR \count_instr [26] $abc$24055$new_n9920:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [26]
  2-Input XOR/XNOR \count_instr [27] $abc$24055$new_n9926:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [27]
  2-Input XOR/XNOR \count_instr [28] $abc$24055$new_n9932:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [28]
  2-Input XOR/XNOR \count_instr [29] $abc$24055$new_n9938:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [29]
  2-Input XOR/XNOR \count_instr [30] $abc$24055$new_n9944:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [30]
  2-Input XOR/XNOR \count_instr [31] $abc$24055$new_n9950:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [31]
  2-Input XOR/XNOR \count_instr [32] $abc$24055$new_n9956:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [32]
  2-Input XOR/XNOR \count_instr [33] $abc$24055$new_n9963:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [33]
  2-Input XOR/XNOR \count_instr [34] $abc$24055$new_n9970:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [34]
  2-Input XOR/XNOR \count_instr [35] $abc$24055$new_n9977:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [35]
  2-Input XOR/XNOR \count_instr [36] $abc$24055$new_n9984:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [36]
  2-Input XOR/XNOR \count_instr [37] $abc$24055$new_n9991:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [37]
  2-Input XOR/XNOR \count_instr [38] $abc$24055$new_n9998:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [38]
  2-Input XOR/XNOR \count_instr [39] $abc$24055$new_n10005:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [39]
  2-Input XOR/XNOR \count_instr [40] $abc$24055$new_n10012:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [40]
  2-Input XOR/XNOR \count_instr [41] $abc$24055$new_n10019:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [41]
  2-Input XOR/XNOR \count_instr [42] $abc$24055$new_n10026:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [42]
  2-Input XOR/XNOR \count_instr [43] $abc$24055$new_n10033:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [43]
  2-Input XOR/XNOR \count_instr [44] $abc$24055$new_n10040:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [44]
  2-Input XOR/XNOR \count_instr [45] $abc$24055$new_n10047:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [45]
  2-Input XOR/XNOR \count_instr [46] $abc$24055$new_n10054:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [46]
  2-Input XOR/XNOR \count_instr [47] $abc$24055$new_n10061:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [47]
  2-Input XOR/XNOR \count_instr [48] $abc$24055$new_n10068:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [48]
  2-Input XOR/XNOR \count_instr [49] $abc$24055$new_n10075:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [49]
  2-Input XOR/XNOR \count_instr [50] $abc$24055$new_n10082:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [50]
  2-Input XOR/XNOR \count_instr [51] $abc$24055$new_n10089:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [51]
  2-Input XOR/XNOR \count_instr [52] $abc$24055$new_n10096:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [52]
  2-Input XOR/XNOR \count_instr [53] $abc$24055$new_n10103:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [53]
  2-Input XOR/XNOR \count_instr [54] $abc$24055$new_n10110:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [54]
  2-Input XOR/XNOR \count_instr [55] $abc$24055$new_n10117:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [55]
  2-Input XOR/XNOR \count_instr [56] $abc$24055$new_n10124:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [56]
  2-Input XOR/XNOR \count_instr [57] $abc$24055$new_n10131:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [57]
  2-Input XOR/XNOR \count_instr [58] $abc$24055$new_n10138:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [58]
  2-Input XOR/XNOR \count_instr [59] $abc$24055$new_n10145:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [59]
  2-Input XOR/XNOR \count_instr [60] $abc$24055$new_n10152:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [60]
  2-Input XOR/XNOR \count_instr [61] $abc$24055$new_n10159:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [61]
  2-Input XOR/XNOR \count_instr [62] $abc$24055$new_n10166:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [62]
  2-Input XOR/XNOR \count_instr [63] $abc$24055$new_n10173:
    0110 -> $auto$alumacc.cc:495:replace_alu$4399.Y [63]

yosys> techmap -map /nfs/sc_compute/cache/lambdapdk-v0.1.50/lambdapdk/sky130/libs/sky130hd/techmap/yosys/cells_adders.v

13. Executing TECHMAP pass (map to technology primitives).

13.1. Executing Verilog-2005 frontend: /nfs/sc_compute/cache/lambdapdk-v0.1.50/lambdapdk/sky130/libs/sky130hd/techmap/yosys/cells_adders.v
Parsing Verilog input from `/nfs/sc_compute/cache/lambdapdk-v0.1.50/lambdapdk/sky130/libs/sky130hd/techmap/yosys/cells_adders.v' to AST representation.
Generating RTLIL representation for module `\_tech_fa'.
Successfully finished Verilog frontend.

13.2. Continuing TECHMAP pass.
Using template $paramod$366b53aa83fc1f56a6a9bf0b408f4c58a4c2aa2e\_tech_fa for cells of type $fa.
Using template $paramod$2fcc834c4319f5120e47ab5a569b231ddfd641fa\_tech_fa for cells of type $fa.
No more expansions possible.
<suppressed ~246 debug messages>

yosys> techmap

14. Executing TECHMAP pass (map to technology primitives).

14.1. Executing Verilog-2005 frontend: /sc_tools/bin/../share/yosys/techmap.v
Parsing Verilog input from `/sc_tools/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

14.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~75 debug messages>

yosys> opt -fast -purge

15. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.
<suppressed ~8 debug messages>

yosys> opt_merge

15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
<suppressed ~219 debug messages>
Removed a total of 73 cells.

yosys> opt_dff

15.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean -purge

15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..
Removed 442 unused cells and 1948 unused wires.
<suppressed ~443 debug messages>

15.5. Finished fast OPT passes.

yosys> techmap -map /nfs/sc_compute/cache/lambdapdk-v0.1.50/lambdapdk/sky130/libs/sky130hd/techmap/yosys/cells_latch.v

16. Executing TECHMAP pass (map to technology primitives).

16.1. Executing Verilog-2005 frontend: /nfs/sc_compute/cache/lambdapdk-v0.1.50/lambdapdk/sky130/libs/sky130hd/techmap/yosys/cells_latch.v
Parsing Verilog input from `/nfs/sc_compute/cache/lambdapdk-v0.1.50/lambdapdk/sky130/libs/sky130hd/techmap/yosys/cells_latch.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

16.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

yosys> techmap

17. Executing TECHMAP pass (map to technology primitives).

17.1. Executing Verilog-2005 frontend: /sc_tools/bin/../share/yosys/techmap.v
Parsing Verilog input from `/sc_tools/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~75 debug messages>

yosys> opt -fast -purge

18. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

yosys> opt_merge

18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff

18.3. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean -purge

18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

18.5. Finished fast OPT passes.

yosys> rename -wire

yosys> dfflibmap -dont_use sky130_fd_sc_hd__probe_p_8 -dont_use sky130_fd_sc_hd__probec_p_8 -dont_use sky130_fd_sc_hd__lpflow_bleeder_1 -dont_use sky130_fd_sc_hd__lpflow_clkbufkapwr_1 -dont_use sky130_fd_sc_hd__lpflow_clkbufkapwr_16 -dont_use sky130_fd_sc_hd__lpflow_clkbufkapwr_2 -dont_use sky130_fd_sc_hd__lpflow_clkbufkapwr_4 -dont_use sky130_fd_sc_hd__lpflow_clkbufkapwr_8 -dont_use sky130_fd_sc_hd__lpflow_clkinvkapwr_1 -dont_use sky130_fd_sc_hd__lpflow_clkinvkapwr_16 -dont_use sky130_fd_sc_hd__lpflow_clkinvkapwr_2 -dont_use sky130_fd_sc_hd__lpflow_clkinvkapwr_4 -dont_use sky130_fd_sc_hd__lpflow_clkinvkapwr_8 -dont_use sky130_fd_sc_hd__lpflow_decapkapwr_12 -dont_use sky130_fd_sc_hd__lpflow_decapkapwr_3 -dont_use sky130_fd_sc_hd__lpflow_decapkapwr_4 -dont_use sky130_fd_sc_hd__lpflow_decapkapwr_6 -dont_use sky130_fd_sc_hd__lpflow_decapkapwr_8 -dont_use sky130_fd_sc_hd__lpflow_inputiso0n_1 -dont_use sky130_fd_sc_hd__lpflow_inputiso0p_1 -dont_use sky130_fd_sc_hd__lpflow_inputiso1n_1 -dont_use sky130_fd_sc_hd__lpflow_inputiso1p_1 -dont_use sky130_fd_sc_hd__lpflow_inputisolatch_1 -dont_use sky130_fd_sc_hd__lpflow_isobufsrc_1 -dont_use sky130_fd_sc_hd__lpflow_isobufsrc_16 -dont_use sky130_fd_sc_hd__lpflow_isobufsrc_2 -dont_use sky130_fd_sc_hd__lpflow_isobufsrc_4 -dont_use sky130_fd_sc_hd__lpflow_isobufsrc_8 -dont_use sky130_fd_sc_hd__lpflow_isobufsrckapwr_16 -dont_use sky130_fd_sc_hd__lpflow_lsbuf_lh_hl_isowell_tap_1 -dont_use sky130_fd_sc_hd__lpflow_lsbuf_lh_hl_isowell_tap_2 -dont_use sky130_fd_sc_hd__lpflow_lsbuf_lh_hl_isowell_tap_4 -dont_use sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_4 -dont_use sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_tap_1 -dont_use sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_tap_2 -dont_use sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_tap_4 -liberty /nfs/sc_compute/builds/03ceb3a4f0e94730a95a08d439e9c2e9/picorv32/job0/syn/0/inputs/sc_logic_sky130hd_sky130_fd_sc_hd__ss_n40C_1v40.lib

19. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_1 (noninv, pins=3, area=20.02) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtn_1 (noninv, pins=4, area=25.02) is a direct match for cell type $_DFF_NN0_.
  cell sky130_fd_sc_hd__dfrtp_1 (noninv, pins=4, area=25.02) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__edfxtp_1 (noninv, pins=4, area=30.03) is a direct match for cell type $_DFFE_PP_.
  cell sky130_fd_sc_hd__dfbbn_1 (noninv, pins=6, area=32.53) is a direct match for cell type $_DFFSR_NNN_.
  cell sky130_fd_sc_hd__dfbbp_1 (noninv, pins=6, area=32.53) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    \sky130_fd_sc_hd__dfrtn_1 _DFF_NN0_ (.CLK_N( C), .D( D), .Q( Q), .RESET_B( R));
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_1 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFE_NN_
    unmapped dff cell: $_DFFE_NP_
    unmapped dff cell: $_DFFE_PN_
    \sky130_fd_sc_hd__edfxtp_1 _DFFE_PP_ (.CLK( C), .D( D), .DE( E), .Q( Q));
    \sky130_fd_sc_hd__dfbbn_1 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \sky130_fd_sc_hd__dfbbp_1 _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

yosys> dfflegalize -cell $_DFF_P_ 01 -cell $_DFFE_PP_ 01 -cell $_DFF_NN0_ 01 -cell $_DFF_PN0_ 01 -cell $_DFF_PN1_ 01 -cell $_DFFSR_NNN_ 01 -cell $_DFFSR_PNN_ 01 t:$_DFF* t:$_SDFF*

19.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
<suppressed ~24 debug messages>
Mapping DFF cells in module `\picorv32':
  mapped 1280 $_DFFE_PP_ cells to \sky130_fd_sc_hd__edfxtp_1 cells.
  mapped 317 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_1 cells.

yosys> techmap

20. Executing TECHMAP pass (map to technology primitives).

20.1. Executing Verilog-2005 frontend: /sc_tools/bin/../share/yosys/techmap.v
Parsing Verilog input from `/sc_tools/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

20.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~75 debug messages>

yosys> opt -purge

21. Executing OPT pass (performing simple optimizations).

yosys> opt_expr

21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

yosys> opt_merge -nomux

21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_muxtree

21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \picorv32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

yosys> opt_reduce

21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \picorv32.
Performed a total of 0 changes.

yosys> opt_merge

21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\picorv32'.
Removed a total of 0 cells.

yosys> opt_dff

21.6. Executing OPT_DFF pass (perform DFF optimizations).

yosys> opt_clean -purge

21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \picorv32..

yosys> opt_expr

21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module picorv32.

21.9. Finished OPT passes. (There is nothing left to do.)

yosys> abc -constr /nfs/sc_compute/builds/03ceb3a4f0e94730a95a08d439e9c2e9/picorv32/job0/syn/0/inputs/sc_abc.constraints -liberty /nfs/sc_compute/builds/03ceb3a4f0e94730a95a08d439e9c2e9/picorv32/job0/syn/0/inputs/sc_logic_sky130hd_sky130_fd_sc_hd__ss_n40C_1v40.lib -dont_use sky130_fd_sc_hd__probe_p_8 -dont_use sky130_fd_sc_hd__probec_p_8 -dont_use sky130_fd_sc_hd__lpflow_bleeder_1 -dont_use sky130_fd_sc_hd__lpflow_clkbufkapwr_1 -dont_use sky130_fd_sc_hd__lpflow_clkbufkapwr_16 -dont_use sky130_fd_sc_hd__lpflow_clkbufkapwr_2 -dont_use sky130_fd_sc_hd__lpflow_clkbufkapwr_4 -dont_use sky130_fd_sc_hd__lpflow_clkbufkapwr_8 -dont_use sky130_fd_sc_hd__lpflow_clkinvkapwr_1 -dont_use sky130_fd_sc_hd__lpflow_clkinvkapwr_16 -dont_use sky130_fd_sc_hd__lpflow_clkinvkapwr_2 -dont_use sky130_fd_sc_hd__lpflow_clkinvkapwr_4 -dont_use sky130_fd_sc_hd__lpflow_clkinvkapwr_8 -dont_use sky130_fd_sc_hd__lpflow_decapkapwr_12 -dont_use sky130_fd_sc_hd__lpflow_decapkapwr_3 -dont_use sky130_fd_sc_hd__lpflow_decapkapwr_4 -dont_use sky130_fd_sc_hd__lpflow_decapkapwr_6 -dont_use sky130_fd_sc_hd__lpflow_decapkapwr_8 -dont_use sky130_fd_sc_hd__lpflow_inputiso0n_1 -dont_use sky130_fd_sc_hd__lpflow_inputiso0p_1 -dont_use sky130_fd_sc_hd__lpflow_inputiso1n_1 -dont_use sky130_fd_sc_hd__lpflow_inputiso1p_1 -dont_use sky130_fd_sc_hd__lpflow_inputisolatch_1 -dont_use sky130_fd_sc_hd__lpflow_isobufsrc_1 -dont_use sky130_fd_sc_hd__lpflow_isobufsrc_16 -dont_use sky130_fd_sc_hd__lpflow_isobufsrc_2 -dont_use sky130_fd_sc_hd__lpflow_isobufsrc_4 -dont_use sky130_fd_sc_hd__lpflow_isobufsrc_8 -dont_use sky130_fd_sc_hd__lpflow_isobufsrckapwr_16 -dont_use sky130_fd_sc_hd__lpflow_lsbuf_lh_hl_isowell_tap_1 -dont_use sky130_fd_sc_hd__lpflow_lsbuf_lh_hl_isowell_tap_2 -dont_use sky130_fd_sc_hd__lpflow_lsbuf_lh_hl_isowell_tap_4 -dont_use sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_4 -dont_use sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_tap_1 -dont_use sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_tap_2 -dont_use sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_tap_4 -dont_use sky130_fd_sc_hd__dlygate4sd1_1 -dont_use sky130_fd_sc_hd__dlygate4sd2_1 -dont_use sky130_fd_sc_hd__dlygate4sd3_1 -dont_use sky130_fd_sc_hd__dlymetal6s2s_1 -dont_use sky130_fd_sc_hd__dlymetal6s4s_1 -dont_use sky130_fd_sc_hd__dlymetal6s6s_1 -dont_use sky130_fd_sc_hd__clkbuf_1 -dont_use sky130_fd_sc_hd__clkbuf_2 -dont_use sky130_fd_sc_hd__clkbuf_4 -dont_use sky130_fd_sc_hd__clkbuf_8 -dont_use sky130_fd_sc_hd__clkbuf_16

22. Executing ABC pass (technology mapping using ABC).

22.1. Extracting gate netlist of module `\picorv32' to `<abc-temp-dir>/input.blif'..
Extracted 8381 gates and 10290 wires to a netlist network with 1907 inputs and 721 outputs.

22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -X sky130_fd_sc_hd__probe_p_8 -X sky130_fd_sc_hd__probec_p_8 -X sky130_fd_sc_hd__lpflow_bleeder_1 -X sky130_fd_sc_hd__lpflow_clkbufkapwr_1 -X sky130_fd_sc_hd__lpflow_clkbufkapwr_16 -X sky130_fd_sc_hd__lpflow_clkbufkapwr_2 -X sky130_fd_sc_hd__lpflow_clkbufkapwr_4 -X sky130_fd_sc_hd__lpflow_clkbufkapwr_8 -X sky130_fd_sc_hd__lpflow_clkinvkapwr_1 -X sky130_fd_sc_hd__lpflow_clkinvkapwr_16 -X sky130_fd_sc_hd__lpflow_clkinvkapwr_2 -X sky130_fd_sc_hd__lpflow_clkinvkapwr_4 -X sky130_fd_sc_hd__lpflow_clkinvkapwr_8 -X sky130_fd_sc_hd__lpflow_decapkapwr_12 -X sky130_fd_sc_hd__lpflow_decapkapwr_3 -X sky130_fd_sc_hd__lpflow_decapkapwr_4 -X sky130_fd_sc_hd__lpflow_decapkapwr_6 -X sky130_fd_sc_hd__lpflow_decapkapwr_8 -X sky130_fd_sc_hd__lpflow_inputiso0n_1 -X sky130_fd_sc_hd__lpflow_inputiso0p_1 -X sky130_fd_sc_hd__lpflow_inputiso1n_1 -X sky130_fd_sc_hd__lpflow_inputiso1p_1 -X sky130_fd_sc_hd__lpflow_inputisolatch_1 -X sky130_fd_sc_hd__lpflow_isobufsrc_1 -X sky130_fd_sc_hd__lpflow_isobufsrc_16 -X sky130_fd_sc_hd__lpflow_isobufsrc_2 -X sky130_fd_sc_hd__lpflow_isobufsrc_4 -X sky130_fd_sc_hd__lpflow_isobufsrc_8 -X sky130_fd_sc_hd__lpflow_isobufsrckapwr_16 -X sky130_fd_sc_hd__lpflow_lsbuf_lh_hl_isowell_tap_1 -X sky130_fd_sc_hd__lpflow_lsbuf_lh_hl_isowell_tap_2 -X sky130_fd_sc_hd__lpflow_lsbuf_lh_hl_isowell_tap_4 -X sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_4 -X sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_tap_1 -X sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_tap_2 -X sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_tap_4 -X sky130_fd_sc_hd__dlygate4sd1_1 -X sky130_fd_sc_hd__dlygate4sd2_1 -X sky130_fd_sc_hd__dlygate4sd3_1 -X sky130_fd_sc_hd__dlymetal6s2s_1 -X sky130_fd_sc_hd__dlymetal6s4s_1 -X sky130_fd_sc_hd__dlymetal6s6s_1 -X sky130_fd_sc_hd__clkbuf_1 -X sky130_fd_sc_hd__clkbuf_2 -X sky130_fd_sc_hd__clkbuf_4 -X sky130_fd_sc_hd__clkbuf_8 -X sky130_fd_sc_hd__clkbuf_16 -w /nfs/sc_compute/builds/03ceb3a4f0e94730a95a08d439e9c2e9/picorv32/job0/syn/0/inputs/sc_logic_sky130hd_sky130_fd_sc_hd__ss_n40C_1v40.lib 
ABC: Parsing finished successfully.  Parsing time =     0.11 sec
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__clkbuf_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__clkbuf_16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__clkbuf_2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__clkbuf_4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__clkbuf_8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_12" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_3" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_6" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__decap_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__diode_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlclkp_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlygate4sd1_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlygate4sd2_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlygate4sd3_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlymetal6s2s_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlymetal6s4s_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__dlymetal6s6s_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__edfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__edfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_0".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvn_8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__einvp_8".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_bleeder_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_clkbufkapwr_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_clkbufkapwr_16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_clkbufkapwr_2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_clkbufkapwr_4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_clkbufkapwr_8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_clkinvkapwr_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_clkinvkapwr_16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_clkinvkapwr_2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_clkinvkapwr_4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_clkinvkapwr_8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_12" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_3" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_6" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_decapkapwr_8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_inputiso0n_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_inputiso0p_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_inputiso1n_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_inputiso1p_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__lpflow_inputisolatch_1".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_isobufsrc_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_isobufsrc_16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_isobufsrc_2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_isobufsrc_4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_isobufsrc_8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_isobufsrckapwr_16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_lsbuf_lh_hl_isowell_tap_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_lsbuf_lh_hl_isowell_tap_2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_lsbuf_lh_hl_isowell_tap_4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_tap_1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_tap_2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__lpflow_lsbuf_lh_isowell_tap_4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__probe_p_8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__probec_p_8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfbbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfsbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sdfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_fd_sc_hd__sdlclkp_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxbp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__sedfxtp_4".
ABC: Library "sky130_fd_sc_hd__ss_n40C_1v40" from "/nfs/sc_compute/builds/03ceb3a4f0e94730a95a08d439e9c2e9/picorv32/job0/syn/0/inputs/sc_logic_sky130hd_sky130_fd_sc_hd__ss_n40C_1v40.lib" has 294 cells (88 skipped: 63 seq; 13 tri-state; 12 no func; 46 dont_use).  Time =     0.21 sec
ABC: Memory =   19.85 MB. Time =     0.21 sec
ABC: Warning: Detected 9 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /nfs/sc_compute/builds/03ceb3a4f0e94730a95a08d439e9c2e9/picorv32/job0/syn/0/inputs/sc_abc.constraints 
ABC: Setting driving cell to be "sky130_fd_sc_hd__buf_4".
ABC: Setting output load to be 11.000000.
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + buffer 
ABC: + upsize 
ABC: + dnsize 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   4443 ( 13.4 %)   Cap =  5.6 ff (  7.8 %)   Area =    33514.64 ( 72.5 %)   Delay = 19031.37 ps  (  4.3 %)               
ABC: Path  0 --    1684 : 0    4 pi                        A =   0.00  Df =  68.2  -28.1 ps  S = 128.3 ps  Cin =  0.0 ff  Cout =   7.9 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    3786 : 3    1 sky130_fd_sc_hd__a21o_1   A =   7.51  Df = 699.4 -289.9 ps  S = 161.3 ps  Cin =  2.1 ff  Cout =   4.4 ff  Cmax = 371.6 ff  G =  203  
ABC: Path  2 --    3787 : 3    2 sky130_fd_sc_hd__a21oi_2  A =   8.76  Df =1297.5 -719.0 ps  S = 458.5 ps  Cin =  4.0 ff  Cout =   6.3 ff  Cmax = 205.2 ff  G =  151  
ABC: Path  3 --    3809 : 3    1 sky130_fd_sc_hd__o21bai_1 A =   7.51  Df =1639.3 -470.1 ps  S = 555.7 ps  Cin =  1.9 ff  Cout =   4.4 ff  Cmax = 119.8 ff  G =  229  
ABC: Path  4 --    3810 : 3    2 sky130_fd_sc_hd__a21oi_2  A =   8.76  Df =2263.1 -739.9 ps  S = 458.5 ps  Cin =  4.0 ff  Cout =   6.3 ff  Cmax = 205.2 ff  G =  151  
ABC: Path  5 --    3841 : 3    1 sky130_fd_sc_hd__o21bai_1 A =   7.51  Df =2569.9 -593.0 ps  S = 369.3 ps  Cin =  1.9 ff  Cout =   2.1 ff  Cmax = 119.8 ff  G =  109  
ABC: Path  6 --    3842 : 3    3 sky130_fd_sc_hd__a21o_1   A =   7.51  Df =3255.2 -784.8 ps  S = 197.8 ps  Cin =  2.1 ff  Cout =   5.8 ff  Cmax = 371.6 ff  G =  266  
ABC: Path  7 --    3867 : 3    1 sky130_fd_sc_hd__a21o_1   A =   7.51  Df =3902.5-1102.5 ps  S = 100.4 ps  Cin =  2.1 ff  Cout =   2.1 ff  Cmax = 371.6 ff  G =   97  
ABC: Path  8 --    3868 : 3    3 sky130_fd_sc_hd__a21o_1   A =   7.51  Df =4572.9-1418.2 ps  S = 197.9 ps  Cin =  2.1 ff  Cout =   5.8 ff  Cmax = 371.6 ff  G =  266  
ABC: Path  9 --    3890 : 3    1 sky130_fd_sc_hd__a21oi_1  A =   5.00  Df =5042.1-1699.9 ps  S = 327.5 ps  Cin =  2.1 ff  Cout =   2.2 ff  Cmax = 125.9 ff  G =  101  
ABC: Path 10 --    3891 : 2    2 sky130_fd_sc_hd__nor2b_1  A =   6.26  Df =5271.5-1444.4 ps  S = 456.4 ps  Cin =  1.7 ff  Cout =   4.6 ff  Cmax = 138.9 ff  G =  261  
ABC: Path 11 --    3892 : 3    2 sky130_fd_sc_hd__o21a_1   A =   7.51  Df =5981.1-1633.6 ps  S = 187.7 ps  Cin =  2.1 ff  Cout =   3.8 ff  Cmax = 286.9 ff  G =  175  
ABC: Path 12 --    3913 : 3    2 sky130_fd_sc_hd__o21a_1   A =   7.51  Df =6702.6-1949.6 ps  S = 209.2 ps  Cin =  2.1 ff  Cout =   4.4 ff  Cmax = 286.9 ff  G =  202  
ABC: Path 13 --    3915 : 3    2 sky130_fd_sc_hd__o21a_1   A =   7.51  Df =7419.2-2266.0 ps  S = 187.5 ps  Cin =  2.1 ff  Cout =   3.8 ff  Cmax = 286.9 ff  G =  174  
ABC: Path 14 --    3942 : 3    2 sky130_fd_sc_hd__o21a_1   A =   7.51  Df =8140.4-2581.9 ps  S = 209.3 ps  Cin =  2.1 ff  Cout =   4.4 ff  Cmax = 286.9 ff  G =  202  
ABC: Path 15 --    3944 : 3    2 sky130_fd_sc_hd__o21a_1   A =   7.51  Df =8857.0-2898.3 ps  S = 187.5 ps  Cin =  2.1 ff  Cout =   3.8 ff  Cmax = 286.9 ff  G =  174  
ABC: Path 16 --    3965 : 3    2 sky130_fd_sc_hd__o21a_1   A =   7.51  Df =9578.2-3214.2 ps  S = 209.3 ps  Cin =  2.1 ff  Cout =   4.4 ff  Cmax = 286.9 ff  G =  202  
ABC: Path 17 --    3967 : 3    2 sky130_fd_sc_hd__o21a_1   A =   7.51  Df =10294.7-3530.6 ps  S = 187.5 ps  Cin =  2.1 ff  Cout =   3.8 ff  Cmax = 286.9 ff  G =  174  
ABC: Path 18 --    3987 : 3    2 sky130_fd_sc_hd__o21a_1   A =   7.51  Df =11016.0-3846.4 ps  S = 209.3 ps  Cin =  2.1 ff  Cout =   4.4 ff  Cmax = 286.9 ff  G =  202  
ABC: Path 19 --    3989 : 3    2 sky130_fd_sc_hd__o21a_1   A =   7.51  Df =11732.5-4162.9 ps  S = 187.5 ps  Cin =  2.1 ff  Cout =   3.8 ff  Cmax = 286.9 ff  G =  174  
ABC: Path 20 --    4009 : 3    2 sky130_fd_sc_hd__o21a_1   A =   7.51  Df =12453.8-4478.7 ps  S = 209.3 ps  Cin =  2.1 ff  Cout =   4.4 ff  Cmax = 286.9 ff  G =  202  
ABC: Path 21 --    4011 : 3    2 sky130_fd_sc_hd__o21a_1   A =   7.51  Df =13170.3-4795.1 ps  S = 187.5 ps  Cin =  2.1 ff  Cout =   3.8 ff  Cmax = 286.9 ff  G =  174  
ABC: Path 22 --    4031 : 3    2 sky130_fd_sc_hd__o21a_1   A =   7.51  Df =13891.6-5111.0 ps  S = 209.3 ps  Cin =  2.1 ff  Cout =   4.4 ff  Cmax = 286.9 ff  G =  202  
ABC: Path 23 --    4032 : 3    2 sky130_fd_sc_hd__o21a_1   A =   7.51  Df =14610.7-5425.6 ps  S = 193.3 ps  Cin =  2.1 ff  Cout =   4.0 ff  Cmax = 286.9 ff  G =  182  
ABC: Path 24 --    4054 : 3    2 sky130_fd_sc_hd__o21a_1   A =   7.51  Df =15333.1-5739.5 ps  S = 209.2 ps  Cin =  2.1 ff  Cout =   4.4 ff  Cmax = 286.9 ff  G =  202  
ABC: Path 25 --    4055 : 3    3 sky130_fd_sc_hd__o21a_1   A =   7.51  Df =16080.5-6014.6 ps  S = 283.7 ps  Cin =  2.1 ff  Cout =   6.6 ff  Cmax = 286.9 ff  G =  302  
ABC: Path 26 --    4100 : 4    1 sky130_fd_sc_hd__a31o_1   A =   8.76  Df =16978.4-6386.9 ps  S = 196.6 ps  Cin =  2.1 ff  Cout =   4.0 ff  Cmax = 288.4 ff  G =  184  
ABC: Path 27 --    4103 : 4    2 sky130_fd_sc_hd__a211oi_2 A =  12.51  Df =17818.2-7037.8 ps  S = 552.0 ps  Cin =  3.8 ff  Cout =   3.4 ff  Cmax = 145.7 ff  G =   85  
ABC: Path 28 --    4106 : 3    1 sky130_fd_sc_hd__o21ai_1  A =   5.00  Df =18209.7-6878.1 ps  S = 473.8 ps  Cin =  2.0 ff  Cout =   4.1 ff  Cmax = 131.2 ff  G =  193  
ABC: Path 29 --    4114 : 4    1 sky130_fd_sc_hd__o211ai_2 A =  12.51  Df =19031.4 -266.5 ps  S = 722.4 ps  Cin =  3.8 ff  Cout =  11.0 ff  Cmax = 228.9 ff  G =  286  
ABC: Start-point = pi1683 ($auto$extract_fa.cc:504:run$32553.Y).  End-point = po166 ($procmux$1466.Y [31]).
ABC: + write_blif <abc-temp-dir>/output.blif 

22.1.2. Re-integrating ABC results.
ABC RESULTS:          _const0_ cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_0 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a211o_1 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__a211oi_1 cells:       31
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_0 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__a21o_1 cells:       67
ABC RESULTS:   sky130_fd_sc_hd__a21oi_1 cells:      368
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a221o_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a221oi_1 cells:       46
ABC RESULTS:   sky130_fd_sc_hd__a222oi_1 cells:       39
ABC RESULTS:   sky130_fd_sc_hd__a22o_1 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__a22oi_1 cells:       73
ABC RESULTS:   sky130_fd_sc_hd__a2bb2oi_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a311oi_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a31o_1 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a31oi_1 cells:       71
ABC RESULTS:   sky130_fd_sc_hd__a32o_1 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a32oi_1 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__a41o_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a41oi_1 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and2_0 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__and2_1 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__and3_1 cells:       63
ABC RESULTS:   sky130_fd_sc_hd__and3b_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_1 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__and4b_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      367
ABC RESULTS:   sky130_fd_sc_hd__buf_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__clkinv_1 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__inv_1 cells:      212
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:       60
ABC RESULTS:   sky130_fd_sc_hd__mux2i_1 cells:       87
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:      545
ABC RESULTS:   sky130_fd_sc_hd__nand2_1 cells:      516
ABC RESULTS:   sky130_fd_sc_hd__nand2b_1 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__nand3_1 cells:       79
ABC RESULTS:   sky130_fd_sc_hd__nand3b_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand4_1 cells:       29
ABC RESULTS:   sky130_fd_sc_hd__nand4b_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_1 cells:      486
ABC RESULTS:   sky130_fd_sc_hd__nor2b_1 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__nor3_1 cells:      128
ABC RESULTS:   sky130_fd_sc_hd__nor3b_1 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__nor4_1 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4b_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211ai_1 cells:       25
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_1 cells:       75
ABC RESULTS:   sky130_fd_sc_hd__o21ai_0 cells:      480
ABC RESULTS:   sky130_fd_sc_hd__o21ai_1 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__o21bai_1 cells:       38
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o221ai_1 cells:       40
ABC RESULTS:   sky130_fd_sc_hd__o22a_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o22ai_1 cells:       26
ABC RESULTS:   sky130_fd_sc_hd__o311a_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o311ai_0 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__o311ai_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_1 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o31ai_1 cells:       22
ABC RESULTS:   sky130_fd_sc_hd__o32a_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o32ai_1 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__o41ai_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_1 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__or3_1 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__or4_1 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__xnor2_1 cells:       92
ABC RESULTS:   sky130_fd_sc_hd__xor2_1 cells:       22
ABC RESULTS:        internal signals:     7662
ABC RESULTS:           input signals:     1907
ABC RESULTS:          output signals:      721
Removing temp directory.

yosys> clean -purge
Removed 0 unused cells and 10133 unused wires.

yosys> setundef -zero

23. Executing SETUNDEF pass (replace undef values with defined constants).

yosys> splitnets

24. Executing SPLITNETS pass (splitting up multi-bit signals).

yosys> clean -purge
Removed 0 unused cells and 209 unused wires.

yosys> hilomap -singleton -locell sky130_fd_sc_hd__conb_1 LO -hicell sky130_fd_sc_hd__conb_1 HI

25. Executing HILOMAP pass (mapping to constant drivers).

yosys> insbuf -buf sky130_fd_sc_hd__buf_4 A X

26. Executing INSBUF pass (insert buffer cells for connected wires).
Add picorv32/$auto$insbuf.cc:97:execute$39620: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [0]
Add picorv32/$auto$insbuf.cc:97:execute$39621: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [1]
Add picorv32/$auto$insbuf.cc:97:execute$39622: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [2]
Add picorv32/$auto$insbuf.cc:97:execute$39623: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [3]
Add picorv32/$auto$insbuf.cc:97:execute$39624: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [4]
Add picorv32/$auto$insbuf.cc:97:execute$39625: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [5]
Add picorv32/$auto$insbuf.cc:97:execute$39626: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [6]
Add picorv32/$auto$insbuf.cc:97:execute$39627: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [7]
Add picorv32/$auto$insbuf.cc:97:execute$39628: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [8]
Add picorv32/$auto$insbuf.cc:97:execute$39629: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [9]
Add picorv32/$auto$insbuf.cc:97:execute$39630: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [10]
Add picorv32/$auto$insbuf.cc:97:execute$39631: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [11]
Add picorv32/$auto$insbuf.cc:97:execute$39632: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [12]
Add picorv32/$auto$insbuf.cc:97:execute$39633: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [13]
Add picorv32/$auto$insbuf.cc:97:execute$39634: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [14]
Add picorv32/$auto$insbuf.cc:97:execute$39635: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [15]
Add picorv32/$auto$insbuf.cc:97:execute$39636: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [16]
Add picorv32/$auto$insbuf.cc:97:execute$39637: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [17]
Add picorv32/$auto$insbuf.cc:97:execute$39638: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [18]
Add picorv32/$auto$insbuf.cc:97:execute$39639: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [19]
Add picorv32/$auto$insbuf.cc:97:execute$39640: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [20]
Add picorv32/$auto$insbuf.cc:97:execute$39641: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [21]
Add picorv32/$auto$insbuf.cc:97:execute$39642: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [22]
Add picorv32/$auto$insbuf.cc:97:execute$39643: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [23]
Add picorv32/$auto$insbuf.cc:97:execute$39644: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [24]
Add picorv32/$auto$insbuf.cc:97:execute$39645: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [25]
Add picorv32/$auto$insbuf.cc:97:execute$39646: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [26]
Add picorv32/$auto$insbuf.cc:97:execute$39647: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [27]
Add picorv32/$auto$insbuf.cc:97:execute$39648: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [28]
Add picorv32/$auto$insbuf.cc:97:execute$39649: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [29]
Add picorv32/$auto$insbuf.cc:97:execute$39650: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [30]
Add picorv32/$auto$insbuf.cc:97:execute$39651: $auto$hilomap.cc:47:hilomap_worker$39618 -> \eoi [31]
Add picorv32/$auto$insbuf.cc:97:execute$39652: $auto$hilomap.cc:47:hilomap_worker$39618 -> \mem_addr [0]
Add picorv32/$auto$insbuf.cc:97:execute$39653: $auto$hilomap.cc:47:hilomap_worker$39618 -> \mem_addr [1]
Add picorv32/$auto$insbuf.cc:97:execute$39654: $auto$hilomap.cc:47:hilomap_worker$39618 -> \mem_la_addr [0]
Add picorv32/$auto$insbuf.cc:97:execute$39655: $auto$hilomap.cc:47:hilomap_worker$39618 -> \mem_la_addr [1]
Add picorv32/$auto$insbuf.cc:97:execute$39656: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [0]
Add picorv32/$auto$insbuf.cc:97:execute$39657: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [1]
Add picorv32/$auto$insbuf.cc:97:execute$39658: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [2]
Add picorv32/$auto$insbuf.cc:97:execute$39659: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [3]
Add picorv32/$auto$insbuf.cc:97:execute$39660: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [4]
Add picorv32/$auto$insbuf.cc:97:execute$39661: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [5]
Add picorv32/$auto$insbuf.cc:97:execute$39662: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [6]
Add picorv32/$auto$insbuf.cc:97:execute$39663: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [7]
Add picorv32/$auto$insbuf.cc:97:execute$39664: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [8]
Add picorv32/$auto$insbuf.cc:97:execute$39665: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [9]
Add picorv32/$auto$insbuf.cc:97:execute$39666: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [10]
Add picorv32/$auto$insbuf.cc:97:execute$39667: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [11]
Add picorv32/$auto$insbuf.cc:97:execute$39668: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [12]
Add picorv32/$auto$insbuf.cc:97:execute$39669: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [13]
Add picorv32/$auto$insbuf.cc:97:execute$39670: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [14]
Add picorv32/$auto$insbuf.cc:97:execute$39671: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [15]
Add picorv32/$auto$insbuf.cc:97:execute$39672: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [16]
Add picorv32/$auto$insbuf.cc:97:execute$39673: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [17]
Add picorv32/$auto$insbuf.cc:97:execute$39674: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [18]
Add picorv32/$auto$insbuf.cc:97:execute$39675: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [19]
Add picorv32/$auto$insbuf.cc:97:execute$39676: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [20]
Add picorv32/$auto$insbuf.cc:97:execute$39677: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [21]
Add picorv32/$auto$insbuf.cc:97:execute$39678: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [22]
Add picorv32/$auto$insbuf.cc:97:execute$39679: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [23]
Add picorv32/$auto$insbuf.cc:97:execute$39680: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [24]
Add picorv32/$auto$insbuf.cc:97:execute$39681: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [25]
Add picorv32/$auto$insbuf.cc:97:execute$39682: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [26]
Add picorv32/$auto$insbuf.cc:97:execute$39683: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [27]
Add picorv32/$auto$insbuf.cc:97:execute$39684: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [28]
Add picorv32/$auto$insbuf.cc:97:execute$39685: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [29]
Add picorv32/$auto$insbuf.cc:97:execute$39686: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [30]
Add picorv32/$auto$insbuf.cc:97:execute$39687: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_insn [31]
Add picorv32/$auto$insbuf.cc:97:execute$39688: \mem_la_wdata [0] -> \pcpi_rs2 [0]
Add picorv32/$auto$insbuf.cc:97:execute$39689: \mem_la_wdata [1] -> \pcpi_rs2 [1]
Add picorv32/$auto$insbuf.cc:97:execute$39690: \mem_la_wdata [2] -> \pcpi_rs2 [2]
Add picorv32/$auto$insbuf.cc:97:execute$39691: \mem_la_wdata [3] -> \pcpi_rs2 [3]
Add picorv32/$auto$insbuf.cc:97:execute$39692: \mem_la_wdata [4] -> \pcpi_rs2 [4]
Add picorv32/$auto$insbuf.cc:97:execute$39693: \mem_la_wdata [5] -> \pcpi_rs2 [5]
Add picorv32/$auto$insbuf.cc:97:execute$39694: \mem_la_wdata [6] -> \pcpi_rs2 [6]
Add picorv32/$auto$insbuf.cc:97:execute$39695: \mem_la_wdata [7] -> \pcpi_rs2 [7]
Add picorv32/$auto$insbuf.cc:97:execute$39696: $auto$hilomap.cc:47:hilomap_worker$39618 -> \pcpi_valid
Add picorv32/$auto$insbuf.cc:97:execute$39697: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [0]
Add picorv32/$auto$insbuf.cc:97:execute$39698: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [1]
Add picorv32/$auto$insbuf.cc:97:execute$39699: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [2]
Add picorv32/$auto$insbuf.cc:97:execute$39700: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [3]
Add picorv32/$auto$insbuf.cc:97:execute$39701: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [4]
Add picorv32/$auto$insbuf.cc:97:execute$39702: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [5]
Add picorv32/$auto$insbuf.cc:97:execute$39703: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [6]
Add picorv32/$auto$insbuf.cc:97:execute$39704: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [7]
Add picorv32/$auto$insbuf.cc:97:execute$39705: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [8]
Add picorv32/$auto$insbuf.cc:97:execute$39706: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [9]
Add picorv32/$auto$insbuf.cc:97:execute$39707: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [10]
Add picorv32/$auto$insbuf.cc:97:execute$39708: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [11]
Add picorv32/$auto$insbuf.cc:97:execute$39709: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [12]
Add picorv32/$auto$insbuf.cc:97:execute$39710: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [13]
Add picorv32/$auto$insbuf.cc:97:execute$39711: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [14]
Add picorv32/$auto$insbuf.cc:97:execute$39712: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [15]
Add picorv32/$auto$insbuf.cc:97:execute$39713: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [16]
Add picorv32/$auto$insbuf.cc:97:execute$39714: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [17]
Add picorv32/$auto$insbuf.cc:97:execute$39715: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [18]
Add picorv32/$auto$insbuf.cc:97:execute$39716: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [19]
Add picorv32/$auto$insbuf.cc:97:execute$39717: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [20]
Add picorv32/$auto$insbuf.cc:97:execute$39718: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [21]
Add picorv32/$auto$insbuf.cc:97:execute$39719: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [22]
Add picorv32/$auto$insbuf.cc:97:execute$39720: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [23]
Add picorv32/$auto$insbuf.cc:97:execute$39721: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [24]
Add picorv32/$auto$insbuf.cc:97:execute$39722: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [25]
Add picorv32/$auto$insbuf.cc:97:execute$39723: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [26]
Add picorv32/$auto$insbuf.cc:97:execute$39724: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [27]
Add picorv32/$auto$insbuf.cc:97:execute$39725: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [28]
Add picorv32/$auto$insbuf.cc:97:execute$39726: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [29]
Add picorv32/$auto$insbuf.cc:97:execute$39727: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [30]
Add picorv32/$auto$insbuf.cc:97:execute$39728: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [31]
Add picorv32/$auto$insbuf.cc:97:execute$39729: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [32]
Add picorv32/$auto$insbuf.cc:97:execute$39730: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [33]
Add picorv32/$auto$insbuf.cc:97:execute$39731: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [34]
Add picorv32/$auto$insbuf.cc:97:execute$39732: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_data [35]
Add picorv32/$auto$insbuf.cc:97:execute$39733: $auto$hilomap.cc:47:hilomap_worker$39618 -> \trace_valid

yosys> clean -purge

yosys> echo off
echo off
{
   "creator": "Yosys 0.52 (git sha1 fee39a328, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)",
   "invocation": "stat -json -top picorv32 -liberty /nfs/sc_compute/builds/03ceb3a4f0e94730a95a08d439e9c2e9/picorv32/job0/syn/0/inputs/sc_logic_sky130hd_sky130_fd_sc_hd__ss_n40C_1v40.lib ",
   "modules": {
      "\\picorv32": {
         "num_wires":         6282,
         "num_wire_bits":     6664,
         "num_pub_wires":     1571,
         "num_pub_wire_bits": 1953,
         "num_ports":         27,
         "num_port_bits":     409,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         6358,
         "area":              81747.152000,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111oi_0": 3,
            "sky130_fd_sc_hd__a211o_1": 16,
            "sky130_fd_sc_hd__a211oi_1": 31,
            "sky130_fd_sc_hd__a211oi_2": 1,
            "sky130_fd_sc_hd__a21boi_0": 14,
            "sky130_fd_sc_hd__a21o_1": 67,
            "sky130_fd_sc_hd__a21oi_1": 368,
            "sky130_fd_sc_hd__a21oi_2": 2,
            "sky130_fd_sc_hd__a221o_1": 2,
            "sky130_fd_sc_hd__a221oi_1": 46,
            "sky130_fd_sc_hd__a222oi_1": 39,
            "sky130_fd_sc_hd__a22o_1": 16,
            "sky130_fd_sc_hd__a22oi_1": 73,
            "sky130_fd_sc_hd__a2bb2oi_1": 3,
            "sky130_fd_sc_hd__a311oi_1": 2,
            "sky130_fd_sc_hd__a31o_1": 5,
            "sky130_fd_sc_hd__a31oi_1": 71,
            "sky130_fd_sc_hd__a32o_1": 6,
            "sky130_fd_sc_hd__a32oi_1": 14,
            "sky130_fd_sc_hd__a41o_1": 1,
            "sky130_fd_sc_hd__a41oi_1": 5,
            "sky130_fd_sc_hd__and2_0": 10,
            "sky130_fd_sc_hd__and2_1": 21,
            "sky130_fd_sc_hd__and3_1": 63,
            "sky130_fd_sc_hd__and3b_1": 1,
            "sky130_fd_sc_hd__and4_1": 27,
            "sky130_fd_sc_hd__and4b_1": 2,
            "sky130_fd_sc_hd__buf_1": 367,
            "sky130_fd_sc_hd__buf_2": 3,
            "sky130_fd_sc_hd__buf_4": 114,
            "sky130_fd_sc_hd__clkinv_1": 10,
            "sky130_fd_sc_hd__conb_1": 1,
            "sky130_fd_sc_hd__dfxtp_1": 317,
            "sky130_fd_sc_hd__edfxtp_1": 1280,
            "sky130_fd_sc_hd__fa_1": 5,
            "sky130_fd_sc_hd__ha_1": 199,
            "sky130_fd_sc_hd__inv_1": 212,
            "sky130_fd_sc_hd__inv_2": 2,
            "sky130_fd_sc_hd__mux2_2": 60,
            "sky130_fd_sc_hd__mux2i_1": 87,
            "sky130_fd_sc_hd__mux4_2": 545,
            "sky130_fd_sc_hd__nand2_1": 516,
            "sky130_fd_sc_hd__nand2b_1": 18,
            "sky130_fd_sc_hd__nand3_1": 79,
            "sky130_fd_sc_hd__nand3b_1": 3,
            "sky130_fd_sc_hd__nand4_1": 29,
            "sky130_fd_sc_hd__nand4b_1": 1,
            "sky130_fd_sc_hd__nor2_1": 486,
            "sky130_fd_sc_hd__nor2b_1": 23,
            "sky130_fd_sc_hd__nor3_1": 128,
            "sky130_fd_sc_hd__nor3b_1": 14,
            "sky130_fd_sc_hd__nor4_1": 27,
            "sky130_fd_sc_hd__nor4_2": 1,
            "sky130_fd_sc_hd__nor4b_1": 3,
            "sky130_fd_sc_hd__o2111ai_1": 1,
            "sky130_fd_sc_hd__o211ai_1": 25,
            "sky130_fd_sc_hd__o211ai_2": 1,
            "sky130_fd_sc_hd__o21a_1": 75,
            "sky130_fd_sc_hd__o21ai_0": 480,
            "sky130_fd_sc_hd__o21ai_1": 13,
            "sky130_fd_sc_hd__o21bai_1": 38,
            "sky130_fd_sc_hd__o221a_2": 5,
            "sky130_fd_sc_hd__o221ai_1": 40,
            "sky130_fd_sc_hd__o22a_1": 2,
            "sky130_fd_sc_hd__o22ai_1": 26,
            "sky130_fd_sc_hd__o311a_1": 1,
            "sky130_fd_sc_hd__o311ai_0": 16,
            "sky130_fd_sc_hd__o311ai_1": 1,
            "sky130_fd_sc_hd__o31a_1": 3,
            "sky130_fd_sc_hd__o31ai_1": 22,
            "sky130_fd_sc_hd__o32a_1": 1,
            "sky130_fd_sc_hd__o32ai_1": 17,
            "sky130_fd_sc_hd__o41ai_1": 1,
            "sky130_fd_sc_hd__or2_1": 12,
            "sky130_fd_sc_hd__or3_1": 17,
            "sky130_fd_sc_hd__or4_1": 4,
            "sky130_fd_sc_hd__or4b_2": 4,
            "sky130_fd_sc_hd__xnor2_1": 92,
            "sky130_fd_sc_hd__xor2_1": 22
         }
      }
   },
      "design": {
         "num_wires":         6282,
         "num_wire_bits":     6664,
         "num_pub_wires":     1571,
         "num_pub_wire_bits": 1953,
         "num_ports":         27,
         "num_port_bits":     409,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         6358,
         "area":              81747.152000,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111oi_0": 3,
            "sky130_fd_sc_hd__a211o_1": 16,
            "sky130_fd_sc_hd__a211oi_1": 31,
            "sky130_fd_sc_hd__a211oi_2": 1,
            "sky130_fd_sc_hd__a21boi_0": 14,
            "sky130_fd_sc_hd__a21o_1": 67,
            "sky130_fd_sc_hd__a21oi_1": 368,
            "sky130_fd_sc_hd__a21oi_2": 2,
            "sky130_fd_sc_hd__a221o_1": 2,
            "sky130_fd_sc_hd__a221oi_1": 46,
            "sky130_fd_sc_hd__a222oi_1": 39,
            "sky130_fd_sc_hd__a22o_1": 16,
            "sky130_fd_sc_hd__a22oi_1": 73,
            "sky130_fd_sc_hd__a2bb2oi_1": 3,
            "sky130_fd_sc_hd__a311oi_1": 2,
            "sky130_fd_sc_hd__a31o_1": 5,
            "sky130_fd_sc_hd__a31oi_1": 71,
            "sky130_fd_sc_hd__a32o_1": 6,
            "sky130_fd_sc_hd__a32oi_1": 14,
            "sky130_fd_sc_hd__a41o_1": 1,
            "sky130_fd_sc_hd__a41oi_1": 5,
            "sky130_fd_sc_hd__and2_0": 10,
            "sky130_fd_sc_hd__and2_1": 21,
            "sky130_fd_sc_hd__and3_1": 63,
            "sky130_fd_sc_hd__and3b_1": 1,
            "sky130_fd_sc_hd__and4_1": 27,
            "sky130_fd_sc_hd__and4b_1": 2,
            "sky130_fd_sc_hd__buf_1": 367,
            "sky130_fd_sc_hd__buf_2": 3,
            "sky130_fd_sc_hd__buf_4": 114,
            "sky130_fd_sc_hd__clkinv_1": 10,
            "sky130_fd_sc_hd__conb_1": 1,
            "sky130_fd_sc_hd__dfxtp_1": 317,
            "sky130_fd_sc_hd__edfxtp_1": 1280,
            "sky130_fd_sc_hd__fa_1": 5,
            "sky130_fd_sc_hd__ha_1": 199,
            "sky130_fd_sc_hd__inv_1": 212,
            "sky130_fd_sc_hd__inv_2": 2,
            "sky130_fd_sc_hd__mux2_2": 60,
            "sky130_fd_sc_hd__mux2i_1": 87,
            "sky130_fd_sc_hd__mux4_2": 545,
            "sky130_fd_sc_hd__nand2_1": 516,
            "sky130_fd_sc_hd__nand2b_1": 18,
            "sky130_fd_sc_hd__nand3_1": 79,
            "sky130_fd_sc_hd__nand3b_1": 3,
            "sky130_fd_sc_hd__nand4_1": 29,
            "sky130_fd_sc_hd__nand4b_1": 1,
            "sky130_fd_sc_hd__nor2_1": 486,
            "sky130_fd_sc_hd__nor2b_1": 23,
            "sky130_fd_sc_hd__nor3_1": 128,
            "sky130_fd_sc_hd__nor3b_1": 14,
            "sky130_fd_sc_hd__nor4_1": 27,
            "sky130_fd_sc_hd__nor4_2": 1,
            "sky130_fd_sc_hd__nor4b_1": 3,
            "sky130_fd_sc_hd__o2111ai_1": 1,
            "sky130_fd_sc_hd__o211ai_1": 25,
            "sky130_fd_sc_hd__o211ai_2": 1,
            "sky130_fd_sc_hd__o21a_1": 75,
            "sky130_fd_sc_hd__o21ai_0": 480,
            "sky130_fd_sc_hd__o21ai_1": 13,
            "sky130_fd_sc_hd__o21bai_1": 38,
            "sky130_fd_sc_hd__o221a_2": 5,
            "sky130_fd_sc_hd__o221ai_1": 40,
            "sky130_fd_sc_hd__o22a_1": 2,
            "sky130_fd_sc_hd__o22ai_1": 26,
            "sky130_fd_sc_hd__o311a_1": 1,
            "sky130_fd_sc_hd__o311ai_0": 16,
            "sky130_fd_sc_hd__o311ai_1": 1,
            "sky130_fd_sc_hd__o31a_1": 3,
            "sky130_fd_sc_hd__o31ai_1": 22,
            "sky130_fd_sc_hd__o32a_1": 1,
            "sky130_fd_sc_hd__o32ai_1": 17,
            "sky130_fd_sc_hd__o41ai_1": 1,
            "sky130_fd_sc_hd__or2_1": 12,
            "sky130_fd_sc_hd__or3_1": 17,
            "sky130_fd_sc_hd__or4_1": 4,
            "sky130_fd_sc_hd__or4b_2": 4,
            "sky130_fd_sc_hd__xnor2_1": 92,
            "sky130_fd_sc_hd__xor2_1": 22
         }
      }
}

echo on

yosys> write_verilog -noexpr -nohex -nodec outputs/picorv32.vg

27. Executing Verilog backend.

yosys> clean_zerowidth
Dumping module `\picorv32'.

yosys> write_json outputs/picorv32.netlist.json

28. Executing JSON backend.

End of script. Logfile hash: 6519e7d794, CPU: user 7.98s system 0.19s, MEM: 213.89 MB peak
Yosys 0.52 (git sha1 fee39a328, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)
Time spent: 24% 2x abc (2 sec), 18% 47x opt_expr (1 sec), ...
